erDiagram
    users {
        int id PK "Primary Key"
        bigint telegram_id UK "Unique Telegram ID"
        string username "Username"
        string first_name "First Name"
        string last_name "Last Name"
        string language_code "Language Code"
        int balance "GRAM Balance"
        int frozen_balance "Frozen GRAM"
        string level "User Level (bronze/silver/gold/premium)"
        int total_earned "Total GRAM Earned"
        int total_spent "Total GRAM Spent"
        int tasks_completed "Completed Tasks Count"
        int tasks_created "Created Tasks Count"
        int referrals_count "Referrals Count"
        int premium_referrals_count "Premium Referrals Count"
        int referrer_id FK "Referrer User ID"
        string referral_code UK "Unique Referral Code"
        boolean is_active "Is Active"
        boolean is_banned "Is Banned"
        boolean is_premium "Is Premium"
        datetime premium_expires_at "Premium Expiry Date"
        jsonb notification_settings "Notification Settings"
        datetime last_active_at "Last Activity"
        datetime registered_at "Registration Date"
        datetime created_at "Created At"
        datetime updated_at "Updated At"
    }

    tasks {
        int id PK "Primary Key"
        int author_id FK "Task Author"
        string type "Task Type (subscribe/join/view/bot/react)"
        string title "Task Title"
        text description "Task Description"
        text target_url "Target URL"
        int reward "Reward Amount (GRAM)"
        int total_executions "Total Executions Needed"
        int completed_executions "Completed Executions"
        int remaining_executions "Remaining Executions"
        boolean auto_check "Auto Check Enabled"
        boolean require_screenshot "Screenshot Required"
        int priority "Priority (1-10)"
        boolean is_top_promoted "Top Promotion"
        jsonb conditions "Additional Conditions"
        text[] required_subscriptions "Required Subscriptions"
        int min_account_age "Min Account Age (days)"
        string min_level "Min User Level"
        string status "Status (active/paused/completed/cancelled/expired)"
        datetime expires_at "Expiry Date"
        datetime paused_at "Paused Date"
        text paused_reason "Pause Reason"
        int total_cost "Total Cost"
        int spent_amount "Spent Amount"
        int frozen_amount "Frozen Amount"
        int views "Views Count"
        int clicks "Clicks Count"
        int conversions "Conversions Count"
        datetime created_at "Created At"
        datetime updated_at "Updated At"
    }

    task_executions {
        int id PK "Primary Key"
        int task_id FK "Task ID"
        int user_id FK "User ID"
        string status "Status (pending/in_review/completed/rejected/auto_approved)"
        text screenshot_url "Screenshot URL"
        text comment "User Comment"
        datetime checked_at "Checked Date"
        int checked_by_id FK "Checked By User"
        text rejection_reason "Rejection Reason"
        int reward_amount "Reward Amount"
        boolean reward_paid "Reward Paid"
        datetime reward_paid_at "Reward Paid Date"
        int auto_check_attempts "Auto Check Attempts"
        jsonb auto_check_result "Auto Check Result"
        datetime started_at "Started Date"
        datetime completed_at "Completed Date"
        datetime expires_at "Expires Date"
        datetime created_at "Created At"
        datetime updated_at "Updated At"
    }

    transactions {
        int id PK "Primary Key"
        int user_id FK "User ID"
        string type "Transaction Type"
        int amount "Amount"
        int balance_before "Balance Before"
        int balance_after "Balance After"
        int related_task_id FK "Related Task ID"
        int related_user_id FK "Related User ID"
        int related_check_id "Related Check ID"
        text description "Description"
        jsonb metadata "Additional Metadata"
        string external_id "External Payment ID"
        string payment_provider "Payment Provider"
        string status "Status (pending/completed/failed/cancelled)"
        datetime processed_at "Processed Date"
        text failed_reason "Failed Reason"
        datetime created_at "Created At"
        datetime updated_at "Updated At"
    }

    checks {
        int id PK "Primary Key"
        int creator_id FK "Creator User ID"
        string code UK "Unique Check Code"
        string type "Check Type (personal/multi)"
        int total_amount "Total Amount"
        int amount_per_activation "Amount Per Activation"
        int max_activations "Max Activations"
        int current_activations "Current Activations"
        string password "Password Protection"
        string required_subscription "Required Subscription"
        int target_user_id FK "Target User ID (for personal)"
        text comment "Check Comment"
        text image_url "Check Image URL"
        boolean is_active "Is Active"
        datetime expires_at "Expires Date"
        datetime created_at "Created At"
        datetime updated_at "Updated At"
    }

    check_activations {
        int id PK "Primary Key"
        int check_id FK "Check ID"
        int user_id FK "User ID"
        int amount "Amount Received"
        datetime activated_at "Activation Date"
    }

    notifications {
        int id PK "Primary Key"
        int user_id FK "User ID"
        string type "Notification Type"
        string title "Notification Title"
        text message "Notification Message"
        jsonb data "Additional Data"
        text action_url "Action URL"
        boolean is_read "Is Read"
        datetime read_at "Read Date"
        int priority "Priority (1-4)"
        string icon "Icon"
        datetime expires_at "Expires Date"
        datetime created_at "Created At"
        datetime updated_at "Updated At"
    }

    %% Relationships
    users ||--o{ users : "referrer"
    users ||--o{ tasks : "creates"
    users ||--o{ task_executions : "executes"
    users ||--o{ task_executions : "checks"
    users ||--o{ transactions : "owns"
    users ||--o{ transactions : "related_to"
    users ||--o{ checks : "creates"
    users ||--o{ checks : "targets"
    users ||--o{ check_activations : "activates"
    users ||--o{ notifications : "receives"
    
    tasks ||--o{ task_executions : "has"
    tasks ||--o{ transactions : "generates"
    
    checks ||--o{ check_activations : "activated_by"