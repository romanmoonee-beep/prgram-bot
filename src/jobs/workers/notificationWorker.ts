// src/jobs/workers/notificationWorker.ts
import { Job } from 'bull';
import { Bot } from 'grammy';
import { notificationQueue, NotificationJob } from '../queues';
import { User, Notification } from '../../database/models';
import { logger } from '../../utils/logger';
import { formatNotification } from '../../utils/formatters/init';

// Worker –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationWorker {
  public bot: Bot;

  constructor(bot: Bot) {
    this.bot = bot;
    this.setupProcessor();
  }

  public setupProcessor() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    notificationQueue.process('send-notification', 10, this.processNotification.bind(this));
    
    logger.info('‚úÖ Notification worker initialized');
  }

  private async processNotification(job: Job<NotificationJob>) {
    const { userId, type, title, message, data, priority } = job.data;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findByPk(userId);
      if (!user) {
        throw new Error(`User ${userId} not found`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏
      if (!user.isActive || user.isBanned) {
        logger.warn(`Skipping notification for inactive/banned user ${userId}`);
        return { success: false, reason: 'User inactive or banned' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!this.shouldSendNotification(user, type)) {
        logger.debug(`Notification ${type} disabled for user ${userId}`);
        return { success: false, reason: 'Notifications disabled' };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const notification = await Notification.create({
        userId,
        type,
        title,
        message,
        data,
        priority: priority || 1
      });

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const formattedMessage = formatNotification(type, title, message, data);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
      const success = await this.sendTelegramNotification(user.telegramId, formattedMessage, data);

      if (success) {
        logger.info(`Notification sent to user ${userId}: ${title}`);
        return { success: true, notificationId: notification.id };
      } else {
        logger.warn(`Failed to send Telegram notification to user ${userId}`);
        return { success: false, reason: 'Telegram send failed' };
      }

    } catch (error) {
      logger.error(`Notification worker error for user ${userId}:`, error);
      throw error;
    }
  }

  public async sendTelegramNotification(telegramId: number, message: string, data?: any): Promise<boolean> {
    try {
      const options: any = {
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å URL –¥–µ–π—Å—Ç–≤–∏—è
      if (data?.actionUrl) {
        options.reply_markup = {
          inline_keyboard: [[
            { text: 'üîó –ü–µ—Ä–µ–π—Ç–∏', url: data.actionUrl }
          ]]
        };
      }

      await this.bot.api.sendMessage(telegramId, message, options);
      return true;
    } catch (error: any) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      if (error.error_code === 403) {
        logger.warn(`Bot blocked by user ${telegramId}`);
        // –ú–æ–∂–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–º–µ—Ç–∏—Ç—å, —á—Ç–æ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
      } else {
        logger.error(`Telegram API error for user ${telegramId}:`, error);
      }
      return false;
    }
  }

  public shouldSendNotification(user: User, type: string): boolean {
    const settings = user.notificationSettings as any;
    
    if (!settings || typeof settings !== 'object') {
      return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }

    // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    const settingsMap: { [key: string]: string } = {
      'task_completed': 'taskCompleted',
      'task_created': 'taskCreated',
      'referral_joined': 'referralJoined',
      'balance_low': 'balanceUpdates',
      'level_up': 'balanceUpdates',
      'check_received': 'balanceUpdates',
      'system': 'systemMessages'
    };

    const settingKey = settingsMap[type];
    if (!settingKey) {
      return true; // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    }

    return settings[settingKey] !== false;
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async sendTaskCompleted(userId: number, taskTitle: string, reward: number) {
    await notificationQueue.add('send-notification', {
      userId,
      type: 'task_completed',
      title: '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!',
      message: `–ó–∞–¥–∞–Ω–∏–µ "${taskTitle}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.`,
      data: { reward },
      priority: 2
    });
  }

  static async sendReferralJoined(userId: number, referralName: string, bonus: number) {
    await notificationQueue.add('send-notification', {
      userId,
      type: 'referral_joined',
      title: '–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!',
      message: `${referralName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.`,
      data: { bonus },
      priority: 2
    });
  }

  static async sendLevelUp(userId: number, newLevel: string) {
    const levelNames: { [key: string]: string } = {
      'bronze': '–ë—Ä–æ–Ω–∑–∞',
      'silver': '–°–µ—Ä–µ–±—Ä–æ',
      'gold': '–ó–æ–ª–æ—Ç–æ',
      'premium': '–ü—Ä–µ–º–∏—É–º'
    };

    await notificationQueue.add('send-notification', {
      userId,
      type: 'level_up',
      title: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!',
      message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${levelNames[newLevel] || newLevel}.`,
      data: { newLevel },
      priority: 2
    });
  }

  static async sendBalanceLow(userId: number, currentBalance: number) {
    await notificationQueue.add('send-notification', {
      userId,
      type: 'balance_low',
      title: '–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å',
      message: `–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${currentBalance} GRAM. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.`,
      priority: 3
    });
  }

  static async sendSystemMessage(userId: number, title: string, message: string, priority: number = 1) {
    await notificationQueue.add('send-notification', {
      userId,
      type: 'system',
      title,
      message,
      priority
    });
  }

  static async sendCheckReceived(userId: number, amount: number, checkCode: string) {
    await notificationQueue.add('send-notification', {
      userId,
      type: 'check_received',
      title: '–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω!',
      message: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ —á–µ–∫ –Ω–∞ ${amount} GRAM.`,
      data: { amount, checkCode },
      priority: 2
    });
  }

  // –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async sendBulkNotification(userIds: number[], title: string, message: string, priority: number = 1) {
    const jobs = userIds.map(userId => ({
      userId,
      type: 'system',
      title,
      message,
      priority
    }));

    await notificationQueue.addBulk(
      jobs.map(job => ({
        name: 'send-notification',
        data: job,
        opts: { priority: priority * 10 }
      }))
    );

    logger.info(`Bulk notification scheduled for ${userIds.length} users`);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ worker
  public async stop() {
    await notificationQueue.close();
    logger.info('Notification worker stopped');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
export default NotificationWorker;