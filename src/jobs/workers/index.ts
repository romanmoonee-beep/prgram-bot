// src/jobs/workers/index.ts
import { Bot } from 'grammy';
import { logger } from '../../utils/logger';
import { taskCheckWorker } from './taskCheckWorker';
import NotificationWorker from './notificationWorker';
import TelegramApiWorker from './telegramApiWorker';
import AnalyticsWorker from './analyticsWorker';
import CleanupWorker from './cleanupWorker';

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ workers
export class WorkerManager {
  private notificationWorker: NotificationWorker;
  private telegramApiWorker: TelegramApiWorker;
  private analyticsWorker: AnalyticsWorker;
  private cleanupWorker: CleanupWorker;
  private workers: any[] = [];

  constructor(bot: Bot) {
    this.initializeWorkers(bot);
  }

  private initializeWorkers(bot: Bot) {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ workers
      this.notificationWorker = new NotificationWorker(bot);
      this.telegramApiWorker = new TelegramApiWorker(bot);
      this.analyticsWorker = new AnalyticsWorker();
      this.cleanupWorker = new CleanupWorker();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ—Ö workers
      this.workers = [
        taskCheckWorker,
        this.notificationWorker,
        this.telegramApiWorker,
        this.analyticsWorker,
        this.cleanupWorker
      ];

      logger.info('‚úÖ All workers initialized successfully');
    } catch (error) {
      logger.error('‚ùå Failed to initialize workers:', error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è graceful shutdown –≤—Å–µ—Ö workers
  async stopAllWorkers() {
    logger.info('üõë Stopping all workers...');

    const stopPromises = this.workers.map(async (worker) => {
      try {
        if (worker && typeof worker.stop === 'function') {
          await worker.stop();
        }
      } catch (error) {
        logger.error('Error stopping worker:', error);
      }
    });

    await Promise.all(stopPromises);
    logger.info('‚úÖ All workers stopped');
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö workers
  getWorkersStatus() {
    return {
      taskCheck: !!taskCheckWorker,
      notification: !!this.notificationWorker,
      telegramApi: !!this.telegramApiWorker,
      analytics: !!this.analyticsWorker,
      cleanup: !!this.cleanupWorker
    };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º workers
  getNotificationWorker() {
    return this.notificationWorker;
  }

  getTelegramApiWorker() {
    return this.telegramApiWorker;
  }

  getAnalyticsWorker() {
    return this.analyticsWorker;
  }

  getCleanupWorker() {
    return this.cleanupWorker;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã workers
export { taskCheckWorker, NotificationWorker, TelegramApiWorker, AnalyticsWorker, CleanupWorker };

export default WorkerManager;