// src/app.ts - FINAL FIXED VERSION
import { Bot, webhookCallback } from 'grammy';
import express from 'express';
import dotenv from 'dotenv';
import { sequelize, setupDatabase } from './database/models';
import { setupHandlers, setupErrorHandlers } from './bot/handlers/init';
import { setupMiddlewares } from './bot/middlewares';
import { startCronJobs } from './jobs/cron';
import { logger } from './utils/logger';
import { initTelegramService } from './services/telegram';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!process.env.BOT_TOKEN) {
  throw new Error('BOT_TOKEN is required');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN);

// Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
const app = express();
app.use(express.json());

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    version: process.env.npm_package_version || '1.0.0',
    environment: process.env.NODE_ENV || 'development'
  });
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
app.get('/api/stats', async (req, res) => {
  try {
    const { User, Task, Transaction } = await import('./database/models');
    
    const stats = {
      users: {
        total: await User.count(),
        active: await User.count({ where: { isActive: true } }),
        premium: await User.count({ where: { isPremium: true } })
      },
      tasks: {
        total: await Task.count(),
        active: await Task.count({ where: { status: 'active' } }),
        completed: await Task.count({ where: { status: 'completed' } })
      },
      transactions: {
        total: await Transaction.count({ where: { status: 'completed' } }),
        totalAmount: await Transaction.sum('amount', { where: { status: 'completed' } }) || 0
      }
    };
    
    res.json(stats);
  } catch (error) {
    logger.error('Stats API error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Endpoint –¥–ª—è webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app.post('/api/webhook/payment', express.json(), async (req, res) => {
  try {
    logger.info('Payment webhook received:', req.body);
    res.json({ success: true });
  } catch (error) {
    logger.error('Payment webhook error:', error);
    res.status(500).json({ error: 'Webhook processing failed' });
  }
});

async function startBot() {
  try {
    logger.info('üöÄ Starting PR GRAM Bot...');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await setupDatabase({
      sync: true,
      force: false,
      alter: process.env.NODE_ENV === 'development',
      createExtensions: true,
      createIndexes: true
    });
    
    logger.info('‚úÖ Database setup completed');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —Å–µ—Ä–≤–∏—Å–∞
    initTelegramService(bot);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –±–æ—Ç–∞
    setupMiddlewares(bot);
    logger.info('‚úÖ Bot middlewares configured');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π
    setupHandlers(bot);
    logger.info('‚úÖ Bot handlers configured');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
    setupErrorHandlers(bot);
    logger.info('‚úÖ Error handlers configured');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    const botInfo = await bot.api.getMe();
    logger.info(`ü§ñ Bot initialized: @${botInfo.username} (${botInfo.first_name})`);

    if (process.env.NODE_ENV === 'production' && process.env.WEBAPP_URL) {
      // Production: Webhook —Ä–µ–∂–∏–º
      const webhookUrl = `${process.env.WEBAPP_URL}/webhook`;
      
      logger.info(`üåê Setting webhook URL: ${webhookUrl}`);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
      await bot.api.deleteWebhook();
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ webhook
      await bot.api.setWebhook(webhookUrl, {
        drop_pending_updates: true,
        allowed_updates: [
          'message',
          'callback_query',
          'inline_query',
          'chosen_inline_result',
          'pre_checkout_query',
          'successful_payment'
        ]
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
      app.use('/webhook', webhookCallback(bot, 'express'));
      
      const port = process.env.PORT || 3000;
      app.listen(port, () => {
        logger.info(`üöÄ Webhook server running on port ${port}`);
        logger.info(`üåê Bot is ready to receive updates at ${webhookUrl}`);
      });
    } else {
      // Development: Polling —Ä–µ–∂–∏–º
      logger.info('üîÑ Starting in polling mode (development)...');
      
      // –£–¥–∞–ª—è–µ–º webhook –¥–ª—è polling —Ä–µ–∂–∏–º–∞
      await bot.api.deleteWebhook();
      
      await bot.start({
        drop_pending_updates: true,
        allowed_updates: [
          'message',
          'callback_query',
          'inline_query',
          'chosen_inline_result',
          'pre_checkout_query',
          'successful_payment'
        ]
      });

      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º Express –¥–ª—è API
      const port = process.env.PORT || 3000;
      app.listen(port, () => {
        logger.info(`üåê API server running on port ${port}`);
      });
    }

    // –ó–∞–ø—É—Å–∫ cron –∑–∞–¥–∞—á
    startCronJobs();
    logger.info('‚úÖ Cron jobs started');
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    if (process.env.ADMIN_IDS) {
      const adminIds = process.env.ADMIN_IDS.split(',').map(id => parseInt(id));
      const startMessage = `üéâ **PR GRAM Bot –∑–∞–ø—É—â–µ–Ω!**\n\n` +
                          `ü§ñ –í–µ—Ä—Å–∏—è: ${process.env.npm_package_version || '1.0.0'}\n` +
                          `üåê –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}\n` +
                          `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
                          `–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ`;
      
      for (const adminId of adminIds) {
        try {
          await bot.api.sendMessage(adminId, startMessage, { parse_mode: 'Markdown' });
        } catch (error) {
          logger.warn(`Failed to notify admin ${adminId}:`, error.message);
        }
      }
    }
    
    logger.info('üéâ PR GRAM Bot is fully operational and ready for users!');
    
  } catch (error) {
    logger.error('‚ùå Critical error during bot startup:', error);
    process.exit(1);
  }
}

// Graceful shutdown handler
async function gracefulShutdown(signal: string) {
  logger.info(`üõë Received ${signal}. Starting graceful shutdown...`);
  
  try {
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    logger.info('‚èπÔ∏è  Stopping bot...');
    await bot.stop();
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ cron –∑–∞–¥–∞—á
    const { stopCronJobs } = await import('./jobs/cron');
    stopCronJobs();
    logger.info('‚èπÔ∏è  Cron jobs stopped');
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    await sequelize.close();
    logger.info('‚èπÔ∏è  Database connection closed');
    
    logger.info('‚úÖ Graceful shutdown completed successfully');
  } catch (error) {
    logger.error('‚ùå Error during graceful shutdown:', error);
  }
  
  process.exit(0);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => gracefulShutdown('SIGINT'));
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  logger.error('‚ùå Uncaught Exception:', error);
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
  if (process.env.NODE_ENV === 'production') {
    gracefulShutdown('UNCAUGHT_EXCEPTION');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot().catch((error) => {
  logger.error('‚ùå Failed to start PR GRAM Bot:', error);
  process.exit(1);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { bot, app };