// src/models/Notification.ts
import { 
  Model, 
  DataTypes, 
  CreationOptional, 
  InferAttributes, 
  InferCreationAttributes,
  ForeignKey,
  NonAttribute,
  Association
} from 'sequelize';
import { sequelize } from '../config/database';
import { User } from './User';
import { NOTIFICATION_TYPES } from '../utils/constants';

export interface NotificationAttributes extends Model<InferAttributes<Notification>, InferCreationAttributes<Notification>> {
  id: CreationOptional<number>;
  userId: ForeignKey<User['id']>;
  
  // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  type: string;
  title: string;
  message: string;
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  data?: object;
  actionUrl?: string;
  
  // –°—Ç–∞—Ç—É—Å
  isRead: CreationOptional<boolean>;
  readAt?: Date;
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  priority: CreationOptional<number>;
  icon?: string;
  
  // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏
  expiresAt?: Date;
  
  // –î–∞—Ç—ã
  createdAt: CreationOptional<Date>;
  updatedAt: CreationOptional<Date>;
  
  // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
  user?: NonAttribute<User>;
}

export class Notification extends Model<InferAttributes<Notification>, InferCreationAttributes<Notification>> implements NotificationAttributes {
  declare id: CreationOptional<number>;
  declare userId: ForeignKey<User['id']>;
  
  declare type: string;
  declare title: string;
  declare message: string;
  
  declare data?: object;
  declare actionUrl?: string;
  
  declare isRead: CreationOptional<boolean>;
  declare readAt?: Date;
  
  declare priority: CreationOptional<number>;
  declare icon?: string;
  
  declare expiresAt?: Date;
  
  declare createdAt: CreationOptional<Date>;
  declare updatedAt: CreationOptional<Date>;
  
  // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
  declare user?: NonAttribute<User>;
  
  declare static associations: {
    user: Association<Notification, User>;
  };

  // –ú–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  isExpired(): boolean {
    return this.expiresAt ? this.expiresAt <= new Date() : false;
  }

  getTypeIcon(): string {
    if (this.icon) return this.icon;
    
    switch (this.type) {
      case NOTIFICATION_TYPES.TASK_COMPLETED: return '‚úÖ';
      case NOTIFICATION_TYPES.TASK_CREATED: return 'üì¢';
      case NOTIFICATION_TYPES.REFERRAL_JOINED: return 'ü§ù';
      case NOTIFICATION_TYPES.BALANCE_LOW: return '‚ö†Ô∏è';
      case NOTIFICATION_TYPES.LEVEL_UP: return '‚≠ê';
      case NOTIFICATION_TYPES.CHECK_RECEIVED: return 'üí≥';
      case NOTIFICATION_TYPES.SYSTEM: return 'üîî';
      default: return 'üì¢';
    }
  }

  getPriorityText(): string {
    switch (this.priority) {
      case 1: return '–ù–∏–∑–∫–∏–π';
      case 2: return '–°—Ä–µ–¥–Ω–∏–π';
      case 3: return '–í—ã—Å–æ–∫–∏–π';
      case 4: return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π';
      default: return '–û–±—ã—á–Ω—ã–π';
    }
  }

  async markAsRead(): Promise<void> {
    if (!this.isRead) {
      this.isRead = true;
      this.readAt = new Date();
      await this.save();
    }
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async createTaskCompleted(userId: number, taskTitle: string, reward: number): Promise<Notification> {
    return await Notification.create({
      userId,
      type: NOTIFICATION_TYPES.TASK_COMPLETED,
      title: '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!',
      message: `–ó–∞–¥–∞–Ω–∏–µ "${taskTitle}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü–æ–ª—É—á–µ–Ω–æ ${reward} GRAM.`,
      priority: 2,
      data: { reward }
    });
  }

  static async createTaskCreated(userId: number, taskTitle: string, taskId: number): Promise<Notification> {
    return await Notification.create({
      userId,
      type: NOTIFICATION_TYPES.TASK_CREATED,
      title: '–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ',
      message: `–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ "${taskTitle}" –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.`,
      priority: 1,
      data: { taskId }
    });
  }

  static async createReferralJoined(userId: number, referralName: string, bonus: number): Promise<Notification> {
    return await Notification.create({
      userId,
      type: NOTIFICATION_TYPES.REFERRAL_JOINED,
      title: '–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!',
      message: `${referralName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ. –ü–æ–ª—É—á–µ–Ω–æ ${bonus} GRAM.`,
      priority: 2,
      data: { bonus }
    });
  }

  static async createBalanceLow(userId: number, currentBalance: number): Promise<Notification> {
    return await Notification.create({
      userId,
      type: NOTIFICATION_TYPES.BALANCE_LOW,
      title: '–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å',
      message: `–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${currentBalance} GRAM. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.`,
      priority: 3
    });
  }

  static async createLevelUp(userId: number, newLevel: string): Promise<Notification> {
    const levelNames: { [key: string]: string } = {
      'bronze': '–ë—Ä–æ–Ω–∑–∞',
      'silver': '–°–µ—Ä–µ–±—Ä–æ', 
      'gold': '–ó–æ–ª–æ—Ç–æ',
      'premium': '–ü—Ä–µ–º–∏—É–º'
    };

    return await Notification.create({
      userId,
      type: NOTIFICATION_TYPES.LEVEL_UP,
      title: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!',
      message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${levelNames[newLevel] || newLevel}.`,
      priority: 2,
      data: { newLevel }
    });
  }

  static async createCheckReceived(userId: number, amount: number, checkCode: string): Promise<Notification> {
    return await Notification.create({
      userId,
      type: NOTIFICATION_TYPES.CHECK_RECEIVED,
      title: '–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω!',
      message: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ —á–µ–∫ –Ω–∞ ${amount} GRAM (–∫–æ–¥: ${checkCode}).`,
      priority: 2,
      data: { amount, checkCode }
    });
  }

  static async createSystemNotification(userId: number, title: string, message: string, priority: number = 1): Promise<Notification> {
    return await Notification.create({
      userId,
      type: NOTIFICATION_TYPES.SYSTEM,
      title,
      message,
      priority
    });
  }

  // –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  static async markAllAsRead(userId: number): Promise<number> {
    const [affectedCount] = await Notification.update(
      { 
        isRead: true,
        readAt: new Date()
      },
      { 
        where: { 
          userId,
          isRead: false
        }
      }
    );
    return affectedCount;
  }

  static async getUnreadCount(userId: number): Promise<number> {
    return await Notification.count({
      where: {
        userId,
        isRead: false
      }
    });
  }

  static async cleanupExpired(): Promise<number> {
    const count = await Notification.destroy({
      where: {
        expiresAt: {
          [sequelize.Sequelize.Op.lte]: new Date()
        }
      }
    });
    return count;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
Notification.init({
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'users',
      key: 'id'
    }
  },
  type: {
    type: DataTypes.STRING(50),
    allowNull: false,
    validate: {
      isIn: [Object.values(NOTIFICATION_TYPES)]
    }
  },
  title: {
    type: DataTypes.STRING(255),
    allowNull: false,
    validate: {
      len: [1, 255]
    }
  },
  message: {
    type: DataTypes.TEXT,
    allowNull: false,
    validate: {
      len: [1, 1000]
    }
  },
  data: {
    type: DataTypes.JSONB,
    allowNull: true
  },
  actionUrl: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  isRead: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  readAt: {
    type: DataTypes.DATE,
    allowNull: true
  },
  priority: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 1,
    validate: {
      min: 1,
      max: 4
    }
  },
  icon: {
    type: DataTypes.STRING(10),
    allowNull: true
  },
  expiresAt: {
    type: DataTypes.DATE,
    allowNull: true
  },
  createdAt: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  updatedAt: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  }
}, {
  sequelize,
  tableName: 'notifications',
  timestamps: true,
  underscored: true,
  indexes: [
    {
      fields: ['user_id']
    },
    {
      fields: ['type']
    },
    {
      fields: ['is_read']
    },
    {
      fields: ['priority']
    },
    {
      fields: ['expires_at']
    },
    {
      fields: ['created_at']
    },
    {
      // –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      fields: ['user_id', 'is_read', 'created_at']
    }
  ]
});

// –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
Notification.belongsTo(User, {
  as: 'user',
  foreignKey: 'userId'
});

User.hasMany(Notification, {
  as: 'notifications',
  foreignKey: 'userId'
});

export { Notification };