// src/models/Check.ts
import { 
  Model, 
  DataTypes, 
  CreationOptional, 
  InferAttributes, 
  InferCreationAttributes,
  ForeignKey,
  NonAttribute,
  Association
} from 'sequelize';
import { sequelize } from '../config/database';
import { User } from './User';
import crypto from 'crypto';

export interface CheckAttributes extends Model<InferAttributes<Check>, InferCreationAttributes<Check>> {
  id: CreationOptional<number>;
  creatorId: ForeignKey<User['id']>;
  
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  code: string;
  type: CreationOptional<string>; // 'personal' | 'multi'
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ–∫–∞
  totalAmount: number;
  amountPerActivation: number;
  maxActivations: number;
  currentActivations: CreationOptional<number>;
  
  // –£—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  password?: string;
  requiredSubscription?: string;
  targetUserId?: ForeignKey<User['id']>; // –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤
  
  // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
  comment?: string;
  imageUrl?: string;
  
  // –°—Ç–∞—Ç—É—Å
  isActive: CreationOptional<boolean>;
  expiresAt?: Date;
  
  // –î–∞—Ç—ã
  createdAt: CreationOptional<Date>;
  updatedAt: CreationOptional<Date>;
  
  // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
  creator?: NonAttribute<User>;
  targetUser?: NonAttribute<User>;
  activations?: NonAttribute<CheckActivation[]>;
}

export class Check extends Model<InferAttributes<Check>, InferCreationAttributes<Check>> implements CheckAttributes {
  declare id: CreationOptional<number>;
  declare creatorId: ForeignKey<User['id']>;
  
  declare code: string;
  declare type: CreationOptional<string>;
  
  declare totalAmount: number;
  declare amountPerActivation: number;
  declare maxActivations: number;
  declare currentActivations: CreationOptional<number>;
  
  declare password?: string;
  declare requiredSubscription?: string;
  declare targetUserId?: ForeignKey<User['id']>;
  
  declare comment?: string;
  declare imageUrl?: string;
  
  declare isActive: CreationOptional<boolean>;
  declare expiresAt?: Date;
  
  declare createdAt: CreationOptional<Date>;
  declare updatedAt: CreationOptional<Date>;
  
  // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
  declare creator?: NonAttribute<User>;
  declare targetUser?: NonAttribute<User>;
  declare activations?: NonAttribute<CheckActivation[]>;
  
  declare static associations: {
    creator: Association<Check, User>;
    targetUser: Association<Check, User>;
    activations: Association<Check, CheckActivation>;
  };

  // –ú–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  isPersonal(): boolean {
    return this.type === 'personal';
  }

  isMulti(): boolean {
    return this.type === 'multi';
  }

  canBeActivated(): boolean {
    if (!this.isActive) return false;
    if (this.expiresAt && this.expiresAt <= new Date()) return false;
    if ((this.currentActivations || 0) >= this.maxActivations) return false;
    return true;
  }

  getRemainingActivations(): number {
    return Math.max(0, this.maxActivations - (this.currentActivations || 0));
  }

  getRemainingAmount(): number {
    const remaining = this.getRemainingActivations();
    return remaining * this.amountPerActivation;
  }

  hasPassword(): boolean {
    return !!this.password;
  }

  hasSubscriptionRequirement(): boolean {
    return !!this.requiredSubscription;
  }

  verifyPassword(inputPassword: string): boolean {
    if (!this.password) return true;
    return this.password === inputPassword;
  }

  canUserActivate(userId: number): { canActivate: boolean; reason?: string } {
    if (!this.canBeActivated()) {
      return { canActivate: false, reason: '–ß–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏' };
    }

    if (this.creatorId === userId) {
      return { canActivate: false, reason: '–ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ–∫' };
    }

    if (this.isPersonal() && this.targetUserId && this.targetUserId !== userId) {
      return { canActivate: false, reason: '–ß–µ–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
    }

    return { canActivate: true };
  }

  async activate(userId: number): Promise<void> {
    this.currentActivations = (this.currentActivations || 0) + 1;
    
    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫
    if (this.currentActivations >= this.maxActivations) {
      this.isActive = false;
    }
    
    await this.save();
  }

  async deactivate(): Promise<void> {
    this.isActive = false;
    await this.save();
  }

  getStatusIcon(): string {
    if (!this.isActive) return '‚ùå';
    if (this.expiresAt && this.expiresAt <= new Date()) return '‚è∞';
    if ((this.currentActivations || 0) >= this.maxActivations) return '‚úÖ';
    return 'üí≥';
  }

  getStatusText(): string {
    if (!this.isActive) return '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
    if (this.expiresAt && this.expiresAt <= new Date()) return '–ò—Å—Ç–µ–∫';
    if ((this.currentActivations || 0) >= this.maxActivations) return '–ò—Å—á–µ—Ä–ø–∞–Ω';
    return '–ê–∫—Ç–∏–≤–µ–Ω';
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  static generateCode(): string {
    return crypto.randomBytes(16).toString('hex').toUpperCase();
  }
}

// –ú–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–æ–≤
export interface CheckActivationAttributes extends Model<InferAttributes<CheckActivation>, InferCreationAttributes<CheckActivation>> {
  id: CreationOptional<number>;
  checkId: ForeignKey<Check['id']>;
  userId: ForeignKey<User['id']>;
  amount: number;
  activatedAt: CreationOptional<Date>;
  
  // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
  check?: NonAttribute<Check>;
  user?: NonAttribute<User>;
}

export class CheckActivation extends Model<InferAttributes<CheckActivation>, InferCreationAttributes<CheckActivation>> implements CheckActivationAttributes {
  declare id: CreationOptional<number>;
  declare checkId: ForeignKey<Check['id']>;
  declare userId: ForeignKey<User['id']>;
  declare amount: number;
  declare activatedAt: CreationOptional<Date>;
  
  // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
  declare check?: NonAttribute<Check>;
  declare user?: NonAttribute<User>;
  
  declare static associations: {
    check: Association<CheckActivation, Check>;
    user: Association<CheckActivation, User>;
  };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Check
Check.init({
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  creatorId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'users',
      key: 'id'
    }
  },
  code: {
    type: DataTypes.STRING(32),
    allowNull: false,
    unique: true
  },
  type: {
    type: DataTypes.STRING(20),
    allowNull: false,
    defaultValue: 'multi',
    validate: {
      isIn: [['personal', 'multi']]
    }
  },
  totalAmount: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 1
    }
  },
  amountPerActivation: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 1
    }
  },
  maxActivations: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 1,
      max: 1000
    }
  },
  currentActivations: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0,
    validate: {
      min: 0
    }
  },
  password: {
    type: DataTypes.STRING(255),
    allowNull: true
  },
  requiredSubscription: {
    type: DataTypes.STRING(255),
    allowNull: true
  },
  targetUserId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: {
      model: 'users',
      key: 'id'
    }
  },
  comment: {
    type: DataTypes.TEXT,
    allowNull: true,
    validate: {
      len: [0, 500]
    }
  },
  imageUrl: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  expiresAt: {
    type: DataTypes.DATE,
    allowNull: true
  },
  createdAt: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  updatedAt: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  }
}, {
  sequelize,
  tableName: 'checks',
  timestamps: true,
  underscored: true,
  indexes: [
    {
      unique: true,
      fields: ['code']
    },
    {
      fields: ['creator_id']
    },
    {
      fields: ['target_user_id']
    },
    {
      fields: ['type']
    },
    {
      fields: ['is_active']
    },
    {
      fields: ['expires_at']
    },
    {
      fields: ['created_at']
    }
  ],
  hooks: {
    beforeCreate: (check: Check) => {
      if (!check.code) {
        check.code = Check.generateCode();
      }
    }
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ CheckActivation
CheckActivation.init({
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  checkId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'checks',
      key: 'id'
    }
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'users',
      key: 'id'
    }
  },
  amount: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 1
    }
  },
  activatedAt: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  }
}, {
  sequelize,
  tableName: 'check_activations',
  timestamps: false,
  underscored: true,
  indexes: [
    {
      unique: true,
      fields: ['check_id', 'user_id']
    },
    {
      fields: ['check_id']
    },
    {
      fields: ['user_id']
    },
    {
      fields: ['activated_at']
    }
  ]
});

// –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
Check.belongsTo(User, {
  as: 'creator',
  foreignKey: 'creatorId'
});

Check.belongsTo(User, {
  as: 'targetUser',
  foreignKey: 'targetUserId'
});

Check.hasMany(CheckActivation, {
  as: 'activations',
  foreignKey: 'checkId'
});

CheckActivation.belongsTo(Check, {
  as: 'check',
  foreignKey: 'checkId'
});

CheckActivation.belongsTo(User, {
  as: 'user',
  foreignKey: 'userId'
});

User.hasMany(Check, {
  as: 'createdChecks',
  foreignKey: 'creatorId'
});

User.hasMany(Check, {
  as: 'personalChecks',
  foreignKey: 'targetUserId'
});

User.hasMany(CheckActivation, {
  as: 'checkActivations',
  foreignKey: 'userId'
});

// export { Check, CheckActivation };