// src/models/index.ts
import { sequelize } from '../config/database';

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
import { User } from './User';
import { Task } from './Task';
import { TaskExecution } from './TaskExecution';
import { Transaction } from './Transaction';
import { Check, CheckActivation } from './Check';
import { Notification } from './Notification';

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
export {
  User,
  Task,
  TaskExecution,
  Transaction,
  Check,
  CheckActivation,
  Notification
};

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ sequelize
export { sequelize };

// –û–±—ä–µ–∫—Ç —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
export const models = {
  User,
  Task,
  TaskExecution,
  Transaction,
  Check,
  CheckActivation,
  Notification
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
export function initializeAssociations() {
  // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  console.log('‚úÖ All model associations initialized');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–î
export async function syncDatabase(options: { force?: boolean; alter?: boolean } = {}) {
  try {
    await sequelize.sync(options);
    console.log('‚úÖ Database synchronized successfully');
  } catch (error) {
    console.error('‚ùå Database synchronization failed:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
export async function createIndexes() {
  try {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    await sequelize.query(`
      CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_level_balance 
      ON users(level, balance);
    `);
    
    await sequelize.query(`
      CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_tasks_type_status_created 
      ON tasks(type, status, created_at);
    `);
    
    await sequelize.query(`
      CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_task_executions_status_created 
      ON task_executions(status, created_at);
    `);
    
    await sequelize.query(`
      CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_transactions_user_type_created 
      ON transactions(user_id, type, created_at);
    `);
    
    console.log('‚úÖ Additional indexes created successfully');
  } catch (error) {
    console.warn('‚ö†Ô∏è Some indexes might already exist:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PostgreSQL
export async function createExtensions() {
  try {
    // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    await sequelize.query('CREATE EXTENSION IF NOT EXISTS pg_trgm;');
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è UUID
    await sequelize.query('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";');
    
    console.log('‚úÖ PostgreSQL extensions created successfully');
  } catch (error) {
    console.warn('‚ö†Ô∏è Some extensions might already exist:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
export async function setupDatabase(options: { 
  sync?: boolean; 
  force?: boolean; 
  alter?: boolean;
  createExtensions?: boolean;
  createIndexes?: boolean;
} = {}) {
  const {
    sync = true,
    force = false,
    alter = false,
    createExtensions: shouldCreateExtensions = true,
    createIndexes: shouldCreateIndexes = true
  } = options;

  try {
    console.log('üîÑ Setting up database...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await sequelize.authenticate();
    console.log('‚úÖ Database connection established');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    if (shouldCreateExtensions) {
      await createExtensions();
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    if (sync) {
      await syncDatabase({ force, alter });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
    initializeAssociations();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
    if (shouldCreateIndexes) {
      await createIndexes();
    }
    
    console.log('‚úÖ Database setup completed successfully');
    
  } catch (error) {
    console.error('‚ùå Database setup failed:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export async function cleanupOldData() {
  try {
    const now = new Date();
    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
    const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const deletedNotifications = await Notification.destroy({
      where: {
        createdAt: {
          [sequelize.Sequelize.Op.lt]: thirtyDaysAgo
        },
        isRead: true
      }
    });
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —á–µ–∫–æ–≤
    const deletedChecks = await Check.destroy({
      where: {
        expiresAt: {
          [sequelize.Sequelize.Op.lt]: now
        },
        isActive: false
      }
    });
    
    // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    const expiredTasks = await Task.update(
      { status: 'expired' },
      {
        where: {
          expiresAt: {
            [sequelize.Sequelize.Op.lt]: now
          },
          status: 'active'
        }
      }
    );
    
    console.log(`‚úÖ Cleanup completed:
      - Deleted ${deletedNotifications} old notifications
      - Deleted ${deletedChecks} expired checks  
      - Expired ${expiredTasks[0]} tasks`);
      
    return {
      deletedNotifications,
      deletedChecks,
      expiredTasks: expiredTasks[0]
    };
    
  } catch (error) {
    console.error('‚ùå Cleanup failed:', error);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default {
  models,
  sequelize,
  setupDatabase,
  syncDatabase,
  initializeAssociations,
  createIndexes,
  createExtensions,
  cleanupOldData
};