// src/models/Transaction.ts
import { 
  Model, 
  DataTypes, 
  CreationOptional, 
  InferAttributes, 
  InferCreationAttributes,
  ForeignKey,
  NonAttribute,
  Association
} from 'sequelize';
import { sequelize } from '../config/database';
import { User } from './User';
import { Task } from './Task';
import { TRANSACTION_TYPES } from '../../utils/constants';

export interface TransactionAttributes extends Model<InferAttributes<Transaction>, InferCreationAttributes<Transaction>> {
  id: CreationOptional<number>;
  userId: ForeignKey<User['id']>;
  
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  type: string;
  amount: number;
  balanceBefore: number;
  balanceAfter: number;
  
  // –°–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  relatedTaskId?: ForeignKey<Task['id']>;
  relatedUserId?: ForeignKey<User['id']>; // –î–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
  relatedCheckId?: number;
  
  // –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  description?: string;
  metadata?: object;
  
  // –í–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π)
  externalId?: string;
  paymentProvider?: string;
  
  // –°—Ç–∞—Ç—É—Å
  status: CreationOptional<string>;
  processedAt?: Date;
  failedReason?: string;
  
  // –î–∞—Ç—ã
  createdAt: CreationOptional<Date>;
  updatedAt: CreationOptional<Date>;
  
  // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
  user?: NonAttribute<User>;
  relatedTask?: NonAttribute<Task>;
  relatedUser?: NonAttribute<User>;
}

export class Transaction extends Model<InferAttributes<Transaction>, InferCreationAttributes<Transaction>> implements TransactionAttributes {
  declare id: CreationOptional<number>;
  declare userId: ForeignKey<User['id']>;
  
  declare type: string;
  declare amount: number;
  declare balanceBefore: number;
  declare balanceAfter: number;
  
  declare relatedTaskId?: ForeignKey<Task['id']>;
  declare relatedUserId?: ForeignKey<User['id']>;
  declare relatedCheckId?: number;
  
  declare description?: string;
  declare metadata?: object;
  
  declare externalId?: string;
  declare paymentProvider?: string;
  
  declare status: CreationOptional<string>;
  declare processedAt?: Date;
  declare failedReason?: string;
  
  declare createdAt: CreationOptional<Date>;
  declare updatedAt: CreationOptional<Date>;
  
  // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
  declare user?: NonAttribute<User>;
  declare relatedTask?: NonAttribute<Task>;
  declare relatedUser?: NonAttribute<User>;
  
  declare static associations: {
    user: Association<Transaction, User>;
    relatedTask: Association<Transaction, Task>;
    relatedUser: Association<Transaction, User>;
  };

  // –ú–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  isDeposit(): boolean {
    return [TRANSACTION_TYPES.DEPOSIT, TRANSACTION_TYPES.TASK_REWARD, TRANSACTION_TYPES.REFERRAL_BONUS, TRANSACTION_TYPES.REFUND, TRANSACTION_TYPES.CHECK_RECEIVED].includes(this.type as any);
  }

  isWithdrawal(): boolean {
    return [TRANSACTION_TYPES.WITHDRAW, TRANSACTION_TYPES.TASK_PAYMENT, TRANSACTION_TYPES.COMMISSION, TRANSACTION_TYPES.CHECK_SENT].includes(this.type as any);
  }

  getTypeIcon(): string {
    switch (this.type) {
      case TRANSACTION_TYPES.DEPOSIT: return 'üí≥';
      case TRANSACTION_TYPES.WITHDRAW: return 'üí∏';
      case TRANSACTION_TYPES.TASK_REWARD: return 'üéØ';
      case TRANSACTION_TYPES.TASK_PAYMENT: return 'üì¢';
      case TRANSACTION_TYPES.REFERRAL_BONUS: return 'ü§ù';
      case TRANSACTION_TYPES.COMMISSION: return 'üè¶';
      case TRANSACTION_TYPES.REFUND: return '‚Ü©Ô∏è';
      case TRANSACTION_TYPES.CHECK_SENT: return 'üì§';
      case TRANSACTION_TYPES.CHECK_RECEIVED: return 'üì•';
      default: return 'üí∞';
    }
  }

  getTypeText(): string {
    switch (this.type) {
      case TRANSACTION_TYPES.DEPOSIT: return '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ';
      case TRANSACTION_TYPES.WITHDRAW: return '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤';
      case TRANSACTION_TYPES.TASK_REWARD: return '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ';
      case TRANSACTION_TYPES.TASK_PAYMENT: return '–û–ø–ª–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è';
      case TRANSACTION_TYPES.REFERRAL_BONUS: return '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å';
      case TRANSACTION_TYPES.COMMISSION: return '–ö–æ–º–∏—Å—Å–∏—è';
      case TRANSACTION_TYPES.REFUND: return '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤';
      case TRANSACTION_TYPES.CHECK_SENT: return '–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞';
      case TRANSACTION_TYPES.CHECK_RECEIVED: return '–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è';
    }
  }

  getAmountWithSign(): string {
    const sign = this.isDeposit() ? '+' : '-';
    return `${sign}${this.amount}`;
  }

  isPending(): boolean {
    return this.status === 'pending';
  }

  isCompleted(): boolean {
    return this.status === 'completed';
  }

  isFailed(): boolean {
    return this.status === 'failed';
  }

  async markAsCompleted(): Promise<void> {
    this.status = 'completed';
    this.processedAt = new Date();
    await this.save();
  }

  async markAsFailed(reason: string): Promise<void> {
    this.status = 'failed';
    this.failedReason = reason;
    this.processedAt = new Date();
    await this.save();
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  static async createDeposit(userId: number, amount: number, balanceBefore: number, externalId?: string, paymentProvider?: string): Promise<Transaction> {
    return await Transaction.create({
      userId,
      type: TRANSACTION_TYPES.DEPOSIT,
      amount,
      balanceBefore,
      balanceAfter: balanceBefore + amount,
      description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount} GRAM`,
      externalId,
      paymentProvider,
      status: 'completed',
      processedAt: new Date()
    });
  }

  static async createTaskReward(userId: number, taskId: number, amount: number, balanceBefore: number): Promise<Transaction> {
    return await Transaction.create({
      userId,
      type: TRANSACTION_TYPES.TASK_REWARD,
      amount,
      balanceBefore,
      balanceAfter: balanceBefore + amount,
      relatedTaskId: taskId,
      description: `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è #${taskId}`,
      status: 'completed',
      processedAt: new Date()
    });
  }

  static async createTaskPayment(userId: number, taskId: number, amount: number, balanceBefore: number): Promise<Transaction> {
    return await Transaction.create({
      userId,
      type: TRANSACTION_TYPES.TASK_PAYMENT,
      amount,
      balanceBefore,
      balanceAfter: balanceBefore - amount,
      relatedTaskId: taskId,
      description: `–û–ø–ª–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è #${taskId}`,
      status: 'completed',
      processedAt: new Date()
    });
  }

  static async createReferralBonus(userId: number, referralUserId: number, amount: number, balanceBefore: number): Promise<Transaction> {
    return await Transaction.create({
      userId,
      type: TRANSACTION_TYPES.REFERRAL_BONUS,
      amount,
      balanceBefore,
      balanceAfter: balanceBefore + amount,
      relatedUserId: referralUserId,
      description: `–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
      status: 'completed',
      processedAt: new Date()
    });
  }

  static async createCommission(userId: number, amount: number, balanceBefore: number, taskId?: number): Promise<Transaction> {
    return await Transaction.create({
      userId,
      type: TRANSACTION_TYPES.COMMISSION,
      amount,
      balanceBefore,
      balanceAfter: balanceBefore - amount,
      relatedTaskId: taskId,
      description: `–ö–æ–º–∏—Å—Å–∏—è —Å–∏—Å—Ç–µ–º—ã`,
      status: 'completed',
      processedAt: new Date()
    });
  }

  static async createCheckTransaction(userId: number, amount: number, balanceBefore: number, checkId: number, isSent: boolean): Promise<Transaction> {
    const type = isSent ? TRANSACTION_TYPES.CHECK_SENT : TRANSACTION_TYPES.CHECK_RECEIVED;
    const description = isSent ? `–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ #${checkId}` : `–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞ #${checkId}`;
    const balanceAfter = isSent ? balanceBefore - amount : balanceBefore + amount;

    return await Transaction.create({
      userId,
      type,
      amount,
      balanceBefore,
      balanceAfter,
      relatedCheckId: checkId,
      description,
      status: 'completed',
      processedAt: new Date()
    });
  }

  static async createRefund(userId: number, amount: number, balanceBefore: number, reason: string, taskId?: number): Promise<Transaction> {
    return await Transaction.create({
      userId,
      type: TRANSACTION_TYPES.REFUND,
      amount,
      balanceBefore,
      balanceAfter: balanceBefore + amount,
      relatedTaskId: taskId,
      description: `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: ${reason}`,
      status: 'completed',
      processedAt: new Date()
    });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
Transaction.init({
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'users',
      key: 'id'
    }
  },
  type: {
    type: DataTypes.STRING(50),
    allowNull: false,
    validate: {
      isIn: [Object.values(TRANSACTION_TYPES)]
    }
  },
  amount: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 1
    }
  },
  balanceBefore: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 0
    }
  },
  balanceAfter: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 0
    }
  },
  relatedTaskId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: {
      model: 'tasks',
      key: 'id'
    }
  },
  relatedUserId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: {
      model: 'users',
      key: 'id'
    }
  },
  relatedCheckId: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  metadata: {
    type: DataTypes.JSONB,
    allowNull: true
  },
  externalId: {
    type: DataTypes.STRING(255),
    allowNull: true
  },
  paymentProvider: {
    type: DataTypes.STRING(50),
    allowNull: true
  },
  status: {
    type: DataTypes.STRING(20),
    allowNull: false,
    defaultValue: 'pending',
    validate: {
      isIn: [['pending', 'completed', 'failed', 'cancelled']]
    }
  },
  processedAt: {
    type: DataTypes.DATE,
    allowNull: true
  },
  failedReason: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  createdAt: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  updatedAt: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  }
}, {
  sequelize,
  tableName: 'transactions',
  timestamps: true,
  underscored: true,
  indexes: [
    {
      fields: ['user_id']
    },
    {
      fields: ['type']
    },
    {
      fields: ['status']
    },
    {
      fields: ['related_task_id']
    },
    {
      fields: ['related_user_id']
    },
    {
      fields: ['external_id']
    },
    {
      fields: ['created_at']
    },
    {
      fields: ['processed_at']
    }
  ]
});

// –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
Transaction.belongsTo(User, {
  as: 'user',
  foreignKey: 'userId'
});

Transaction.belongsTo(Task, {
  as: 'relatedTask',
  foreignKey: 'relatedTaskId'
});

Transaction.belongsTo(User, {
  as: 'relatedUser',
  foreignKey: 'relatedUserId'
});

User.hasMany(Transaction, {
  as: 'transactions',
  foreignKey: 'userId'
});

Task.hasMany(Transaction, {
  as: 'transactions',
  foreignKey: 'relatedTaskId'
});

// export { Transaction };