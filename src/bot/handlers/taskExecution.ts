// src/bot/handlers/taskExecution.ts
import { Bot, Context } from 'grammy';
import { requireAuth } from '../middlewares/auth';
import { logger } from '../../utils/logger';
import { EMOJIS, TASK_TYPES, EXECUTION_STATUSES } from '../../utils/constants';
import { getConfirmKeyboard, getBackKeyboard } from '../keyboards/main';
import { formatTimeRemaining } from '../../utils/helpers/init';
import { Task, TaskExecution, User } from '../../database/models';
import { QueueManager } from '../../jobs/queues';

export function setupTaskExecutionHandlers(bot: Bot) {

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏
  bot.callbackQuery(/^task_(\d+)$/, requireAuth, async (ctx) => {
    try {
      const taskId = parseInt(ctx.match![1]);
      const user = ctx.session!.user!;

      const task = await Task.findByPk(taskId, {
        include: [{ model: User, as: 'author', attributes: ['username', 'firstName'] }]
      });

      if (!task) {
        await ctx.answerCallbackQuery('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
      const canExecute = task.canUserExecute(user);
      if (!canExecute.canExecute) {
        await ctx.answerCallbackQuery(`‚ùå ${canExecute.reason}`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
      const existingExecution = await TaskExecution.findOne({
        where: { taskId, userId: user.id }
      });

      if (existingExecution) {
        if (existingExecution.isCompleted()) {
          await ctx.answerCallbackQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
          return;
        } else {
          await ctx.answerCallbackQuery('‚è≥ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ');
          return;
        }
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      await task.incrementViews();

      let message = `${task.getTypeIcon()} **–ó–ê–î–ê–ù–ò–ï: ${task.title}**\n\n`;
      
      if (task.description) {
        message += `üìã **–û–ø–∏—Å–∞–Ω–∏–µ:**\n${task.description}\n\n`;
      }

      message += `üí∞ **–ù–∞–≥—Ä–∞–¥–∞:** ${task.reward} GRAM\n`;
      message += `‚è±Ô∏è **–û—Å—Ç–∞–ª–æ—Å—å:** ${formatTimeRemaining(task.expiresAt)}\n`;
      message += `üë• **–í—ã–ø–æ–ª–Ω–∏–ª–∏:** ${task.completedExecutions || 0}/${task.totalExecutions}\n\n`;

      // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
      if (task.type === TASK_TYPES.SUBSCRIBE_CHANNEL) {
        message += `üí° **–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**\n`;
        message += `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"\n`;
        message += `2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n`;
        message += `3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"\n\n`;
        message += `‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!`;
      } else if (task.type === TASK_TYPES.JOIN_GROUP) {
        message += `üí° **–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**\n`;
        message += `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—Å—Ç—É–ø–∏—Ç—å"\n`;
        message += `2. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É\n`;
        message += `3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"\n\n`;
        message += `‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ù–µ –ø–æ–∫–∏–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!`;
      } else if (task.type === TASK_TYPES.VIEW_POST) {
        message += `üí° **–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**\n`;
        message += `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"\n`;
        message += `2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å—Ç\n`;
        message += `3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"`;
      } else if (task.type === TASK_TYPES.BOT_INTERACTION) {
        message += `üí° **–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**\n`;
        message += `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É"\n`;
        message += `2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞–Ω–∏—è\n`;
        message += `3. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n`;
        message += `4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n`;
        message += `‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –≤—Ä—É—á–Ω—É—é!`;
      } else if (task.type === TASK_TYPES.REACT_POST) {
        message += `üí° **–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**\n`;
        message += `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é"\n`;
        message += `2. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª—é–±—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç\n`;
        message += `3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"`;
      }

      const keyboard = getBackKeyboard('earn')
        .row()
        .url(`üîó ${getActionButtonText(task.type)}`, task.targetUrl);

      if (task.type === TASK_TYPES.BOT_INTERACTION) {
        keyboard.row().text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', `task_upload_${taskId}`);
      } else {
        keyboard.row().text('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', `task_check_${taskId}`);
      }

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Task view error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  bot.callbackQuery(/^task_check_(\d+)$/, requireAuth, async (ctx) => {
    try {
      const taskId = parseInt(ctx.match![1]);
      const user = ctx.session!.user!;

      const task = await Task.findByPk(taskId);
      if (!task || !task.isActive()) {
        await ctx.answerCallbackQuery('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
      const existingExecution = await TaskExecution.findOne({
        where: { taskId, userId: user.id }
      });

      if (existingExecution) {
        await ctx.answerCallbackQuery('–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ');
        return;
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
      await task.incrementClicks();

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
      const execution = await TaskExecution.create({
        taskId,
        userId: user.id,
        rewardAmount: Math.floor(task.reward * user.getEarnMultiplier()),
        status: EXECUTION_STATUSES.PENDING
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É
      await QueueManager.addTaskCheck({
        taskExecutionId: execution.id,
        userId: user.id,
        taskId,
        checkType: getCheckTypeFromTaskType(task.type),
        targetUrl: task.targetUrl
      }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞

      let message = `‚è≥ **–ó–ê–î–ê–ù–ò–ï –ù–ê –ü–†–û–í–ï–†–ö–ï**\n\n`;
      message += `${task.getTypeIcon()} ${task.title}\n`;
      message += `üí∞ ${execution.rewardAmount} GRAM\n\n`;
      message += `üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...\n`;
      message += `‚è∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n\n`;
      message += `üì± –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è`;

      const keyboard = getBackKeyboard('earn');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery('‚è≥ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');

      logger.userAction(user.telegramId, 'task_submitted', { taskId, executionId: execution.id });
    } catch (error) {
      logger.error('Task check error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ');
    }
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å –±–æ—Ç–æ–º
  bot.callbackQuery(/^task_upload_(\d+)$/, requireAuth, async (ctx) => {
    try {
      const taskId = parseInt(ctx.match![1]);
      const user = ctx.session!.user!;

      const task = await Task.findByPk(taskId);
      if (!task || !task.isActive()) {
        await ctx.answerCallbackQuery('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
      const existingExecution = await TaskExecution.findOne({
        where: { taskId, userId: user.id }
      });

      if (existingExecution) {
        await ctx.answerCallbackQuery('–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ');
        return;
      }

      let message = `üì§ **–ó–ê–ì–†–£–ó–ö–ê –°–ö–†–ò–ù–®–û–¢–ê**\n\n`;
      message += `${task.getTypeIcon()} ${task.title}\n`;
      message += `üí∞ ${Math.floor(task.reward * user.getEarnMultiplier())} GRAM\n\n`;
      message += `üì∑ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n`;
      message += `üí¨ –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å **–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π** –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è.\n\n`;
      message += `‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è!`;

      const keyboard = getBackKeyboard(`task_${taskId}`);

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
      user.currentState = `awaiting_screenshot_${taskId}`;
      await user.save();

    } catch (error) {
      logger.error('Task upload handler error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
  bot.on('message:photo', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      if (!user.currentState?.startsWith('awaiting_screenshot_')) {
        return; // –ù–µ –æ–∂–∏–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
      }

      const taskId = parseInt(user.currentState.replace('awaiting_screenshot_', ''));
      
      const task = await Task.findByPk(taskId, {
        include: [{ model: User, as: 'author' }]
      });

      if (!task || !task.isActive()) {
        await ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º URL —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
      const photo = ctx.message.photo[ctx.message.photo.length - 1]; // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      const file = await ctx.api.getFile(photo.file_id);
      const screenshotUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
      await task.incrementClicks();

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
      const execution = await TaskExecution.create({
        taskId,
        userId: user.id,
        rewardAmount: Math.floor(task.reward * user.getEarnMultiplier()),
        status: EXECUTION_STATUSES.IN_REVIEW,
        screenshotUrl,
        comment: ctx.message.caption || undefined
      });

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user.currentState = null;
      await user.save();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –∑–∞–¥–∞–Ω–∏—è
      if (task.author) {
        try {
          await ctx.api.sendPhoto(task.author.telegramId, photo.file_id, {
            caption: `üìã **–ù–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è**\n\n` +
                    `${task.getTypeIcon()} ${task.title}\n` +
                    `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${user.getDisplayName()}\n` +
                    `üí∞ –ö –≤—ã–ø–ª–∞—Ç–µ: ${execution.rewardAmount} GRAM\n` +
                    `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
                    `${ctx.message.caption ? `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n${ctx.message.caption}\n\n` : ''}` +
                    `–£ –≤–∞—Å –µ—Å—Ç—å 24 —á–∞—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç–µ - –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
            reply_markup: {
              inline_keyboard: [[
                { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `approve_${execution.id}` },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${execution.id}` }
              ], [
                { text: 'üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `execution_${execution.id}` }
              ]]
            },
            parse_mode: 'Markdown'
          });
        } catch (notifyError) {
          logger.warn('Failed to notify task author:', notifyError);
        }
      }

      let message = `üì§ **–°–ö–†–ò–ù–®–û–¢ –û–¢–ü–†–ê–í–õ–ï–ù**\n\n`;
      message += `‚úÖ –ó–∞–¥–∞–Ω–∏–µ #${execution.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n\n`;
      message += `‚è∞ **–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:**\n`;
      message += `‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n`;
      message += `‚îú –ê–≤—Ç–æ—Ä: ${task.author?.getDisplayName() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
      message += `‚îî –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞\n\n`;
      message += `üí° –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤,\n`;
      message += `–æ–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å—á–∏—Ç–∞–Ω–æ –∏ –æ–ø–ª–∞—á–µ–Ω–æ.\n\n`;
      message += `üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.`;

      const keyboard = getBackKeyboard('earn')
        .row()
        .text('üí∞ –î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è', 'earn');

      await ctx.reply(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      logger.userAction(user.telegramId, 'screenshot_uploaded', { 
        taskId, 
        executionId: execution.id,
        hasComment: !!ctx.message.caption 
      });

    } catch (error) {
      logger.error('Screenshot upload error:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
  bot.on('message:text', requireAuth, async (ctx, next) => {
    try {
      const user = ctx.session!.user!;
      
      if (user.currentState?.startsWith('awaiting_screenshot_')) {
        await ctx.reply(`üì∑ **–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ.`);
        return;
      }
      
      await next();
    } catch (error) {
      logger.error('Text message handler error:', error);
      await next();
    }
  });

  logger.info('‚úÖ Task execution handlers configured');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getActionButtonText(taskType: string): string {
  switch (taskType) {
    case TASK_TYPES.SUBSCRIBE_CHANNEL: return '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª';
    case TASK_TYPES.JOIN_GROUP: return '–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É';
    case TASK_TYPES.VIEW_POST: return '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç';
    case TASK_TYPES.BOT_INTERACTION: return '–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É';
    case TASK_TYPES.REACT_POST: return '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é';
    default: return '–ü–µ—Ä–µ–π—Ç–∏';
  }
}

function getCheckTypeFromTaskType(taskType: string): 'subscription' | 'membership' | 'reaction' | 'view' {
  switch (taskType) {
    case TASK_TYPES.SUBSCRIBE_CHANNEL: return 'subscription';
    case TASK_TYPES.JOIN_GROUP: return 'membership';
    case TASK_TYPES.REACT_POST: return 'reaction';
    case TASK_TYPES.VIEW_POST: return 'view';
    default: return 'view';
  }
}