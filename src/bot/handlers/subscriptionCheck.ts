// src/bot/handlers/subscriptionCheck.ts
import { Bot, Context } from 'grammy';
import { requireAuth } from '../middlewares/auth';
import { logger } from '../../utils/logger';
import { EMOJIS } from '../../utils/constants';
import { getSubscriptionMainKeyboard, getBackKeyboard } from '../keyboards/main';
import { SubscriptionCheck } from '../../database/models/SubscriptionCheck';
import { User } from '../../database/models';

export function setupSubscriptionCheckHandlers(bot: Bot) {

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã –û–ü
  bot.callbackQuery('subscription', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      logger.userAction(user.telegramId, 'subscription_opened');

      const myChecksCount = await SubscriptionCheck.count({
        where: { creatorId: user.id }
      });

      let message = `${EMOJIS.subscription} **–ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò**\n\n`;
      message += `–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã\n`;
      message += `–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n`;
      message += `üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${myChecksCount}\n`;
      message += `‚îî –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${myChecksCount}\n\n`;
      message += `üìã **–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**\n`;
      message += `‚ñ∏ **–®–∞–≥ 1:** –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
      message += `‚ñ∏ **–®–∞–≥ 2:** –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω—ã –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É\n`;
      message += `‚ñ∏ **–®–∞–≥ 3:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup`;

      await ctx.editMessageText(message, {
        reply_markup: getSubscriptionMainKeyboard(),
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Subscription handler error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ü—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã
  bot.callbackQuery('subscription_public', requireAuth, async (ctx) => {
    try {
      let message = `üèõÔ∏è **–ü–£–ë–õ–ò–ß–ù–´–ï –ö–ê–ù–ê–õ–´/–ß–ê–¢–´**\n\n`;
      message += `–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏.\n\n`;
      message += `üìù **–ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–ê–®–ï–ì–û –ß–ê–¢–ê:**\n\n`;
      message += `**‚îå‚îÄ‚îÄ –û–°–ù–û–í–ù–´–ï ‚îÄ‚îÄ‚îê**\n`;
      message += `\`/setup @channel\` - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n`;
      message += `\`/unsetup @channel\` - —É–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É\n`;
      message += `\`/unsetup\` - —É–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏\n`;
      message += `\`/status\` - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n`;
      message += `**‚îå‚îÄ‚îÄ –° –¢–ê–ô–ú–ï–†–û–ú ‚îÄ‚îÄ‚îê**\n`;
      message += `\`/setup @channel 1d\` - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 1 –¥–µ–Ω—å\n`;
      message += `\`/setup @channel 5h\` - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 5 —á–∞—Å–æ–≤\n`;
      message += `\`/setup @channel 30m\` - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç\n\n`;
      message += `üïí **–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:**\n`;
      message += `s - —Å–µ–∫—É–Ω–¥—ã | m - –º–∏–Ω—É—Ç—ã | h - —á–∞—Å—ã | d - –¥–Ω–∏\n\n`;
      message += `üìù **–ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:**\n`;
      message += `1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @${ctx.me.username} –≤ –≤–∞—à —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∞\n`;
      message += `2. –ù–∞–ø–∏—à–∏—Ç–µ: \`/setup @your_channel\`\n`;
      message += `3. –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n\n`;
      message += `‚ö†Ô∏è **–õ–∏–º–∏—Ç:** 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫`;

      const keyboard = getBackKeyboard('subscription');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Subscription public error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ PR GRAM
  bot.callbackQuery('subscription_referral_prgram', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      let message = `üéØ **–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê PR GRAM**\n\n`;
      message += `–î–æ–±–∞–≤—å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É PR GRAM!\n\n`;
      message += `üí∞ **–í–´ –ë–£–î–ï–¢–ï –ü–û–õ–£–ß–ê–¢–¨:**\n`;
      message += `‚Ä¢ **3,000 GRAM** ‚Äì –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n`;
      message += `‚Ä¢ **+10%** ‚Äì –æ—Ç —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
      message += `‚Ä¢ **+10%** ‚Äì –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –≤–∞—à–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏\n\n`;
      message += `üìù **–ù–ê–°–¢–†–û–ô–ö–ê:**\n`;
      message += `‚ñ∏ **–®–∞–≥ 1:** –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞\n`;
      message += `‚ñ∏ **–®–∞–≥ 2:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \`/setup_bot\` —Å –≤–∞—à–∏–º ID\n\n`;
      message += `**‚îå‚îÄ‚îÄ –ö–û–ú–ê–ù–î–´ ‚îÄ‚îÄ‚îê**\n`;
      message += `\`/setup_bot ${user.telegramId}\` - –≤–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –û–ü\n`;
      message += `\`/setup_bot ${user.telegramId} 1d\` - —Å —Ç–∞–π–º–µ—Ä–æ–º –Ω–∞ 1 –¥–µ–Ω—å\n`;
      message += `\`/unsetup_bot\` - –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –û–ü\n\n`;
      message += `üìä **–í–ê–® ID:** \`${user.telegramId}\`\n`;
      message += `üîó **–í–∞—à–∞ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞:** \`t.me/${ctx.me.username}?start=${user.telegramId}\`\n\n`;
      message += `üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ–π ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ!`;

      const keyboard = getBackKeyboard('subscription')
        .row()
        .text('üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID', `copy_user_id_${user.telegramId}`)
        .text('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', 'referrals_link');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Subscription referral error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.callbackQuery('subscription_autodelete', requireAuth, async (ctx) => {
    try {
      let message = `‚åõ **–ê–í–¢–û–£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô**\n\n`;
      message += `–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏.\n\n`;
      message += `‚öôÔ∏è **–ö–û–ú–ê–ù–î–´ –ù–ê–°–¢–†–û–ô–ö–ò:**\n`;
      message += `\`/autodelete 30s\` - —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥\n`;
      message += `\`/autodelete 2m\` - —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã\n`;
      message += `\`/autodelete 5m\` - —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n\n`;
      message += `üõë **–û–¢–ö–õ–Æ–ß–ï–ù–ò–ï:**\n`;
      message += `\`/autodelete off\` - –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ\n\n`;
      message += `üìä **–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê:**\n`;
      message += `\`/get_autodelete\` - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n`;
      message += `üìã **–î–û–°–¢–£–ü–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–´:**\n`;
      message += `‚îú –ú–∏–Ω–∏–º—É–º: 15 —Å–µ–∫—É–Ω–¥\n`;
      message += `‚îú –ú–∞–∫—Å–∏–º—É–º: 5 –º–∏–Ω—É—Ç\n`;
      message += `‚îî –§–æ—Ä–º–∞—Ç—ã: s (—Å–µ–∫), m (–º–∏–Ω)\n\n`;
      message += `üí° **–ü–†–ò–ú–ï–ß–ê–ù–ò–ï:**\n`;
      message += `–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º –≤ –≤–∞—à–µ–º —á–∞—Ç–µ.\n\n`;
      message += `‚ö†Ô∏è –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.`;

      const keyboard = getBackKeyboard('subscription');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Subscription autodelete error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.callbackQuery(/^copy_user_id_(\d+)$/, requireAuth, async (ctx) => {
    try {
      const userId = ctx.match![1];
      await ctx.answerCallbackQuery(`üìã ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${userId}`, { show_alert: true });
    } catch (error) {
      logger.error('Copy user ID error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  logger.info('‚úÖ Subscription check handlers configured');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —á–∞—Ç–æ–≤
export function setupSubscriptionCommands(bot: Bot) {
  
  // –ö–æ–º–∞–Ω–¥–∞ /setup @channel [–≤—Ä–µ–º—è]
  bot.command('setup', async (ctx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
      if (ctx.chat?.type !== 'group' && ctx.chat?.type !== 'supergroup') {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
      const botMember = await ctx.api.getChatMember(ctx.chat.id, ctx.me.id);
      if (botMember.status !== 'administrator') {
        await ctx.reply('‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMember = await ctx.api.getChatMember(ctx.chat.id, ctx.from.id);
      if (!['creator', 'administrator'].includes(userMember.status)) {
        await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏.');
        return;
      }

      const args = ctx.message?.text?.split(' ').slice(1) || [];
      
      if (args.length === 0) {
        await ctx.reply(`üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n\`/setup @channel\` - –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n\`/setup @channel 1d\` - —Å —Ç–∞–π–º–µ—Ä–æ–º`, { parse_mode: 'Markdown' });
        return;
      }

      const targetChannel = args[0];
      const timeStr = args[1];

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
      if (!targetChannel.startsWith('@')) {
        await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channel_name');
        return;
      }

      // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
      let timerDuration: number | undefined;
      if (timeStr) {
        timerDuration = parseTimeString(timeStr);
        if (timerDuration === null) {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30s, 5m, 2h, 1d');
          return;
        }
      }

      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user = await User.findOne({ where: { telegramId: ctx.from.id } });
      if (!user) {
        user = await User.create({
          telegramId: ctx.from.id,
          username: ctx.from.username,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          referralCode: ctx.from.id.toString()
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
      const existingChecks = await SubscriptionCheck.count({
        where: { 
          chatId: ctx.chat.id.toString(),
          isActive: true
        }
      });

      if (existingChecks >= 5) {
        await ctx.reply('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ —á–∞—Ç. –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /unsetup');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω —É–∂–µ
      const existingCheck = await SubscriptionCheck.findOne({
        where: {
          chatId: ctx.chat.id.toString(),
          targetChannel,
          isActive: true
        }
      });

      if (existingCheck) {
        await ctx.reply(`‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${targetChannel} —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
      try {
        const channelInfo = await ctx.api.getChat(targetChannel);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –æ–Ω –ø—É–±–ª–∏—á–Ω—ã–π)
        try {
          const botChannelMember = await ctx.api.getChatMember(targetChannel, ctx.me.id);
          if (!['creator', 'administrator'].includes(botChannelMember.status)) {
            await ctx.reply(`‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ ${targetChannel} –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.`);
          }
        } catch {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await SubscriptionCheck.createPublicCheck(
          user.id,
          ctx.chat.id.toString(),
          targetChannel,
          {
            chatTitle: ctx.chat.title,
            chatUsername: ctx.chat.username,
            timerDuration
          }
        );

        let confirmMessage = `‚úÖ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!**\n\n`;
        confirmMessage += `üì∫ **–ö–∞–Ω–∞–ª:** ${targetChannel}\n`;
        confirmMessage += `üè† **–ß–∞—Ç:** ${ctx.chat.title}\n`;
        if (timerDuration) {
          confirmMessage += `‚è∞ **–¢–∞–π–º–µ—Ä:** ${formatDuration(timerDuration)}\n`;
        }
        confirmMessage += `\nüí° –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.`;

        await ctx.reply(confirmMessage, { parse_mode: 'Markdown' });

        logger.userAction(user.telegramId, 'subscription_check_created', {
          chatId: ctx.chat.id,
          targetChannel,
          timerDuration
        });

      } catch (error) {
        await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ ${targetChannel}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
        logger.error('Setup command error:', error);
      }

    } catch (error) {
      logger.error('Setup command error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /unsetup [–∫–∞–Ω–∞–ª]
  bot.command('unsetup', async (ctx) => {
    try {
      if (ctx.chat?.type !== 'group' && ctx.chat?.type !== 'supergroup') {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.');
        return;
      }

      const userMember = await ctx.api.getChatMember(ctx.chat.id, ctx.from.id);
      if (!['creator', 'administrator'].includes(userMember.status)) {
        await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏.');
        return;
      }

      const args = ctx.message?.text?.split(' ').slice(1) || [];
      const targetChannel = args[0];

      let removedCount: number;

      if (targetChannel) {
        // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        removedCount = await SubscriptionCheck.removeByTarget(ctx.chat.id.toString(), targetChannel);
        
        if (removedCount > 0) {
          await ctx.reply(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${targetChannel} —É–¥–∞–ª–µ–Ω–∞.`);
        } else {
          await ctx.reply(`‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${targetChannel} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }
      } else {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        removedCount = await SubscriptionCheck.removeByTarget(ctx.chat.id.toString());
        
        if (removedCount > 0) {
          await ctx.reply(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${removedCount} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏.`);
        } else {
          await ctx.reply(`‚ÑπÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏.`);
        }
      }

    } catch (error) {
      logger.error('Unsetup command error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  bot.command('status', async (ctx) => {
    try {
      if (ctx.chat?.type !== 'group' && ctx.chat?.type !== 'supergroup') {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.');
        return;
      }

      const checks = await SubscriptionCheck.findByChatId(ctx.chat.id.toString());

      if (checks.length === 0) {
        await ctx.reply('‚ÑπÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏.');
        return;
      }

      let message = `üìä **–ê–ö–¢–ò–í–ù–´–ï –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò**\n\n`;
      message += `üìç **–ß–∞—Ç:** ${ctx.chat.title}\n`;
      message += `üìù **–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:** ${checks.length}\n\n`;

      checks.forEach((check, index) => {
        message += `${index + 1}. **${check.getTypeText()}**\n`;
        
        if (check.targetChannel) {
          message += `   üì∫ –ö–∞–Ω–∞–ª: ${check.targetChannel}\n`;
        }
        
        if (check.referralUser) {
          message += `   üë§ –†–µ—Ñ–µ—Ä–µ—Ä: ${check.referralUser.getDisplayName()}\n`;
        }
        
        if (check.hasTimer()) {
          message += `   ‚è∞ –¢–∞–π–º–µ—Ä: ${check.getTimerText()}\n`;
        }
        
        message += `   üìä –ü—Ä–æ–≤–µ—Ä–æ–∫: ${check.checksCount} | –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: ${check.subscriptionsCount}\n`;
        message += `   üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${check.getConversionRate()}%\n\n`;
      });

      message += `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/unsetup @channel\` –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏`;

      await ctx.reply(message, { parse_mode: 'Markdown' });

    } catch (error) {
      logger.error('Status command error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /setup_bot ID [–≤—Ä–µ–º—è] - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  bot.command('setup_bot', async (ctx) => {
    try {
      if (ctx.chat?.type !== 'group' && ctx.chat?.type !== 'supergroup') {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.');
        return;
      }

      const userMember = await ctx.api.getChatMember(ctx.chat.id, ctx.from.id);
      if (!['creator', 'administrator'].includes(userMember.status)) {
        await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É.');
        return;
      }

      const args = ctx.message?.text?.split(' ').slice(1) || [];
      
      if (args.length === 0) {
        await ctx.reply('üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n`/setup_bot USER_ID` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –û–ü\n`/setup_bot USER_ID 1d` - —Å —Ç–∞–π–º–µ—Ä–æ–º', { parse_mode: 'Markdown' });
        return;
      }

      const referralUserId = parseInt(args[0]);
      const timeStr = args[1];

      if (isNaN(referralUserId)) {
        await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const referralUser = await User.findOne({ where: { telegramId: referralUserId } });
      if (!referralUser) {
        await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${referralUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ PR GRAM Bot.`);
        return;
      }

      // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
      let timerDuration: number | undefined;
      if (timeStr) {
        timerDuration = parseTimeString(timeStr);
        if (timerDuration === null) {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30s, 5m, 2h, 1d');
          return;
        }
      }

      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Å–æ–∑–¥–∞—Ç–µ–ª—è
      let creator = await User.findOne({ where: { telegramId: ctx.from.id } });
      if (!creator) {
        creator = await User.create({
          telegramId: ctx.from.id,
          username: ctx.from.username,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          referralCode: ctx.from.id.toString()
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      const existingCheck = await SubscriptionCheck.findOne({
        where: {
          chatId: ctx.chat.id.toString(),
          type: 'referral_prgram',
          isActive: true
        }
      });

      if (existingCheck) {
        await ctx.reply('‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsetup_bot –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      await SubscriptionCheck.createReferralCheck(
        creator.id,
        ctx.chat.id.toString(),
        referralUser.id,
        {
          chatTitle: ctx.chat.title,
          chatUsername: ctx.chat.username,
          timerDuration
        }
      );

      let confirmMessage = `‚úÖ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ PR GRAM –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!**\n\n`;
      confirmMessage += `üë§ **–†–µ—Ñ–µ—Ä–µ—Ä:** ${referralUser.getDisplayName()}\n`;
      confirmMessage += `üè† **–ß–∞—Ç:** ${ctx.chat.title}\n`;
      if (timerDuration) {
        confirmMessage += `‚è∞ **–¢–∞–π–º–µ—Ä:** ${formatDuration(timerDuration)}\n`;
      }
      confirmMessage += `üîó **–†–µ—Ñ. —Å—Å—ã–ª–∫–∞:** \`t.me/${ctx.me.username}?start=${referralUserId}\`\n\n`;
      confirmMessage += `üí° –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ PR GRAM Bot —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.`;

      await ctx.reply(confirmMessage, { parse_mode: 'Markdown' });

      logger.userAction(creator.telegramId, 'referral_subscription_check_created', {
        chatId: ctx.chat.id,
        referralUserId,
        timerDuration
      });

    } catch (error) {
      logger.error('Setup bot command error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /unsetup_bot - –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
  bot.command('unsetup_bot', async (ctx) => {
    try {
      if (ctx.chat?.type !== 'group' && ctx.chat?.type !== 'supergroup') {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.');
        return;
      }

      const userMember = await ctx.api.getChatMember(ctx.chat.id, ctx.from.id);
      if (!['creator', 'administrator'].includes(userMember.status)) {
        await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.');
        return;
      }

      const deletedCount = await SubscriptionCheck.destroy({
        where: {
          chatId: ctx.chat.id.toString(),
          type: 'referral_prgram',
          isActive: true
        }
      });

      if (deletedCount > 0) {
        await ctx.reply('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ PR GRAM –æ—Ç–∫–ª—é—á–µ–Ω–∞.');
      } else {
        await ctx.reply('‚ÑπÔ∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.');
      }

    } catch (error) {
      logger.error('Unsetup bot command error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /autodelete - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
  bot.command('autodelete', async (ctx) => {
    try {
      if (ctx.chat?.type !== 'group' && ctx.chat?.type !== 'supergroup') {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.');
        return;
      }

      const userMember = await ctx.api.getChatMember(ctx.chat.id, ctx.from.id);
      if (!['creator', 'administrator'].includes(userMember.status)) {
        await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ.');
        return;
      }

      const args = ctx.message?.text?.split(' ').slice(1) || [];
      
      if (args.length === 0) {
        await ctx.reply('üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n`/autodelete 30s` - —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫\n`/autodelete off` - –æ—Ç–∫–ª—é—á–∏—Ç—å', { parse_mode: 'Markdown' });
        return;
      }

      const timeStr = args[0].toLowerCase();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —á–∞—Ç–µ
      if (timeStr === 'off') {
        await SubscriptionCheck.update(
          { autoDeleteEnabled: false },
          { where: { chatId: ctx.chat.id.toString(), isActive: true } }
        );
        
        await ctx.reply('‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ.');
      } else {
        const duration = parseTimeString(timeStr);
        
        if (duration === null || duration < 15 || duration > 300) {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç 15s –¥–æ 5m (15 —Å–µ–∫—É–Ω–¥ - 5 –º–∏–Ω—É—Ç)');
          return;
        }

        const updatedCount = await SubscriptionCheck.update(
          { 
            autoDeleteEnabled: true,
            autoDeleteDuration: duration
          },
          { where: { chatId: ctx.chat.id.toString(), isActive: true } }
        );

        if (updatedCount[0] > 0) {
          await ctx.reply(`‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ ${formatDuration(duration)}.`);
        } else {
          await ctx.reply('‚ÑπÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è.');
        }
      }

    } catch (error) {
      logger.error('Autodelete command error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /get_autodelete - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  bot.command('get_autodelete', async (ctx) => {
    try {
      if (ctx.chat?.type !== 'group' && ctx.chat?.type !== 'supergroup') {
        return;
      }

      const checks = await SubscriptionCheck.findByChatId(ctx.chat.id.toString());
      
      if (checks.length === 0) {
        await ctx.reply('‚ÑπÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏.');
        return;
      }

      let message = `‚åõ **–ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–£–î–ê–õ–ï–ù–ò–Ø**\n\n`;
      
      checks.forEach((check, index) => {
        message += `${index + 1}. ${check.getTypeText()}\n`;
        if (check.autoDeleteEnabled) {
          message += `   ‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ: ${formatDuration(check.autoDeleteDuration)}\n`;
        } else {
          message += `   ‚ùå –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ: –æ—Ç–∫–ª—é—á–µ–Ω–æ\n`;
        }
        message += `\n`;
      });

      await ctx.reply(message, { parse_mode: 'Markdown' });

    } catch (error) {
      logger.error('Get autodelete command error:', error);
    }
  });

  logger.info('‚úÖ Subscription check commands configured');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
export function setupNewMemberHandler(bot: Bot) {
  bot.on('message:new_chat_members', async (ctx) => {
    try {
      const chatId = ctx.chat.id.toString();
      const newMembers = ctx.message.new_chat_members!;

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      const checks = await SubscriptionCheck.findByChatId(chatId);
      
      if (checks.length === 0) {
        return; // –ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      for (const member of newMembers) {
        if (member.is_bot) continue; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤

        for (const check of checks) {
          await processNewMemberCheck(ctx, member, check);
        }
      }

    } catch (error) {
      logger.error('New member handler error:', error);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
async function processNewMemberCheck(ctx: Context, member: any, check: SubscriptionCheck) {
  try {
    await check.updateStats('check');

    let isValid = false;
    let kickReason = '';

    if (check.type === 'referral_prgram') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
      const user = await User.findOne({ 
        where: { 
          telegramId: member.id,
          referrerId: check.referralUserId 
        }
      });

      if (user) {
        isValid = true;
      } else {
        kickReason = `–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É`;
      }
    } else if (check.targetChannel) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
      try {
        const chatMember = await ctx.api.getChatMember(check.targetChannel, member.id);
        isValid = ['creator', 'administrator', 'member'].includes(chatMember.status);
        
        if (!isValid) {
          kickReason = `–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${check.targetChannel}`;
        }
      } catch {
        kickReason = `–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${check.targetChannel}`;
      }
    }

    if (isValid) {
      await check.updateStats('subscribe');
      return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É
    let warningMessage = `üëã ${member.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n`;
    warningMessage += `${kickReason}\n\n`;

    if (check.type === 'referral_prgram' && check.referralUser) {
      warningMessage += `üîó –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É:\n`;
      warningMessage += `t.me/${ctx.me.username}?start=${check.referralUserId}\n\n`;
      warningMessage += `üí∞ –ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ${check.referralUser.getDisplayName()} –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å!`;
    } else if (check.targetChannel) {
      warningMessage += `üì∫ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞: ${check.targetChannel}`;
    }

    if (check.hasTimer()) {
      warningMessage += `\n\n‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å ${check.getTimerText()} –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    const warningMsg = await ctx.reply(warningMessage, { parse_mode: 'Markdown' });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (check.autoDeleteEnabled) {
      setTimeout(async () => {
        try {
          await ctx.api.deleteMessage(ctx.chat!.id, warningMsg.message_id);
        } catch (error) {
          logger.warn('Failed to auto-delete warning message:', error);
        }
      }, check.autoDeleteDuration * 1000);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä, —Å—Ç–∞–≤–∏–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    if (check.hasTimer()) {
      setTimeout(async () => {
        await recheckMember(ctx, member.id, check);
      }, check.timerDuration! * 1000);
    } else {
      // –ë–µ–∑ —Ç–∞–π–º–µ—Ä–∞ - —Å—Ä–∞–∑—É –∫–∏–∫–∞–µ–º
      await kickMember(ctx, member.id, check);
    }

  } catch (error) {
    logger.error('Process new member check error:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
async function recheckMember(ctx: Context, userId: number, check: SubscriptionCheck) {
  try {
    let isValid = false;

    if (check.type === 'referral_prgram') {
      const user = await User.findOne({ 
        where: { 
          telegramId: userId,
          referrerId: check.referralUserId 
        }
      });
      isValid = !!user;
    } else if (check.targetChannel) {
      try {
        const chatMember = await ctx.api.getChatMember(check.targetChannel, userId);
        isValid = ['creator', 'administrator', 'member'].includes(chatMember.status);
      } catch {
        isValid = false;
      }
    }

    if (isValid) {
      await check.updateStats('subscribe');
    } else {
      await kickMember(ctx, userId, check);
    }

  } catch (error) {
    logger.error('Recheck member error:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
async function kickMember(ctx: Context, userId: number, check: SubscriptionCheck) {
  try {
    await ctx.api.banChatMember(ctx.chat!.id, userId);
    await ctx.api.unbanChatMember(ctx.chat!.id, userId); // –°—Ä–∞–∑—É —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º (–ø—Ä–æ—Å—Ç–æ –∫–∏–∫–∞–µ–º)
    
    await check.updateStats('kick');
    
    logger.info(`Kicked user ${userId} from chat ${ctx.chat!.id} due to subscription check`);
  } catch (error) {
    logger.error('Kick member error:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function parseTimeString(timeStr: string): number | null {
  const match = timeStr.match(/^(\d+)([smhd])$/);
  if (!match) return null;

  const value = parseInt(match[1]);
  const unit = match[2];

  switch (unit) {
    case 's': return value;
    case 'm': return value * 60;
    case 'h': return value * 3600;
    case 'd': return value * 86400;
    default: return null;
  }
}

function formatDuration(seconds: number): string {
  if (seconds < 60) return `${seconds}—Å`;
  if (seconds < 3600) return `${Math.floor(seconds / 60)}–º`;
  if (seconds < 86400) return `${Math.floor(seconds / 3600)}—á`;
  return `${Math.floor(seconds / 86400)}–¥`;
}