// src/bot/handlers/checks.ts - COMPLETION
import { Bot, Context } from 'grammy';
import { requireAuth } from '../middlewares/auth';
import { logger } from '../../utils/logger';
import { EMOJIS, LIMITS } from '../../utils/constants';
import { getChecksKeyboard, getConfirmKeyboard, getBackKeyboard } from '../keyboards/main';
import { validateCheckAmount, validateCheckActivations, validateCheckPassword } from '../../utils/validators/init';
import { Check, CheckActivation, User, Transaction } from '../../database/models';


interface CheckCreationState {
  type?: 'personal' | 'multi';
  totalAmount?: number;
  maxActivations?: number;
  targetUserId?: number;
  password?: string;
  comment?: string;
  requiredSubscription?: string;
}

// –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞
export async function askPersonalCheckRecipient(ctx: Context, user: User, data: CheckCreationState) {
  data.maxActivations = 1;
  user.currentState = JSON.stringify({ action: 'creating_personal_check', data });
  await user.save();

  let message = `‚úÖ –°—É–º–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n`;
  message += `üìù **–®–∞–≥ 2/4: –ü–æ–ª—É—á–∞—Ç–µ–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)**\n\n`;
  message += `–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ–∫–∞ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n\n`;
  message += `‚Ä¢ **Telegram ID** (—á–∏—Å–ª–æ–≤–æ–π ID)\n`;
  message += `‚Ä¢ **Username** (–±–µ–∑ @)\n`;
  message += `‚Ä¢ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip** —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n\n`;
  message += `üí° –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è, —á–µ–∫ —Å–º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.`;

  await ctx.reply(message, { parse_mode: 'Markdown' });
}

export async function askMultiCheckActivations(ctx: Context, user: User, data: CheckCreationState) {
  user.currentState = JSON.stringify({ action: 'creating_multi_check', data });
  await user.save();

  let message = `‚úÖ –°—É–º–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n`;
  message += `üìù **–®–∞–≥ 2/5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π**\n\n`;
  message += `–ù–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫?\n\n`;
  message += `**–ü—Ä–∏–º–µ—Ä:** 5000 GRAM –Ω–∞ 10 —á–µ–ª–æ–≤–µ–∫ = 500 GRAM –∫–∞–∂–¥–æ–º—É\n\n`;
  message += `**–õ–∏–º–∏—Ç—ã:** 1-1000 –∞–∫—Ç–∏–≤–∞—Ü–∏–π`;

  await ctx.reply(message, { parse_mode: 'Markdown' });
}

export async function askCheckComment(ctx: Context, user: User, data: CheckCreationState, action: string) {
  user.currentState = JSON.stringify({ action, data });
  await user.save();

  let message = `‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n\n`;
  message += `üìù **–®–∞–≥ ${action === 'creating_personal_check' ? '3' : '4'}/5: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)**\n\n`;
  message += `–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —á–µ–∫—É:\n\n`;
  message += `**–ü—Ä–∏–º–µ—Ä—ã:**\n`;
  message += `‚Ä¢ "üéâ –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"\n`;
  message += `‚Ä¢ "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å"\n`;
  message += `‚Ä¢ "–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∞"\n\n`;
  message += `–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞`;

  await ctx.reply(message, { parse_mode: 'Markdown' });
}

export async function showCheckPreview(ctx: Context, user: User, data: CheckCreationState, action: string) {
  const amountPerActivation = Math.floor(data.totalAmount! / data.maxActivations!);
  
  let message = `üìã **–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ß–ï–ö–ê**\n\n`;
  message += `üí≥ **–¢–∏–ø:** ${data.type === 'personal' ? '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π' : '–ú—É–ª—å—Ç–∏-—á–µ–∫'}\n`;
  message += `üí∞ **–°—É–º–º–∞:** ${data.totalAmount!.toLocaleString()} GRAM\n`;
  message += `üë• **–ê–∫—Ç–∏–≤–∞—Ü–∏–π:** ${data.maxActivations}\n`;
  message += `üíµ **–ù–∞ –∫–∞–∂–¥–æ–≥–æ:** ${amountPerActivation.toLocaleString()} GRAM\n`;
  
  if (data.comment) {
    message += `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${data.comment}\n`;
  }
  
  if (data.targetUserId) {
    message += `üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** —É–∫–∞–∑–∞–Ω\n`;
  }
  
  message += `\nüí∞ **–ö —Å–ø–∏—Å–∞–Ω–∏—é:** ${data.totalAmount!.toLocaleString()} GRAM\n`;
  message += `üí≥ **–û—Å—Ç–∞—Ç–æ–∫:** ${((user.balance || 0) - data.totalAmount!).toLocaleString()} GRAM\n\n`;
  
  if (user.balance! < data.totalAmount!) {
    message += `‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!**\n`;
    message += `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${(data.totalAmount! - user.balance!).toLocaleString()} GRAM`;
  } else {
    message += `‚úÖ –°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞`;
  }

  const keyboard = getBackKeyboard('checks_create');
  
  if (user.balance! >= data.totalAmount!) {
    keyboard.row().text('‚úÖ –°–æ–∑–¥–∞—Ç—å —á–µ–∫', `confirm_create_check`);
  } else {
    keyboard.row().text('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'cabinet_deposit');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  user.currentState = JSON.stringify({ action: 'check_preview', data });
  await user.save();

  await ctx.reply(message, {
    reply_markup: keyboard,
    parse_mode: 'Markdown'
  });
}

export async function handleCheckActivation(ctx: Context, user: User, checkCode: string) {
  try {
    const code = checkCode.toUpperCase().trim();
    
    // –ò—â–µ–º —á–µ–∫ –ø–æ –∫–æ–¥—É
    const check = await Check.findOne({
      where: { code },
      include: [
        { model: User, as: 'creator' },
        { model: User, as: 'targetUser' }
      ]
    });

    if (!check) {
      await ctx.reply('‚ùå –ß–µ–∫ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.');
      user.currentState = null;
      await user.save();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    const canActivate = check.canUserActivate(user.id);
    if (!canActivate.canActivate) {
      await ctx.reply(`‚ùå ${canActivate.reason}`);
      user.currentState = null;
      await user.save();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —á–µ–∫
    const existingActivation = await CheckActivation.findOne({
      where: { checkId: check.id, userId: user.id }
    });

    if (existingActivation) {
      await ctx.reply('‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫ —Ä–∞–Ω–µ–µ.');
      user.currentState = null;
      await user.save();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if (check.requiredSubscription) {
      // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
      // const isSubscribed = await telegramService.checkUserSubscription(user.telegramId, check.requiredSubscription);
      // if (!isSubscribed) {
      //   await ctx.reply(`‚ùå –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${check.requiredSubscription}`);
      //   return;
      // }
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫
    const amountPerActivation = Math.floor(check.totalAmount / check.maxActivations);
    
    await CheckActivation.create({
      checkId: check.id,
      userId: user.id,
      amount: amountPerActivation
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–∞
    await check.activate(user.id);

    // –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await user.updateBalance(amountPerActivation, 'add');

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await Transaction.createCheckTransaction(user.id, amountPerActivation, (user.balance || 0) - amountPerActivation, check.id, false);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–µ–∫–∞
    if (check.creator) {
      try {
        await ctx.api.sendMessage(
          check.creator.telegramId,
          `üí≥ **–í–∞—à —á–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n` +
          `üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** ${user.getDisplayName()}\n` +
          `üí∞ **–°—É–º–º–∞:** ${amountPerActivation.toLocaleString()} GRAM\n` +
          `üè∑Ô∏è **–ö–æ–¥ —á–µ–∫–∞:** ${check.code}\n` +
          `üìä **–ê–∫—Ç–∏–≤–∞—Ü–∏–π:** ${check.currentActivations}/${check.maxActivations}`,
          { parse_mode: 'Markdown' }
        );
      } catch (error: unknown) {
        logger.error('Check activation error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞');
      }
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user.currentState = null;
    await user.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    let message = `üéâ **–ß–ï–ö –£–°–ü–ï–®–ù–û –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!**\n\n`;
    message += `üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** ${amountPerActivation.toLocaleString()} GRAM\n`;
    message += `üè∑Ô∏è **–ö–æ–¥ —á–µ–∫–∞:** ${check.code}\n`;
    
    if (check.comment) {
      message += `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${check.comment}\n`;
    }
    
    message += `\nüí≥ **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** ${user.balance?.toLocaleString()} GRAM\n`;
    message += `\nüôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–µ–∫–æ–≤!`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üí≥ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —á–µ–∫', callback_data: 'checks_create' },
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };

    await ctx.reply(message, {
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    });

    logger.userAction(user.telegramId, 'check_activated', {
      checkId: check.id,
      amount: amountPerActivation,
      newBalance: user.balance
    });

  } catch (error) {
    logger.error('Check activation error:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–æ–≤
export function setupCheckCreationConfirmHandlers(bot: Bot) {
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞
  bot.callbackQuery('confirm_create_check', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      const stateData = JSON.parse(user.currentState || '{}');
      const data: CheckCreationState = stateData.data;

      if (!data || !data.type || !data.totalAmount) {
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
      if (user.balance! < data.totalAmount) {
        await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —á–µ–∫
      const check = await Check.create({
        creatorId: user.id,
        code: Check.generateCode(),
        type: data.type,
        totalAmount: data.totalAmount,
        amountPerActivation: Math.floor(data.totalAmount / data.maxActivations!),
        maxActivations: data.maxActivations!,
        targetUserId: data.targetUserId,
        password: data.password,
        comment: data.comment,
        requiredSubscription: data.requiredSubscription
      });

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      await user.updateBalance(data.totalAmount, 'subtract');

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await Transaction.createCheckTransaction(user.id, data.totalAmount, user.balance! + data.totalAmount, check.id, true);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      user.currentState = null;
      await user.save();

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const checkMessage = `üí≥ **–ß–ï–ö –°–û–ó–î–ê–ù!**\n\n`;
      const checkContent = formatCheckMessage(check);

      let message = `‚úÖ **–ß–ï–ö –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!**\n\n`;
      message += `üè∑Ô∏è **–ö–æ–¥:** ${check.code}\n`;
      message += `üí∞ **–°—É–º–º–∞:** ${data.totalAmount.toLocaleString()} GRAM\n`;
      message += `üë• **–ê–∫—Ç–∏–≤–∞—Ü–∏–π:** ${data.maxActivations}\n`;
      message += `üíµ **–ù–∞ –∫–∞–∂–¥–æ–≥–æ:** ${check.amountPerActivation.toLocaleString()} GRAM\n\n`;
      message += `üí≥ **–û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞:** ${user.balance?.toLocaleString()} GRAM\n\n`;
      message += `üéâ –ß–µ–∫ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ª—é–±–æ–π —á–∞—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —á–µ–∫', callback_data: `forward_check_${check.id}` },
            { text: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥', callback_data: `copy_check_code_${check.id}` }
          ],
          [
            { text: 'üí≥ –°–æ–∑–¥–∞—Ç—å –µ—â–µ —á–µ–∫', callback_data: 'checks_create' },
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —á–µ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      await ctx.reply(checkContent, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üí∞ –ü–û–õ–£–ß–ò–¢–¨ GRAM', callback_data: `activate_check_${check.code}` }
          ]]
        }
      });

      await ctx.answerCallbackQuery('‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');

      logger.userAction(user.telegramId, 'check_created', {
        checkId: check.id,
        type: data.type,
        amount: data.totalAmount,
        activations: data.maxActivations
      });

    } catch (error) {
      logger.error('Create check confirmation error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞');
    }
  });

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
  bot.callbackQuery(/^activate_check_(.+)$/, requireAuth, async (ctx) => {
    try {
      const checkCode = ctx.match![1];
      const user = ctx.session!.user!;

      await handleCheckActivation(ctx, user, checkCode);
      await ctx.answerCallbackQuery();

    } catch (error) {
      logger.error('Activate check callback error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞');
    }
  });
}

function formatCheckMessage(check: Check): string {
  let message = `üí≥ **–ß–ï–ö –ù–ê GRAM**\n\n`;
  
  if (check.comment) {
    message += `üí¨ ${check.comment}\n\n`;
  }
  
  message += `üí∞ **${check.amountPerActivation.toLocaleString()} GRAM**\n`;
  message += `üë• –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: **${check.getRemainingActivations()}/${check.maxActivations}**\n`;
  message += `‚è∞ –°–æ–∑–¥–∞–Ω: ${check.createdAt.toLocaleDateString('ru-RU')}\n\n`;
  
  message += `üè∑Ô∏è **–ö–æ–¥ —á–µ–∫–∞:** \`${check.code}\`\n\n`;
  message += `üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`;
  
  return message;
}

export function setupChecksHandlers(bot: Bot) {
  // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–µ–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä:
  bot.callbackQuery('checks_menu', requireAuth, async (ctx) => {
    // –ö–æ–¥ –¥–ª—è –º–µ–Ω—é —á–µ–∫–æ–≤
    await ctx.editMessageText('–ú–µ–Ω—é —á–µ–∫–æ–≤', { reply_markup: getChecksKeyboard() });
  });
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

export function setupCheckTextHandlers(bot: Bot) {
  // –ó–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–µ–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä:
  bot.on('message:text', requireAuth, async (ctx) => {
    const user = ctx.session!.user!;
    const state = JSON.parse(user.currentState || '{}');
    if (state.action === 'creating_check') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞
    }
  });
}

// –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è src/bot/handlers/checks.ts

export function setupChecksHandlers(bot: Bot) {
  
  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ–∫–æ–≤
  bot.callbackQuery('checks', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      logger.userAction(user.telegramId, 'checks_opened');

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const myChecksCount = await Check.count({
        where: { creatorId: user.id }
      });

      const myActivationsCount = await CheckActivation.count({
        where: { userId: user.id }
      });

      let message = `${EMOJIS.checks} **–°–ò–°–¢–ï–ú–ê –ß–ï–ö–û–í**\n\n`;
      message += `–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ GRAM –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —á–µ–∫–∏\n`;
      message += `–ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram.\n\n`;
      message += `üí∞ **–ë–∞–ª–∞–Ω—Å:** ${user.balance?.toLocaleString() || 0} GRAM\n\n`;
      message += `üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
      message += `‚îú –°–æ–∑–¥–∞–Ω–æ —á–µ–∫–æ–≤: ${myChecksCount}\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —á–µ–∫–æ–≤: ${myActivationsCount}\n`;
      message += `‚îî –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: ‚úÖ\n\n`;
      message += `üí≥ **–í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ß–ï–ö–û–í:**\n`;
      message += `‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª—é–±–æ–π —á–∞—Ç/–∫–∞–Ω–∞–ª\n`;
      message += `‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫\n`;
      message += `‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –∑–∞—â–∏—Ç—ã\n`;
      message += `‚Ä¢ –£—Å–ª–æ–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è\n`;
      message += `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏`;

      await ctx.editMessageText(message, {
        reply_markup: getChecksKeyboard(),
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Checks main handler error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞
  bot.callbackQuery('checks_create', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;

      let message = `üí≥ **–°–û–ó–î–ê–ù–ò–ï –ß–ï–ö–ê**\n\n`;
      message += `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance?.toLocaleString() || 0} GRAM\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫–∞:\n\n`;
      message += `üë§ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫** - –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n`;
      message += `üë• **–ú—É–ª—å—Ç–∏-—á–µ–∫** - –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–µ–ª–æ–≤–µ–∫`;

      const keyboard = getBackKeyboard('checks')
        .row()
        .text('üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫', 'create_personal_check')
        .text('üë• –ú—É–ª—å—Ç–∏-—á–µ–∫', 'create_multi_check');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Checks create error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞
  bot.callbackQuery('create_personal_check', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const state = { type: 'personal' };
      user.currentState = JSON.stringify({ action: 'creating_personal_check', data: state });
      await user.save();

      let message = `üë§ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ß–ï–ö**\n\n`;
      message += `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance?.toLocaleString() || 0} GRAM\n\n`;
      message += `**–®–∞–≥ 1/4: –°—É–º–º–∞ —á–µ–∫–∞**\n\n`;
      message += `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É GRAM –¥–ª—è —á–µ–∫–∞:\n\n`;
      message += `**–õ–∏–º–∏—Ç—ã:** 10-${user.balance || 0} GRAM`;

      const keyboard = getBackKeyboard('checks_create');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Create personal check error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏-—á–µ–∫–∞
  bot.callbackQuery('create_multi_check', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const state = { type: 'multi' };
      user.currentState = JSON.stringify({ action: 'creating_multi_check', data: state });
      await user.save();

      let message = `üë• **–ú–£–õ–¨–¢–ò-–ß–ï–ö**\n\n`;
      message += `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance?.toLocaleString() || 0} GRAM\n\n`;
      message += `**–®–∞–≥ 1/5: –û–±—â–∞—è —Å—É–º–º–∞ —á–µ–∫–∞**\n\n`;
      message += `–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É GRAM –¥–ª—è —á–µ–∫–∞:\n\n`;
      message += `**–õ–∏–º–∏—Ç—ã:** 10-${user.balance || 0} GRAM\n\n`;
      message += `üí° –ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ —É–∫–∞–∂–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π`;

      const keyboard = getBackKeyboard('checks_create');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Create multi check error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞
  bot.callbackQuery('checks_activate', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      user.currentState = JSON.stringify({ action: 'activating_check', data: {} });
      await user.save();

      let message = `üí∞ **–ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨ –ß–ï–ö**\n\n`;
      message += `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —á–µ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.\n\n`;
      message += `**–§–æ—Ä–º–∞—Ç –∫–æ–¥–∞:** 16 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: A1B2C3D4E5F6G7H8)\n\n`;
      message += `üí° –ö–æ–¥—ã —á–µ–∫–æ–≤ –æ–±—ã—á–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—é—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–ª–∏ –ø–æ—Å—Ç–∞—Ö`;

      const keyboard = getBackKeyboard('checks');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Checks activate error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ú–æ–∏ —á–µ–∫–∏
  bot.callbackQuery(/^checks_my(?:_page_(\d+))?$/, requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      const page = parseInt(ctx.match![1] || '1');
      const limit = 5;
      const offset = (page - 1) * limit;

      const { rows: checks, count } = await Check.findAndCountAll({
        where: { creatorId: user.id },
        order: [['createdAt', 'DESC']],
        limit,
        offset
      });

      const totalPages = Math.ceil(count / limit);

      let message = `üí≥ **–ú–û–ò –ß–ï–ö–ò** (${count})\n\n`;

      if (checks.length === 0) {
        message += `${EMOJIS.info} –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.\n\n`;
        message += `–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–µ–∫ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!`;
      } else {
        checks.forEach((check, index) => {
          const globalIndex = offset + index + 1;
          message += `${globalIndex}. **${check.comment || '–ß–µ–∫ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}**\n`;
          message += `üí∞ ${check.amountPerActivation} GRAM | `;
          message += `${check.getStatusIcon()} ${check.currentActivations}/${check.maxActivations}\n`;
          message += `üè∑Ô∏è ${check.code}\n\n`;
        });
      }

      const keyboard = getPaginationKeyboard(
        page,
        totalPages,
        'checks_my',
        [
          { text: 'üí≥ –°–æ–∑–¥–∞—Ç—å —á–µ–∫', data: 'checks_create' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', data: 'checks_stats' }
        ]
      );

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('My checks error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  logger.info('‚úÖ Checks handlers configured');
}

export function setupCheckTextHandlers(bot: Bot) {
  bot.on('message:text', requireAuth, async (ctx, next) => {
    try {
      const user = ctx.session!.user!;
      
      if (!user.currentState) {
        return next();
      }

      const stateData = JSON.parse(user.currentState);
      const action = stateData.action;
      const data = stateData.data;
      
      if (action === 'creating_personal_check' || action === 'creating_multi_check') {
        await handleCheckCreationStep(ctx, user, data, action);
        return;
      }
      
      if (action === 'activating_check') {
        await handleCheckActivation(ctx, user, ctx.message.text.trim());
        return;
      }
      
      await next();
    } catch (error) {
      logger.error('Check text handler error:', error);
      await next();
    }
  });
}

async function handleCheckCreationStep(ctx: Context, user: User, data: any, action: string) {
  const text = ctx.message!.text!.trim();
  
  if (!data.totalAmount) {
    // –®–∞–≥ 1: –°—É–º–º–∞
    const amount = parseInt(text);
    
    if (isNaN(amount) || amount < 10 || amount > (user.balance || 0)) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ ${user.balance || 0}`);
      return;
    }
    
    data.totalAmount = amount;
    
    if (action === 'creating_personal_check') {
      await askPersonalCheckRecipient(ctx, user, data);
    } else {
      await askMultiCheckActivations(ctx, user, data);
    }
    
  } else if (action === 'creating_multi_check' && !data.maxActivations) {
    // –®–∞–≥ 2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –º—É–ª—å—Ç–∏-—á–µ–∫–æ–≤)
    const activations = parseInt(text);
    
    if (isNaN(activations) || activations < 1 || activations > 1000) {
      await ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000');
      return;
    }
    
    if (Math.floor(data.totalAmount / activations) < 1) {
      await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π. –ú–∏–Ω–∏–º—É–º 1 GRAM –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é');
      return;
    }
    
    data.maxActivations = activations;
    await askCheckComment(ctx, user, data, action);
    
  } else if (!data.comment && text !== '/skip') {
    // –®–∞–≥ 3/4: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π  
    data.comment = text.length > 500 ? text.substring(0, 500) : text;
    await showCheckPreview(ctx, user, data, action);
    
  } else if (text === '/skip') {
    // –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    data.comment = '';
    await showCheckPreview(ctx, user, data, action);
  }
}
