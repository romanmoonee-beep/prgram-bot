// src/bot/handlers/checks.ts - COMPLETION
import { Bot, Context } from 'grammy';
import { requireAuth } from '../middlewares/auth';
import { logger } from '../../utils/logger';
import { EMOJIS, LIMITS } from '../../utils/constants';
import { getChecksKeyboard, getConfirmKeyboard, getBackKeyboard } from '../keyboards/main';
import { validateCheckAmount, validateCheckActivations, validateCheckPassword } from '../../utils/validators/init';
import { Check, CheckActivation, User, Transaction } from '../../database/models';

interface CheckCreationState {
  type?: 'personal' | 'multi';
  totalAmount?: number;
  maxActivations?: number;
  targetUserId?: number;
  password?: string;
  comment?: string;
  requiredSubscription?: string;
}

// –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞
async function askPersonalCheckRecipient(ctx: Context, user: User, data: CheckCreationState) {
  data.maxActivations = 1;
  user.currentState = JSON.stringify({ action: 'creating_personal_check', data });
  await user.save();

  let message = `‚úÖ –°—É–º–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n`;
  message += `üìù **–®–∞–≥ 2/4: –ü–æ–ª—É—á–∞—Ç–µ–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)**\n\n`;
  message += `–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ–∫–∞ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n\n`;
  message += `‚Ä¢ **Telegram ID** (—á–∏—Å–ª–æ–≤–æ–π ID)\n`;
  message += `‚Ä¢ **Username** (–±–µ–∑ @)\n`;
  message += `‚Ä¢ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip** —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n\n`;
  message += `üí° –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è, —á–µ–∫ —Å–º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.`;

  await ctx.reply(message, { parse_mode: 'Markdown' });
}

async function askMultiCheckActivations(ctx: Context, user: User, data: CheckCreationState) {
  user.currentState = JSON.stringify({ action: 'creating_multi_check', data });
  await user.save();

  let message = `‚úÖ –°—É–º–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n`;
  message += `üìù **–®–∞–≥ 2/5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π**\n\n`;
  message += `–ù–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫?\n\n`;
  message += `**–ü—Ä–∏–º–µ—Ä:** 5000 GRAM –Ω–∞ 10 —á–µ–ª–æ–≤–µ–∫ = 500 GRAM –∫–∞–∂–¥–æ–º—É\n\n`;
  message += `**–õ–∏–º–∏—Ç—ã:** 1-1000 –∞–∫—Ç–∏–≤–∞—Ü–∏–π`;

  await ctx.reply(message, { parse_mode: 'Markdown' });
}

async function askCheckComment(ctx: Context, user: User, data: CheckCreationState, action: string) {
  user.currentState = JSON.stringify({ action, data });
  await user.save();

  let message = `‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n\n`;
  message += `üìù **–®–∞–≥ ${action === 'creating_personal_check' ? '3' : '4'}/5: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)**\n\n`;
  message += `–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —á–µ–∫—É:\n\n`;
  message += `**–ü—Ä–∏–º–µ—Ä—ã:**\n`;
  message += `‚Ä¢ "üéâ –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"\n`;
  message += `‚Ä¢ "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å"\n`;
  message += `‚Ä¢ "–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∞"\n\n`;
  message += `–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞`;

  await ctx.reply(message, { parse_mode: 'Markdown' });
}

async function showCheckPreview(ctx: Context, user: User, data: CheckCreationState, action: string) {
  const amountPerActivation = Math.floor(data.totalAmount! / data.maxActivations!);
  
  let message = `üìã **–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ß–ï–ö–ê**\n\n`;
  message += `üí≥ **–¢–∏–ø:** ${data.type === 'personal' ? '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π' : '–ú—É–ª—å—Ç–∏-—á–µ–∫'}\n`;
  message += `üí∞ **–°—É–º–º–∞:** ${data.totalAmount!.toLocaleString()} GRAM\n`;
  message += `üë• **–ê–∫—Ç–∏–≤–∞—Ü–∏–π:** ${data.maxActivations}\n`;
  message += `üíµ **–ù–∞ –∫–∞–∂–¥–æ–≥–æ:** ${amountPerActivation.toLocaleString()} GRAM\n`;
  
  if (data.comment) {
    message += `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${data.comment}\n`;
  }
  
  if (data.targetUserId) {
    message += `üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** —É–∫–∞–∑–∞–Ω\n`;
  }
  
  message += `\nüí∞ **–ö —Å–ø–∏—Å–∞–Ω–∏—é:** ${data.totalAmount!.toLocaleString()} GRAM\n`;
  message += `üí≥ **–û—Å—Ç–∞—Ç–æ–∫:** ${((user.balance || 0) - data.totalAmount!).toLocaleString()} GRAM\n\n`;
  
  if (user.balance! < data.totalAmount!) {
    message += `‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!**\n`;
    message += `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${(data.totalAmount! - user.balance!).toLocaleString()} GRAM`;
  } else {
    message += `‚úÖ –°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞`;
  }

  const keyboard = getBackKeyboard('checks_create');
  
  if (user.balance! >= data.totalAmount!) {
    keyboard.row().text('‚úÖ –°–æ–∑–¥–∞—Ç—å —á–µ–∫', `confirm_create_check`);
  } else {
    keyboard.row().text('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'cabinet_deposit');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  user.currentState = JSON.stringify({ action: 'check_preview', data });
  await user.save();

  await ctx.reply(message, {
    reply_markup: keyboard,
    parse_mode: 'Markdown'
  });
}

async function handleCheckActivation(ctx: Context, user: User, checkCode: string) {
  try {
    const code = checkCode.toUpperCase().trim();
    
    // –ò—â–µ–º —á–µ–∫ –ø–æ –∫–æ–¥—É
    const check = await Check.findOne({
      where: { code },
      include: [
        { model: User, as: 'creator' },
        { model: User, as: 'targetUser' }
      ]
    });

    if (!check) {
      await ctx.reply('‚ùå –ß–µ–∫ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.');
      user.currentState = null;
      await user.save();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    const canActivate = check.canUserActivate(user.id);
    if (!canActivate.canActivate) {
      await ctx.reply(`‚ùå ${canActivate.reason}`);
      user.currentState = null;
      await user.save();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —á–µ–∫
    const existingActivation = await CheckActivation.findOne({
      where: { checkId: check.id, userId: user.id }
    });

    if (existingActivation) {
      await ctx.reply('‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫ —Ä–∞–Ω–µ–µ.');
      user.currentState = null;
      await user.save();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if (check.requiredSubscription) {
      // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
      // const isSubscribed = await telegramService.checkUserSubscription(user.telegramId, check.requiredSubscription);
      // if (!isSubscribed) {
      //   await ctx.reply(`‚ùå –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${check.requiredSubscription}`);
      //   return;
      // }
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫
    const amountPerActivation = Math.floor(check.totalAmount / check.maxActivations);
    
    await CheckActivation.create({
      checkId: check.id,
      userId: user.id,
      amount: amountPerActivation
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–∞
    await check.activate(user.id);

    // –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await user.updateBalance(amountPerActivation, 'add');

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await Transaction.createCheckTransaction(user.id, amountPerActivation, (user.balance || 0) - amountPerActivation, check.id, false);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–µ–∫–∞
    if (check.creator) {
      try {
        await ctx.api.sendMessage(
          check.creator.telegramId,
          `üí≥ **–í–∞—à —á–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n` +
          `üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** ${user.getDisplayName()}\n` +
          `üí∞ **–°—É–º–º–∞:** ${amountPerActivation.toLocaleString()} GRAM\n` +
          `üè∑Ô∏è **–ö–æ–¥ —á–µ–∫–∞:** ${check.code}\n` +
          `üìä **–ê–∫—Ç–∏–≤–∞—Ü–∏–π:** ${check.currentActivations}/${check.maxActivations}`,
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        logger.warn('Failed to notify check creator:', error.message);
      }
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user.currentState = null;
    await user.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    let message = `üéâ **–ß–ï–ö –£–°–ü–ï–®–ù–û –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!**\n\n`;
    message += `üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** ${amountPerActivation.toLocaleString()} GRAM\n`;
    message += `üè∑Ô∏è **–ö–æ–¥ —á–µ–∫–∞:** ${check.code}\n`;
    
    if (check.comment) {
      message += `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${check.comment}\n`;
    }
    
    message += `\nüí≥ **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** ${user.balance?.toLocaleString()} GRAM\n`;
    message += `\nüôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–µ–∫–æ–≤!`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üí≥ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —á–µ–∫', callback_data: 'checks_create' },
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };

    await ctx.reply(message, {
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    });

    logger.userAction(user.telegramId, 'check_activated', {
      checkId: check.id,
      amount: amountPerActivation,
      newBalance: user.balance
    });

  } catch (error) {
    logger.error('Check activation error:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–æ–≤
export function setupCheckCreationConfirmHandlers(bot: Bot) {
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞
  bot.callbackQuery('confirm_create_check', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      const stateData = JSON.parse(user.currentState || '{}');
      const data: CheckCreationState = stateData.data;

      if (!data || !data.type || !data.totalAmount) {
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
      if (user.balance! < data.totalAmount) {
        await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —á–µ–∫
      const check = await Check.create({
        creatorId: user.id,
        code: Check.generateCode(),
        type: data.type,
        totalAmount: data.totalAmount,
        amountPerActivation: Math.floor(data.totalAmount / data.maxActivations!),
        maxActivations: data.maxActivations!,
        targetUserId: data.targetUserId,
        password: data.password,
        comment: data.comment,
        requiredSubscription: data.requiredSubscription
      });

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      await user.updateBalance(data.totalAmount, 'subtract');

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await Transaction.createCheckTransaction(user.id, data.totalAmount, user.balance! + data.totalAmount, check.id, true);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      user.currentState = null;
      await user.save();

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const checkMessage = `üí≥ **–ß–ï–ö –°–û–ó–î–ê–ù!**\n\n`;
      const checkContent = formatCheckMessage(check);

      let message = `‚úÖ **–ß–ï–ö –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!**\n\n`;
      message += `üè∑Ô∏è **–ö–æ–¥:** ${check.code}\n`;
      message += `üí∞ **–°—É–º–º–∞:** ${data.totalAmount.toLocaleString()} GRAM\n`;
      message += `üë• **–ê–∫—Ç–∏–≤–∞—Ü–∏–π:** ${data.maxActivations}\n`;
      message += `üíµ **–ù–∞ –∫–∞–∂–¥–æ–≥–æ:** ${check.amountPerActivation.toLocaleString()} GRAM\n\n`;
      message += `üí≥ **–û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞:** ${user.balance?.toLocaleString()} GRAM\n\n`;
      message += `üéâ –ß–µ–∫ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ª—é–±–æ–π —á–∞—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —á–µ–∫', callback_data: `forward_check_${check.id}` },
            { text: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥', callback_data: `copy_check_code_${check.id}` }
          ],
          [
            { text: 'üí≥ –°–æ–∑–¥–∞—Ç—å –µ—â–µ —á–µ–∫', callback_data: 'checks_create' },
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —á–µ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      await ctx.reply(checkContent, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üí∞ –ü–û–õ–£–ß–ò–¢–¨ GRAM', callback_data: `activate_check_${check.code}` }
          ]]
        }
      });

      await ctx.answerCallbackQuery('‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');

      logger.userAction(user.telegramId, 'check_created', {
        checkId: check.id,
        type: data.type,
        amount: data.totalAmount,
        activations: data.maxActivations
      });

    } catch (error) {
      logger.error('Create check confirmation error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞');
    }
  });

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
  bot.callbackQuery(/^activate_check_(.+)$/, requireAuth, async (ctx) => {
    try {
      const checkCode = ctx.match![1];
      const user = ctx.session!.user!;

      await handleCheckActivation(ctx, user, checkCode);
      await ctx.answerCallbackQuery();

    } catch (error) {
      logger.error('Activate check callback error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞');
    }
  });
}

function formatCheckMessage(check: Check): string {
  let message = `üí≥ **–ß–ï–ö –ù–ê GRAM**\n\n`;
  
  if (check.comment) {
    message += `üí¨ ${check.comment}\n\n`;
  }
  
  message += `üí∞ **${check.amountPerActivation.toLocaleString()} GRAM**\n`;
  message += `üë• –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: **${check.getRemainingActivations()}/${check.maxActivations}**\n`;
  message += `‚è∞ –°–æ–∑–¥–∞–Ω: ${check.createdAt.toLocaleDateString('ru-RU')}\n\n`;
  
  message += `üè∑Ô∏è **–ö–æ–¥ —á–µ–∫–∞:** \`${check.code}\`\n\n`;
  message += `üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`;
  
  return message;
}

export { handleCheckCreation };