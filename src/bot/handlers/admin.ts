// src/bot/handlers/admin.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –ó–ê–ì–õ–£–®–ï–ö
import { Bot, Context } from 'grammy';
import { adminMiddleware, isAdmin } from '../middlewares/admin';
import { logger } from '../../utils/logger';
import { EMOJIS } from '../../utils/constants';
import { getAdminPanelKeyboard } from '../keyboards/additional';
import { User, Task, TaskExecution, Transaction } from '../../database/models';
import { Op } from 'sequelize';
import { literal } from 'sequelize';
import { sequelize } from '../../database/config/database';

export function setupAdminHandlers(bot: Bot) {

  // –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  bot.callbackQuery('admin_panel', adminMiddleware, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      logger.userAction(user.telegramId, 'admin_panel_opened');

      // –ü–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const [
        totalUsers,
        totalTasks,
        pendingExecutions,
        totalBalance
      ] = await Promise.all([
        User.count(),
        Task.count(),
        TaskExecution.count({ where: { status: 'in_review' } }),
        User.sum('balance')
      ]);

      let message = `${EMOJIS.key} **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n`;
      message += `üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
      message += `‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers.toLocaleString()}\n`;
      message += `‚îú –ó–∞–¥–∞–Ω–∏–π: ${totalTasks.toLocaleString()}\n`;
      message += `‚îú –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${pendingExecutions}\n`;
      message += `‚îî –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${(totalBalance || 0).toLocaleString()} GRAM\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`;

      await ctx.editMessageText(message, {
        reply_markup: getAdminPanelKeyboard(),
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin panel error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  bot.callbackQuery('admin_general_stats', adminMiddleware, async (ctx) => {
    try {
      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const [
        totalUsers,
        activeUsers,
        newUsersToday,
        newUsersYesterday,
        premiumUsers,
        bannedUsers
      ] = await Promise.all([
        User.count(),
        User.count({ where: { isActive: true, isBanned: false } }),
        User.count({ where: { registeredAt: { [Op.gte]: today } } }),
        User.count({ where: { registeredAt: { [Op.gte]: yesterday, [Op.lt]: today } } }),
        User.count({ where: { isPremium: true } }),
        User.count({ where: { isBanned: true } })
      ]);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π
      const [
        totalTasks,
        activeTasks,
        tasksToday,
        completedTasks,
        expiredTasks
      ] = await Promise.all([
        Task.count(),
        Task.count({ where: { status: 'active' } }),
        Task.count({ where: { createdAt: { [Op.gte]: today } } }),
        Task.count({ where: { status: 'completed' } }),
        Task.count({ where: { status: 'expired' } })
      ]);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
      const [
        totalExecutions,
        completedExecutions,
        pendingExecutions,
        rejectedExecutions,
        executionsToday
      ] = await Promise.all([
        TaskExecution.count(),
        TaskExecution.count({ where: { status: { [Op.in]: ['completed', 'auto_approved'] } } }),
        TaskExecution.count({ where: { status: 'in_review' } }),
        TaskExecution.count({ where: { status: 'rejected' } }),
        TaskExecution.count({ where: { createdAt: { [Op.gte]: today } } })
      ]);

      // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const [
        totalBalance,
        totalTransactions,
        transactionsToday,
        totalVolume
      ] = await Promise.all([
        User.sum('balance'),
        Transaction.count({ where: { status: 'completed' } }),
        Transaction.count({ where: { createdAt: { [Op.gte]: today }, status: 'completed' } }),
        Transaction.sum('amount', { where: { status: 'completed' } })
      ]);

      let message = `üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n`;
      
      message += `üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n`;
      message += `‚îú –í—Å–µ–≥–æ: ${totalUsers.toLocaleString()}\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers.toLocaleString()}\n`;
      message += `‚îú –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${newUsersToday} (–≤—á–µ—Ä–∞: ${newUsersYesterday})\n`;
      message += `‚îú Premium: ${premiumUsers.toLocaleString()}\n`;
      message += `‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${bannedUsers}\n\n`;
      
      message += `üìã **–ó–∞–¥–∞–Ω–∏—è:**\n`;
      message += `‚îú –í—Å–µ–≥–æ: ${totalTasks.toLocaleString()}\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeTasks.toLocaleString()}\n`;
      message += `‚îú –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${completedTasks.toLocaleString()}\n`;
      message += `‚îú –ò—Å—Ç–µ–∫—à–∏—Ö: ${expiredTasks.toLocaleString()}\n`;
      message += `‚îî –°–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${tasksToday}\n\n`;
      
      message += `‚ö° **–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n`;
      message += `‚îú –í—Å–µ–≥–æ: ${totalExecutions.toLocaleString()}\n`;
      message += `‚îú –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${completedExecutions.toLocaleString()}\n`;
      message += `‚îú –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${pendingExecutions}\n`;
      message += `‚îú –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: ${rejectedExecutions}\n`;
      message += `‚îî –°–µ–≥–æ–¥–Ω—è: ${executionsToday}\n\n`;
      
      message += `üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**\n`;
      message += `‚îú –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${(totalBalance || 0).toLocaleString()} GRAM\n`;
      message += `‚îú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTransactions.toLocaleString()}\n`;
      message += `‚îú –°–µ–≥–æ–¥–Ω—è: ${transactionsToday}\n`;
      message += `‚îî –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: ${(totalVolume || 0).toLocaleString()} GRAM`;

      const keyboard = {
        inline_keyboard: [[
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_general_stats' },
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }
        ]]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin general stats error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  bot.callbackQuery('admin_users_management', adminMiddleware, async (ctx) => {
    try {
      let message = `üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò**\n\n`;
      message += `–§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'admin_user_search' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_user_stats' }
          ],
          [
            { text: 'üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'admin_user_top' },
            { text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', callback_data: 'admin_user_banned' }
          ],
          [
            { text: 'üíé Premium', callback_data: 'admin_user_premium' },
            { text: 'üìà –ù–æ–≤—ã–µ', callback_data: 'admin_user_new' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin users management error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.callbackQuery('admin_user_search', adminMiddleware, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      user.currentState = JSON.stringify({ action: 'admin_searching_user', data: {} });
      await user.save();

      let message = `üîç **–ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n`;
      message += `–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n`;
      message += `‚Ä¢ **Telegram ID** (—á–∏—Å–ª–æ–≤–æ–π ID)\n`;
      message += `‚Ä¢ **Username** (–±–µ–∑ @)\n`;
      message += `‚Ä¢ **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n`;
      message += `–ù–∞–ø—Ä–∏–º–µ—Ä: \`123456789\` –∏–ª–∏ \`username\``;

      const keyboard = {
        inline_keyboard: [[
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_users_management' }
        ]]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin user search error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  bot.callbackQuery('admin_user_stats', adminMiddleware, async (ctx) => {
    try {
      const now = new Date();
      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

      // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const [
        totalUsers,
        activeLastWeek,
        activeLastMonth,
        averageBalance,
        topBalanceUser,
        usersByLevel
      ] = await Promise.all([
        User.count(),
        User.count({ where: { lastActiveAt: { [Op.gte]: weekAgo } } }),
        User.count({ where: { lastActiveAt: { [Op.gte]: monthAgo } } }),
        User.findOne({
          attributes: [[sequelize.literal('AVG(balance)'), 'avgBalance']],
          raw: true
        }),
        User.findOne({
          order: [['balance', 'DESC']],
          attributes: ['balance', 'firstName', 'username']
        }),
        User.findAll({
          attributes: [
            'level',
            [sequelize.literal('COUNT(*)'), 'count']
          ],
          group: ['level'],
          raw: true
        })
      ]);

      let message = `üë• **–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n`;
      
      message += `üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n`;
      message += `‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers.toLocaleString()}\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${activeLastWeek.toLocaleString()}\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${activeLastMonth.toLocaleString()}\n`;
      message += `‚îî –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è: ${Math.round((activeLastWeek / totalUsers) * 100)}%\n\n`;
      
      message += `üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**\n`;
      message += `‚îú –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${Math.round((averageBalance as any)?.avgBalance || 0).toLocaleString()} GRAM\n`;
      message += `‚îú –¢–æ–ø –±–∞–ª–∞–Ω—Å: ${(topBalanceUser?.balance || 0).toLocaleString()} GRAM\n`;
      message += `‚îî –í–ª–∞–¥–µ–ª–µ—Ü: ${topBalanceUser?.firstName || topBalanceUser?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n`;
      
      message += `üèÜ **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:**\n`;
      usersByLevel.forEach((level: any) => {
        const levelName = level.level === 'bronze' ? '–ë—Ä–æ–Ω–∑–∞' : 
                         level.level === 'silver' ? '–°–µ—Ä–µ–±—Ä–æ' :
                         level.level === 'gold' ? '–ó–æ–ª–æ—Ç–æ' : '–ü—Ä–µ–º–∏—É–º';
        message += `‚îú ${levelName}: ${level.count}\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_user_stats' },
            { text: 'üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_user_top' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin user stats error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  bot.callbackQuery('admin_user_top', adminMiddleware, async (ctx) => {
    try {
      const [
        topByBalance,
        topByEarned,
        topByTasks,
        topByReferrals
      ] = await Promise.all([
        User.findAll({
          order: [['balance', 'DESC']],
          limit: 5,
          attributes: ['telegramId', 'firstName', 'username', 'balance']
        }),
        User.findAll({
          order: [['totalEarned', 'DESC']],
          limit: 5,
          attributes: ['telegramId', 'firstName', 'username', 'totalEarned']
        }),
        User.findAll({
          order: [['tasksCompleted', 'DESC']],
          limit: 5,
          attributes: ['telegramId', 'firstName', 'username', 'tasksCompleted']
        }),
        User.findAll({
          order: [['referralsCount', 'DESC']],
          limit: 5,
          attributes: ['telegramId', 'firstName', 'username', 'referralsCount']
        })
      ]);

      let message = `üèÜ **–¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n`;
      
      message += `üí∞ **–ü–æ –±–∞–ª–∞–Ω—Å—É:**\n`;
      topByBalance.forEach((user, i) => {
        const medal = i === 0 ? 'ü•á' : i === 1 ? 'ü•à' : i === 2 ? 'ü•â' : `${i + 1}.`;
        const name = user.firstName || user.username || `ID${user.telegramId}`;
        message += `${medal} ${name} - ${(user.balance || 0).toLocaleString()} GRAM\n`;
      });

      message += `\n‚ö° **–ü–æ –∑–∞–¥–∞–Ω–∏—è–º:**\n`;
      topByTasks.forEach((user, i) => {
        const medal = i === 0 ? 'ü•á' : i === 1 ? 'ü•à' : i === 2 ? 'ü•â' : `${i + 1}.`;
        const name = user.firstName || user.username || `ID${user.telegramId}`;
        message += `${medal} ${name} - ${user.tasksCompleted || 0} –∑–∞–¥–∞–Ω–∏–π\n`;
      });

      message += `\nü§ù **–ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:**\n`;
      topByReferrals.forEach((user, i) => {
        const medal = i === 0 ? 'ü•á' : i === 1 ? 'ü•à' : i === 2 ? 'ü•â' : `${i + 1}.`;
        const name = user.firstName || user.username || `ID${user.telegramId}`;
        message += `${medal} ${name} - ${user.referralsCount || 0} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_user_stats' },
            { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'admin_user_search' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin user top error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  bot.callbackQuery('admin_user_banned', adminMiddleware, async (ctx) => {
    try {
      const bannedUsers = await User.findAll({
        where: { isBanned: true },
        order: [['updatedAt', 'DESC']],
        limit: 10,
        attributes: ['id', 'telegramId', 'firstName', 'username', 'updatedAt']
      });

      let message = `üö´ **–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò** (${bannedUsers.length})\n\n`;

      if (bannedUsers.length === 0) {
        message += `‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`;
      } else {
        bannedUsers.forEach((user, i) => {
          const name = user.firstName || user.username || `ID${user.telegramId}`;
          const date = user.updatedAt.toLocaleDateString('ru-RU');
          message += `${i + 1}. ${name}\n`;
          message += `ID: ${user.telegramId}\n`;
          message += `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${date}\n\n`;
        });
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_user_banned' },
            { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'admin_user_search' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin banned users error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  bot.callbackQuery('admin_user_premium', adminMiddleware, async (ctx) => {
    try {
      const premiumUsers = await User.findAll({
        where: { isPremium: true },
        order: [['balance', 'DESC']],
        limit: 10,
        attributes: ['telegramId', 'firstName', 'username', 'balance', 'premiumExpiresAt']
      });

      let message = `üíé **PREMIUM –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò** (${premiumUsers.length})\n\n`;

      if (premiumUsers.length === 0) {
        message += `‚ÑπÔ∏è –ù–µ—Ç Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`;
      } else {
        premiumUsers.forEach((user, i) => {
          const name = user.firstName || user.username || `ID${user.telegramId}`;
          const expires = user.premiumExpiresAt ? 
            user.premiumExpiresAt.toLocaleDateString('ru-RU') : '–ë–µ—Å—Å—Ä–æ—á–Ω–æ';
          message += `${i + 1}. üíé ${name}\n`;
          message += `üí∞ ${(user.balance || 0).toLocaleString()} GRAM\n`;
          message += `üìÖ –î–æ: ${expires}\n\n`;
        });
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_user_premium' },
            { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'admin_user_search' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin premium users error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  bot.callbackQuery('admin_user_new', adminMiddleware, async (ctx) => {
    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const newUsers = await User.findAll({
        where: {
          registeredAt: { [Op.gte]: today }
        },
        order: [['registeredAt', 'DESC']],
        limit: 15,
        attributes: ['telegramId', 'firstName', 'username', 'registeredAt', 'referrerId'],
        include: [
          {
            model: User,
            as: 'referrer',
            attributes: ['firstName', 'username'],
            required: false
          }
        ]
      });

      let message = `üìà **–ù–û–í–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –°–ï–ì–û–î–ù–Ø** (${newUsers.length})\n\n`;

      if (newUsers.length === 0) {
        message += `‚ÑπÔ∏è –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.`;
      } else {
        newUsers.forEach((user, i) => {
          const name = user.firstName || user.username || `ID${user.telegramId}`;
          const time = user.registeredAt.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
          });
          const referrerName = user.referrer ? 
            (user.referrer.firstName || user.referrer.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') : 
            '–ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
          
          message += `${i + 1}. ${name}\n`;
          message += `‚è∞ ${time} | ü§ù ${referrerName}\n\n`;
        });
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_user_new' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_user_stats' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin new users error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π
  bot.callbackQuery('admin_tasks_pending', adminMiddleware, async (ctx) => {
    try {
      const pendingExecutions = await TaskExecution.findAll({
        where: { status: 'in_review' },
        include: [
          {
            model: Task,
            as: 'task',
            include: [{ model: User, as: 'author' }]
          },
          {
            model: User,
            as: 'user'
          }
        ],
        order: [['createdAt', 'ASC']],
        limit: 10
      });

      let message = `üîç **–ó–ê–î–ê–ù–ò–Ø –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò** (${pendingExecutions.length})\n\n`;

      if (pendingExecutions.length === 0) {
        message += `‚úÖ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.`;
      } else {
        pendingExecutions.forEach((execution, index) => {
          const task = execution.task;
          const user = execution.user;
          const timeAgo = Math.floor((Date.now() - execution.createdAt.getTime()) / (1000 * 60 * 60));
          
          message += `${index + 1}. **${task?.title || '–ó–∞–¥–∞–Ω–∏–µ'}**\n`;
          message += `üë§ ${user?.getDisplayName() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
          message += `üí∞ ${execution.rewardAmount} GRAM\n`;
          message += `‚è∞ ${timeAgo}—á –Ω–∞–∑–∞–¥\n`;
          message += `üîó /moderate_${execution.id}\n\n`;
        });
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_tasks_pending' },
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin tasks pending error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.on('message:text', async (ctx, next) => {
    try {
      const user = ctx.session?.user;
      if (!user || !isAdmin(user.telegramId)) {
        return next();
      }

      const stateData = JSON.parse(user.currentState || '{}');
      if (stateData.action !== 'admin_searching_user') {
        return next();
      }

      const searchTerm = ctx.message.text.trim();
      
      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let foundUser = null;
      
      // –ü–æ–∏—Å–∫ –ø–æ Telegram ID
      if (/^\d+$/.test(searchTerm)) {
        foundUser = await User.findOne({
          where: { telegramId: parseInt(searchTerm) }
        });
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ username
      if (!foundUser && searchTerm.length > 0) {
        foundUser = await User.findOne({
          where: { username: searchTerm.replace('@', '') }
        });
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
      if (!foundUser) {
        foundUser = await User.findOne({
          where: {
            [Op.or]: [
              { firstName: { [Op.iLike]: `%${searchTerm}%` } },
              { lastName: { [Op.iLike]: `%${searchTerm}%` } }
            ]
          }
        });
      }

      user.currentState = null;
      await user.save();

      if (!foundUser) {
        await ctx.reply(
          `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.`,
          {
            reply_markup: {
              inline_keyboard: [[
                { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'admin_user_search' },
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
              ]]
            }
          }
        );
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const referralsCount = await User.count({ where: { referrerId: foundUser.id } });
      const tasksCount = await Task.count({ where: { authorId: foundUser.id } });
      const executionsCount = await TaskExecution.count({ where: { userId: foundUser.id } });

      let message = `üë§ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï**\n\n`;
      message += `üÜî **ID:** ${foundUser.telegramId}\n`;
      message += `üë®‚Äçüíº **–ò–º—è:** ${foundUser.getDisplayName()}\n`;
      if (foundUser.username) {
        message += `üì± **Username:** @${foundUser.username}\n`;
      }
      message += `üèÜ **–£—Ä–æ–≤–µ–Ω—å:** ${foundUser.getLevelText()} ${foundUser.getLevelEmoji()}\n`;
      message += `üí∞ **–ë–∞–ª–∞–Ω—Å:** ${foundUser.balance?.toLocaleString() || 0} GRAM\n`;
      message += `üìä **–°—Ç–∞—Ç—É—Å:** ${foundUser.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
      if (foundUser.isBanned) {
        message += `üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:** –î–∞\n`;
      }
      message += `\nüìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n`;
      message += `‚îú –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${tasksCount}\n`;
      message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${executionsCount}\n`;
      message += `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralsCount}\n`;
      message += `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${foundUser.totalEarned?.toLocaleString() || 0} GRAM\n`;
      message += `‚îî –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${foundUser.totalSpent?.toLocaleString() || 0} GRAM\n\n`;
      message += `üìÖ **–î–∞—Ç—ã:**\n`;
      message += `‚îú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${foundUser.registeredAt.toLocaleDateString('ru-RU')}\n`;
      message += `‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${foundUser.lastActiveAt.toLocaleDateString('ru-RU')}`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: foundUser.isBanned ? '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 
              callback_data: `admin_user_${foundUser.isBanned ? 'unban' : 'ban'}_${foundUser.id}` },
            { text: foundUser.isPremium ? '‚≠ê –£–±—Ä–∞—Ç—å Premium' : 'üíé –î–∞—Ç—å Premium', 
              callback_data: `admin_user_${foundUser.isPremium ? 'unpremium' : 'premium'}_${foundUser.id}` }
          ],
          [
            { text: 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: `admin_user_balance_${foundUser.id}` },
            { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: `admin_user_detailed_${foundUser.id}` }
          ],
          [
            { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'admin_user_search' },
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
          ]
        ]
      };

      await ctx.reply(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

    } catch (error) {
      logger.error('Admin user search handler error:', error);
      await next();
    }
  });

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.callbackQuery(/^admin_user_ban_(\d+)$/, adminMiddleware, async (ctx) => {
    try {
      const userId = parseInt(ctx.match![1]);
      const targetUser = await User.findByPk(userId);
      
      if (!targetUser) {
        await ctx.answerCallbackQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      targetUser.isBanned = true;
      targetUser.isActive = false;
      await targetUser.save();

      logger.userAction(ctx.session!.user!.telegramId, 'admin_user_banned', { targetUserId: userId });

      await ctx.answerCallbackQuery(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.getDisplayName()} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      let message = `üë§ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù**\n\n`;
      message += `üÜî **ID:** ${targetUser.telegramId}\n`;
      message += `üë®‚Äçüíº **–ò–º—è:** ${targetUser.getDisplayName()}\n`;
      message += `üìä **–°—Ç–∞—Ç—É—Å:** üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n`;
      message += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: `admin_user_unban_${userId}` },
            { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'admin_user_search' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

    } catch (error) {
      logger.error('Admin ban user error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.callbackQuery(/^admin_user_unban_(\d+)$/, adminMiddleware, async (ctx) => {
    try {
      const userId = parseInt(ctx.match![1]);
      const targetUser = await User.findByPk(userId);
      
      if (!targetUser) {
        await ctx.answerCallbackQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      targetUser.isBanned = false;
      targetUser.isActive = true;
      await targetUser.save();

      logger.userAction(ctx.session!.user!.telegramId, 'admin_user_unbanned', { targetUserId: userId });

      await ctx.answerCallbackQuery(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.getDisplayName()} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = `üë§ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù**\n\n`;
      message += `üÜî **ID:** ${targetUser.telegramId}\n`;
      message += `üë®‚Äçüíº **–ò–º—è:** ${targetUser.getDisplayName()}\n`;
      message += `üìä **–°—Ç–∞—Ç—É—Å:** üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n\n`;
      message += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: `admin_user_ban_${userId}` },
            { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'admin_user_search' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

    } catch (error) {
      logger.error('Admin unban user error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –í—ã–¥–∞—á–∞ Premium
  bot.callbackQuery(/^admin_user_premium_(\d+)$/, adminMiddleware, async (ctx) => {
    try {
      const userId = parseInt(ctx.match![1]);
      const targetUser = await User.findByPk(userId);
      
      if (!targetUser) {
        await ctx.answerCallbackQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      targetUser.isPremium = true;
      const expiryDate = new Date();
      expiryDate.setDate(expiryDate.getDate() + 30);
      targetUser.premiumExpiresAt = expiryDate;

      await targetUser.save();

      logger.userAction(ctx.session!.user!.telegramId, 'admin_user_premium_granted', { targetUserId: userId });

      await ctx.answerCallbackQuery(`‚úÖ Premium –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUser.getDisplayName()}`);

      try {
        await ctx.api.sendMessage(
          targetUser.telegramId,
          `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–í–∞–º –≤—ã–¥–∞–Ω Premium —Å—Ç–∞—Ç—É—Å –Ω–∞ 30 –¥–Ω–µ–π!\n\nüíé –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π.`
        );
      } catch (notifyError) {
        logger.warn('Failed to notify user about premium:', notifyError);
      }
    } catch (error) {
      logger.error('Admin premium grant error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –°–Ω—è—Ç–∏–µ Premium
  bot.callbackQuery(/^admin_user_unpremium_(\d+)$/, adminMiddleware, async (ctx) => {
    try {
      const userId = parseInt(ctx.match![1]);
      const targetUser = await User.findByPk(userId);
      
      if (!targetUser) {
        await ctx.answerCallbackQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      targetUser.isPremium = false;
      targetUser.premiumExpiresAt = null;

      await targetUser.save();

      logger.userAction(ctx.session!.user!.telegramId, 'admin_user_premium_removed', { targetUserId: userId });

      await ctx.answerCallbackQuery(`‚úÖ Premium —Å–Ω—è—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.getDisplayName()}`);
    } catch (error) {
      logger.error('Admin unpremium error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  bot.callbackQuery(/^admin_user_balance_(\d+)$/, adminMiddleware, async (ctx) => {
    try {
      const userId = parseInt(ctx.match![1]);
      const user = ctx.session!.user!;
      
      user.currentState = JSON.stringify({ 
        action: 'admin_changing_balance', 
        data: { targetUserId: userId } 
      });
      await user.save();

      const targetUser = await User.findByPk(userId);
      if (!targetUser) {
        await ctx.answerCallbackQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      let message = `üí∞ **–ò–ó–ú–ï–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê**\n\n`;
      message += `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${targetUser.getDisplayName()}\n`;
      message += `üí≥ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** ${targetUser.balance?.toLocaleString() || 0} GRAM\n\n`;
      message += `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n\n`;
      message += `**–ü—Ä–∏–º–µ—Ä—ã:**\n`;
      message += `‚Ä¢ \`+1000\` - –¥–æ–±–∞–≤–∏—Ç—å 1000 GRAM\n`;
      message += `‚Ä¢ \`-500\` - —É–±—Ä–∞—Ç—å 500 GRAM\n`;
      message += `‚Ä¢ \`5000\` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å 5000 GRAM`;

      const keyboard = {
        inline_keyboard: [[
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_users_management' }
        ]]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin change balance error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –†–∞—Å—Å—ã–ª–∫–∞
  bot.callbackQuery('admin_broadcast', adminMiddleware, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      user.currentState = JSON.stringify({ action: 'admin_creating_broadcast', data: {} });
      await user.save();

      let message = `üì¢ **–°–û–ó–î–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**\n\n`;
      message += `–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n`;
      message += `**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n`;
      message += `‚Ä¢ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**\n`;
      message += `‚Ä¢ *–∫—É—Ä—Å–∏–≤*\n`;
      message += `‚Ä¢ \`–∫–æ–¥\`\n`;
      message += `‚Ä¢ [—Å—Å—ã–ª–∫–∏](https://example.com)\n\n`;
      message += `‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!`;

      const keyboard = {
        inline_keyboard: [[
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_panel' }
        ]]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin broadcast error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  bot.on('message:text', async (ctx, next) => {
    try {
      const user = ctx.session?.user;
      if (!user || !isAdmin(user.telegramId)) {
        return next();
      }

      const stateData = JSON.parse(user.currentState || '{}');
      
      if (stateData.action === 'admin_creating_broadcast') {
        await handleBroadcastCreation(ctx, user);
        return;
      } else if (stateData.action === 'admin_changing_balance') {
        await handleBalanceChange(ctx, user, stateData.data);
        return;
      }
      
      await next();
    } catch (error) {
      logger.error('Admin text handler error:', error);
      await next();
    }
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
  bot.callbackQuery(/^confirm_broadcast_(.+)$/, adminMiddleware, async (ctx) => {
    try {
      const encodedText = ctx.match![1];
      const broadcastText = Buffer.from(encodedText, 'base64').toString();

      await ctx.editMessageText('üì§ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...**\n\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...', {
        parse_mode: 'Markdown'
      });

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
      const users = await User.findAll({
        where: { 
          isActive: true,
          isBanned: false
        },
        attributes: ['telegramId']
      });

      let sent = 0;
      let failed = 0;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏
      const chunkSize = 30; // 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É (–ª–∏–º–∏—Ç Telegram)
      for (let i = 0; i < users.length; i += chunkSize) {
        const chunk = users.slice(i, i + chunkSize);
        
        await Promise.all(
          chunk.map(async (user) => {
            try {
              await ctx.api.sendMessage(user.telegramId, broadcastText, { parse_mode: 'Markdown' });
              sent++;
            } catch (error: unknown) {
              failed++;
              logger.warn(`Broadcast failed for user ${user.telegramId}:`, error);
            }
          })
        );

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Ä—Ü–∏—è–º–∏
        if (i + chunkSize < users.length) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      const finalMessage = `‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n` +
                          `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent.toLocaleString()}\n` +
                          `‚ùå –û—à–∏–±–æ–∫: ${failed.toLocaleString()}\n` +
                          `üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((sent / users.length) * 100)}%`;

      await ctx.editMessageText(finalMessage, {
        reply_markup: {
          inline_keyboard: [[
            { text: '‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_panel' }
          ]]
        },
        parse_mode: 'Markdown'
      });

      logger.userAction(ctx.session!.user!.telegramId, 'admin_broadcast_sent', { 
        sent, 
        failed, 
        total: users.length,
        text: broadcastText.substring(0, 100)
      });

      await ctx.answerCallbackQuery(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${sent}/${users.length}`);

    } catch (error) {
      logger.error('Confirm broadcast error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ');
    }
  });

  logger.info('‚úÖ Admin handlers configured');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function handleBroadcastCreation(ctx: Context, user: User) {
  const broadcastText = ctx.message!.text!;

  user.currentState = null;
  await user.save();

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = await User.findAll({
    where: { 
      isActive: true,
      isBanned: false
    },
    attributes: ['telegramId']
  });

  let message = `üì¢ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**\n\n`;
  message += `**–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** ${users.length.toLocaleString()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n`;
  message += `**–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**\n`;
  message += `${broadcastText}\n\n`;
  message += `‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data: `confirm_broadcast_${Buffer.from(broadcastText).toString('base64')}` },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_panel' }
      ]
    ]
  };

  await ctx.reply(message, {
    reply_markup: keyboard,
    parse_mode: 'Markdown'
  });
}

async function handleBalanceChange(ctx: Context, user: User, data: any) {
  const input = ctx.message!.text!.trim();
  const targetUserId = data.targetUserId;

  user.currentState = null;
  await user.save();

  const targetUser = await User.findByPk(targetUserId);
  if (!targetUser) {
    await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }

  let amount: number;
  let operation: 'add' | 'subtract' | 'set' = 'set';

  if (input.startsWith('+')) {
    amount = parseInt(input.substring(1));
    operation = 'add';
  } else if (input.startsWith('-')) {
    amount = parseInt(input.substring(1));
    operation = 'subtract';
  } else {
    amount = parseInt(input);
    operation = 'set';
  }

  if (isNaN(amount) || amount < 0) {
    await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.');
    return;
  }

  const oldBalance = targetUser.balance || 0;
  let newBalance: number;

  try {
    switch (operation) {
      case 'add':
        newBalance = oldBalance + amount;
        await targetUser.updateBalance(amount, 'add');
        break;
      case 'subtract':
        if (oldBalance < amount) {
          await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë–∞–ª–∞–Ω—Å: ${oldBalance} GRAM`);
          return;
        }
        newBalance = oldBalance - amount;
        await targetUser.updateBalance(amount, 'subtract');
        break;
      case 'set':
        newBalance = amount;
        targetUser.balance = amount;
        await targetUser.save();
        break;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    await Transaction.create({
      userId: targetUser.id,
      type: operation === 'add' ? 'admin_bonus' : operation === 'subtract' ? 'admin_deduction' : 'admin_adjustment',
      amount: Math.abs(newBalance - oldBalance),
      balanceBefore: oldBalance,
      balanceAfter: newBalance,
      description: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`,
      status: 'completed',
      processedAt: new Date()
    });

    let message = `‚úÖ **–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω!**\n\n`;
    message += `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${targetUser.getDisplayName()}\n`;
    message += `üí∞ **–ë—ã–ª–æ:** ${oldBalance.toLocaleString()} GRAM\n`;
    message += `üí≥ **–°—Ç–∞–ª–æ:** ${newBalance.toLocaleString()} GRAM\n`;
    message += `üìä **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** ${operation === 'add' ? '+' : operation === 'subtract' ? '-' : ''}${Math.abs(newBalance - oldBalance).toLocaleString()} GRAM`;

    await ctx.reply(message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ', callback_data: 'admin_user_search' },
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
          ]
        ]
      },
      parse_mode: 'Markdown'
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const changeText = operation === 'add' ? '—É–≤–µ–ª–∏—á–µ–Ω' : operation === 'subtract' ? '—É–º–µ–Ω—å—à–µ–Ω' : '–∏–∑–º–µ–Ω–µ–Ω';
      await ctx.api.sendMessage(
        targetUser.telegramId,
        `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å ${changeText}**\n\n` +
        `–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance.toLocaleString()} GRAM\n\n` +
        `–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–Ω–µ—Å–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`
      );
    } catch (notifyError) {
      logger.warn('Failed to notify user about balance change:', notifyError);
    }

    logger.userAction(user.telegramId, 'admin_balance_changed', {
      targetUserId: targetUser.id,
      oldBalance,
      newBalance,
      operation,
      amount
    });

  } catch (error) {
    logger.error('Balance change error:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
  }
}