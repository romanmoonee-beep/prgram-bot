// src/bot/handlers/admin.ts
import { Bot, Context } from 'grammy';
import { adminMiddleware, isAdmin } from '../middlewares/admin';
import { logger } from '../../utils/logger';
import { EMOJIS } from '../../utils/constants';
import { getAdminPanelKeyboard } from '../keyboards/additional';
import { User, Task, TaskExecution, Transaction } from '../../database/models';
import { Op } from 'sequelize';

export function setupAdminHandlers(bot: Bot) {

  // –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  bot.callbackQuery('admin_panel', adminMiddleware, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      logger.userAction(user.telegramId, 'admin_panel_opened');

      // –ü–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const [
        totalUsers,
        totalTasks,
        pendingExecutions,
        totalBalance
      ] = await Promise.all([
        User.count(),
        Task.count(),
        TaskExecution.count({ where: { status: 'in_review' } }),
        User.sum('balance')
      ]);

      let message = `${EMOJIS.key} **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n`;
      message += `üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
      message += `‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers.toLocaleString()}\n`;
      message += `‚îú –ó–∞–¥–∞–Ω–∏–π: ${totalTasks.toLocaleString()}\n`;
      message += `‚îú –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${pendingExecutions}\n`;
      message += `‚îî –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${(totalBalance || 0).toLocaleString()} GRAM\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`;

      await ctx.editMessageText(message, {
        reply_markup: getAdminPanelKeyboard(),
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin panel error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  bot.callbackQuery('admin_general_stats', adminMiddleware, async (ctx) => {
    try {
      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const [
        totalUsers,
        activeUsers,
        newUsersToday,
        newUsersYesterday,
        premiumUsers,
        bannedUsers
      ] = await Promise.all([
        User.count(),
        User.count({ where: { isActive: true, isBanned: false } }),
        User.count({ where: { registeredAt: { [Op.gte]: today } } }),
        User.count({ where: { registeredAt: { [Op.gte]: yesterday, [Op.lt]: today } } }),
        User.count({ where: { isPremium: true } }),
        User.count({ where: { isBanned: true } })
      ]);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π
      const [
        totalTasks,
        activeTasks,
        tasksToday,
        completedTasks,
        expiredTasks
      ] = await Promise.all([
        Task.count(),
        Task.count({ where: { status: 'active' } }),
        Task.count({ where: { createdAt: { [Op.gte]: today } } }),
        Task.count({ where: { status: 'completed' } }),
        Task.count({ where: { status: 'expired' } })
      ]);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
      const [
        totalExecutions,
        completedExecutions,
        pendingExecutions,
        rejectedExecutions,
        executionsToday
      ] = await Promise.all([
        TaskExecution.count(),
        TaskExecution.count({ where: { status: ['completed', 'auto_approved'] } }),
        TaskExecution.count({ where: { status: 'in_review' } }),
        TaskExecution.count({ where: { status: 'rejected' } }),
        TaskExecution.count({ where: { createdAt: { [Op.gte]: today } } })
      ]);

      // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const [
        totalBalance,
        totalTransactions,
        transactionsToday,
        totalVolume
      ] = await Promise.all([
        User.sum('balance'),
        Transaction.count({ where: { status: 'completed' } }),
        Transaction.count({ where: { createdAt: { [Op.gte]: today }, status: 'completed' } }),
        Transaction.sum('amount', { where: { status: 'completed' } })
      ]);

      let message = `üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n`;
      
      message += `üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n`;
      message += `‚îú –í—Å–µ–≥–æ: ${totalUsers.toLocaleString()}\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers.toLocaleString()}\n`;
      message += `‚îú –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${newUsersToday} (–≤—á–µ—Ä–∞: ${newUsersYesterday})\n`;
      message += `‚îú Premium: ${premiumUsers.toLocaleString()}\n`;
      message += `‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${bannedUsers}\n\n`;
      
      message += `üìã **–ó–∞–¥–∞–Ω–∏—è:**\n`;
      message += `‚îú –í—Å–µ–≥–æ: ${totalTasks.toLocaleString()}\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeTasks.toLocaleString()}\n`;
      message += `‚îú –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${completedTasks.toLocaleString()}\n`;
      message += `‚îú –ò—Å—Ç–µ–∫—à–∏—Ö: ${expiredTasks.toLocaleString()}\n`;
      message += `‚îî –°–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${tasksToday}\n\n`;
      
      message += `‚ö° **–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n`;
      message += `‚îú –í—Å–µ–≥–æ: ${totalExecutions.toLocaleString()}\n`;
      message += `‚îú –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${completedExecutions.toLocaleString()}\n`;
      message += `‚îú –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${pendingExecutions}\n`;
      message += `‚îú –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: ${rejectedExecutions}\n`;
      message += `‚îî –°–µ–≥–æ–¥–Ω—è: ${executionsToday}\n\n`;
      
      message += `üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**\n`;
      message += `‚îú –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${(totalBalance || 0).toLocaleString()} GRAM\n`;
      message += `‚îú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTransactions.toLocaleString()}\n`;
      message += `‚îú –°–µ–≥–æ–¥–Ω—è: ${transactionsToday}\n`;
      message += `‚îî –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: ${(totalVolume || 0).toLocaleString()} GRAM`;

      const keyboard = {
        inline_keyboard: [[
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_general_stats' },
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }
        ]]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin general stats error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  bot.callbackQuery('admin_users_management', adminMiddleware, async (ctx) => {
    try {
      let message = `üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò**\n\n`;
      message += `–§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'admin_user_search' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_user_stats' }
          ],
          [
            { text: 'üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'admin_user_top' },
            { text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', callback_data: 'admin_user_banned' }
          ],
          [
            { text: 'üíé Premium', callback_data: 'admin_user_premium' },
            { text: 'üìà –ù–æ–≤—ã–µ', callback_data: 'admin_user_new' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin users management error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.callbackQuery('admin_user_search', adminMiddleware, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      user.currentState = JSON.stringify({ action: 'admin_searching_user', data: {} });
      await user.save();

      let message = `üîç **–ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n`;
      message += `–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n`;
      message += `‚Ä¢ **Telegram ID** (—á–∏—Å–ª–æ–≤–æ–π ID)\n`;
      message += `‚Ä¢ **Username** (–±–µ–∑ @)\n`;
      message += `‚Ä¢ **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n`;
      message += `–ù–∞–ø—Ä–∏–º–µ—Ä: \`123456789\` –∏–ª–∏ \`username\``;

      const keyboard = {
        inline_keyboard: [[
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_users_management' }
        ]]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin user search error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π
  bot.callbackQuery('admin_tasks_pending', adminMiddleware, async (ctx) => {
    try {
      const pendingExecutions = await TaskExecution.findAll({
        where: { status: 'in_review' },
        include: [
          {
            model: Task,
            as: 'task',
            include: [{ model: User, as: 'author' }]
          },
          {
            model: User,
            as: 'user'
          }
        ],
        order: [['createdAt', 'ASC']],
        limit: 10
      });

      let message = `üîç **–ó–ê–î–ê–ù–ò–Ø –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò** (${pendingExecutions.length})\n\n`;

      if (pendingExecutions.length === 0) {
        message += `‚úÖ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.`;
      } else {
        pendingExecutions.forEach((execution, index) => {
          const task = execution.task;
          const user = execution.user;
          const timeAgo = Math.floor((Date.now() - execution.createdAt.getTime()) / (1000 * 60 * 60));
          
          message += `${index + 1}. **${task?.title || '–ó–∞–¥–∞–Ω–∏–µ'}**\n`;
          message += `üë§ ${user?.getDisplayName() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
          message += `üí∞ ${execution.rewardAmount} GRAM\n`;
          message += `‚è∞ ${timeAgo}—á –Ω–∞–∑–∞–¥\n`;
          message += `üîó /moderate_${execution.id}\n\n`;
        });
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_tasks_pending' },
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin tasks pending error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.on('message:text', async (ctx, next) => {
    try {
      const user = ctx.session?.user;
      if (!user || !isAdmin(user.telegramId)) {
        return next();
      }

      const stateData = JSON.parse(user.currentState || '{}');
      if (stateData.action !== 'admin_searching_user') {
        return next();
      }

      const searchTerm = ctx.message.text.trim();
      
      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let foundUser = null;
      
      // –ü–æ–∏—Å–∫ –ø–æ Telegram ID
      if (/^\d+$/.test(searchTerm)) {
        foundUser = await User.findOne({
          where: { telegramId: parseInt(searchTerm) }
        });
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ username
      if (!foundUser && searchTerm.length > 0) {
        foundUser = await User.findOne({
          where: { username: searchTerm.replace('@', '') }
        });
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
      if (!foundUser) {
        foundUser = await User.findOne({
          where: {
            [Op.or]: [
              { firstName: { [Op.iLike]: `%${searchTerm}%` } },
              { lastName: { [Op.iLike]: `%${searchTerm}%` } }
            ]
          }
        });
      }

      user.currentState = null;
      await user.save();

      if (!foundUser) {
        await ctx.reply(
          `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.`,
          {
            reply_markup: {
              inline_keyboard: [[
                { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'admin_user_search' },
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
              ]]
            }
          }
        );
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const referralsCount = await User.count({ where: { referrerId: foundUser.id } });
      const tasksCount = await Task.count({ where: { authorId: foundUser.id } });
      const executionsCount = await TaskExecution.count({ where: { userId: foundUser.id } });

      let message = `üë§ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï**\n\n`;
      message += `üÜî **ID:** ${foundUser.telegramId}\n`;
      message += `üë®‚Äçüíº **–ò–º—è:** ${foundUser.getDisplayName()}\n`;
      if (foundUser.username) {
        message += `üì± **Username:** @${foundUser.username}\n`;
      }
      message += `üèÜ **–£—Ä–æ–≤–µ–Ω—å:** ${foundUser.getLevelText()} ${foundUser.getLevelEmoji()}\n`;
      message += `üí∞ **–ë–∞–ª–∞–Ω—Å:** ${foundUser.balance?.toLocaleString() || 0} GRAM\n`;
      message += `üìä **–°—Ç–∞—Ç—É—Å:** ${foundUser.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
      if (foundUser.isBanned) {
        message += `üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:** –î–∞\n`;
      }
      message += `\nüìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n`;
      message += `‚îú –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${tasksCount}\n`;
      message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${executionsCount}\n`;
      message += `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralsCount}\n`;
      message += `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${foundUser.totalEarned?.toLocaleString() || 0} GRAM\n`;
      message += `‚îî –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${foundUser.totalSpent?.toLocaleString() || 0} GRAM\n\n`;
      message += `üìÖ **–î–∞—Ç—ã:**\n`;
      message += `‚îú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${foundUser.registeredAt.toLocaleDateString('ru-RU')}\n`;
      message += `‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${foundUser.lastActiveAt.toLocaleDateString('ru-RU')}`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: foundUser.isBanned ? '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 
              callback_data: `admin_user_${foundUser.isBanned ? 'unban' : 'ban'}_${foundUser.id}` },
            { text: foundUser.isPremium ? '‚≠ê –£–±—Ä–∞—Ç—å Premium' : 'üíé –î–∞—Ç—å Premium', 
              callback_data: `admin_user_${foundUser.isPremium ? 'unpremium' : 'premium'}_${foundUser.id}` }
          ],
          [
            { text: 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: `admin_user_balance_${foundUser.id}` },
            { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: `admin_user_detailed_${foundUser.id}` }
          ],
          [
            { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'admin_user_search' },
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users_management' }
          ]
        ]
      };

      await ctx.reply(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

    } catch (error) {
      logger.error('Admin user search handler error:', error);
      await next();
    }
  });

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.callbackQuery(/^admin_user_ban_(\d+)$/, adminMiddleware, async (ctx) => {
    try {
      const userId = parseInt(ctx.match![1]);
      const targetUser = await User.findByPk(userId);
      
      if (!targetUser) {
        await ctx.answerCallbackQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      targetUser.isBanned = true;
      targetUser.isActive = false;
      await targetUser.save();

      logger.userAction(ctx.session!.user!.telegramId, 'admin_user_banned', { targetUserId: userId });

      await ctx.answerCallbackQuery(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.getDisplayName()} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      ctx.callbackQuery.data = 'admin_user_search';
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    } catch (error) {
      logger.error('Admin ban user error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.callbackQuery(/^admin_user_unban_(\d+)$/, adminMiddleware, async (ctx) => {
    try {
      const userId = parseInt(ctx.match![1]);
      const targetUser = await User.findByPk(userId);
      
      if (!targetUser) {
        await ctx.answerCallbackQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      targetUser.isBanned = false;
      targetUser.isActive = true;
      await targetUser.save();

      logger.userAction(ctx.session!.user!.telegramId, 'admin_user_unbanned', { targetUserId: userId });

      await ctx.answerCallbackQuery(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.getDisplayName()} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);

    } catch (error) {
      logger.error('Admin unban user error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –†–∞—Å—Å—ã–ª–∫–∞
  bot.callbackQuery('admin_broadcast', adminMiddleware, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      user.currentState = JSON.stringify({ action: 'admin_creating_broadcast', data: {} });
      await user.save();

      let message = `üì¢ **–°–û–ó–î–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**\n\n`;
      message += `–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n`;
      message += `**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n`;
      message += `‚Ä¢ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**\n`;
      message += `‚Ä¢ *–∫—É—Ä—Å–∏–≤*\n`;
      message += `‚Ä¢ \`–∫–æ–¥\`\n`;
      message += `‚Ä¢ [—Å—Å—ã–ª–∫–∏](https://example.com)\n\n`;
      message += `‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!`;

      const keyboard = {
        inline_keyboard: [[
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_panel' }
        ]]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Admin broadcast error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
  bot.on('message:text', async (ctx, next) => {
    try {
      const user = ctx.session?.user;
      if (!user || !isAdmin(user.telegramId)) {
        return next();
      }

      const stateData = JSON.parse(user.currentState || '{}');
      if (stateData.action !== 'admin_creating_broadcast') {
        return next();
      }

      const broadcastText = ctx.message.text;

      user.currentState = null;
      await user.save();

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await User.findAll({
        where: { 
          isActive: true,
          isBanned: false
        },
        attributes: ['telegramId']
      });

      let message = `üì¢ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**\n\n`;
      message += `**–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** ${users.length.toLocaleString()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n`;
      message += `**–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**\n`;
      message += `${broadcastText}\n\n`;
      message += `‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏:`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data: `confirm_broadcast_${Buffer.from(broadcastText).toString('base64')}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_panel' }
          ]
        ]
      };

      await ctx.reply(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

    } catch (error) {
      logger.error('Admin broadcast handler error:', error);
      await next();
    }
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
  bot.callbackQuery(/^confirm_broadcast_(.+)$/, adminMiddleware, async (ctx) => {
    try {
      const encodedText = ctx.match![1];
      const broadcastText = Buffer.from(encodedText, 'base64').toString();

      await ctx.editMessageText('üì§ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...**\n\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...', {
        parse_mode: 'Markdown'
      });

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
      const users = await User.findAll({
        where: { 
          isActive: true,
          isBanned: false
        },
        attributes: ['telegramId']
      });

      let sent = 0;
      let failed = 0;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏
      const chunkSize = 30; // 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É (–ª–∏–º–∏—Ç Telegram)
      for (let i = 0; i < users.length; i += chunkSize) {
        const chunk = users.slice(i, i + chunkSize);
        
        await Promise.all(
          chunk.map(async (user) => {
            try {
              await ctx.api.sendMessage(user.telegramId, broadcastText, { parse_mode: 'Markdown' });
              sent++;
            } catch (error) {
              failed++;
              logger.warn(`Broadcast failed for user ${user.telegramId}:`, error.message);
            }
          })
        );

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Ä—Ü–∏—è–º–∏
        if (i + chunkSize < users.length) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      const finalMessage = `‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n` +
                          `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent.toLocaleString()}\n` +
                          `‚ùå –û—à–∏–±–æ–∫: ${failed.toLocaleString()}\n` +
                          `üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((sent / users.length) * 100)}%`;

      await ctx.editMessageText(finalMessage, {
        reply_markup: {
          inline_keyboard: [[
            { text: '‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_panel' }
          ]]
        },
        parse_mode: 'Markdown'
      });

      logger.userAction(ctx.session!.user!.telegramId, 'admin_broadcast_sent', { 
        sent, 
        failed, 
        total: users.length,
        text: broadcastText.substring(0, 100)
      });

      await ctx.answerCallbackQuery(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${sent}/${users.length}`);

    } catch (error) {
      logger.error('Confirm broadcast error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ');
    }
  });

  logger.info('‚úÖ Admin handlers configured');
}