// src/bot/handlers/taskCreationFixed.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–ô
import { Bot, Context } from 'grammy';
import { requireAuth } from '../middlewares/auth';
import { logger } from '../../utils/logger';
import { EMOJIS } from '../../utils/constants';
import { User, Task } from '../../database/models';

// –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram —Å—Å—ã–ª–∫–∏
function validateTelegramLink(url: string): { isValid: boolean; error?: string } {
  if (!url || typeof url !== 'string') {
    return { isValid: false, error: '–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π' };
  }

  const trimmedUrl = url.trim();
  
  if (!trimmedUrl.startsWith('https://t.me/')) {
    return { isValid: false, error: '–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/' };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
  const channelMatch = trimmedUrl.match(/^https:\/\/t\.me\/([a-zA-Z0-9_]{5,32})$/);
  if (channelMatch) {
    return { isValid: true };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å—Ç
  const postMatch = trimmedUrl.match(/^https:\/\/t\.me\/([a-zA-Z0-9_]{5,32})\/(\d+)$/);
  if (postMatch) {
    return { isValid: true };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞
  const botMatch = trimmedUrl.match(/^https:\/\/t\.me\/([a-zA-Z0-9_]{5,32}bot)$/);
  if (botMatch) {
    return { isValid: true };
  }

  return { 
    isValid: false, 
    error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://t.me/channel_name –∏–ª–∏ https://t.me/channel/123' 
  };
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–æ–≤
function validatePostLink(url: string): { isValid: boolean; error?: string } {
  if (!url || typeof url !== 'string') {
    return { isValid: false, error: '–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π' };
  }

  const trimmedUrl = url.trim();
  
  if (!trimmedUrl.startsWith('https://t.me/')) {
    return { isValid: false, error: '–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/' };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –Ω–æ–º–µ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è)
  const postMatch = trimmedUrl.match(/^https:\/\/t\.me\/([a-zA-Z0-9_]{5,32})\/(\d+)$/);
  if (postMatch) {
    return { isValid: true };
  }

  return { 
    isValid: false, 
    error: '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: https://t.me/channel_name/123' 
  };
}

export function setupTaskCreationHandlers(bot: Bot) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
  bot.on('message:text', requireAuth, async (ctx, next) => {
    try {
      const user = ctx.session!.user!;
      
      if (!user.currentState) {
        await next();
        return;
      }

      let stateData;
      try {
        stateData = JSON.parse(user.currentState);
      } catch {
        // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—á–∏—â–∞–µ–º –µ–≥–æ
        user.currentState = null;
        await user.save();
        await next();
        return;
      }

      const action = stateData.action;
      const data = stateData.data || {};
      
      if (!action || !action.startsWith('creating_')) {
        await next();
        return;
      }

      await handleTaskCreationStep(ctx, user, action, data);
      return;
      
    } catch (error) {
      logger.error('Task creation text handler error:', error);
      await next();
    }
  });
}

async function handleTaskCreationStep(ctx: Context, user: User, action: string, data: any) {
  const text = ctx.message!.text!.trim();
  
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
    if (!data.targetUrl) {
      // –®–∞–≥ 1: –°—Å—ã–ª–∫–∞
      const isPost = action.includes('view_post') || action.includes('react_post');
      const validation = isPost ? validatePostLink(text) : validateTelegramLink(text);
      
      if (!validation.isValid) {
        await ctx.reply(`‚ùå ${validation.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
            ]
          }
        });
        return;
      }
      
      data.targetUrl = text;
      await askForTitle(ctx, user, action, data);
      
    } else if (!data.title) {
      // –®–∞–≥ 2: –ù–∞–∑–≤–∞–Ω–∏–µ
      if (text.length < 3 || text.length > 100) {
        await ctx.reply(`‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
            ]
          }
        });
        return;
      }
      
      data.title = text;
      await askForDescription(ctx, user, action, data);
      
    } else if (!data.hasOwnProperty('description')) {
      // –®–∞–≥ 3: –û–ø–∏—Å–∞–Ω–∏–µ
      if (text === '/skip') {
        data.description = '';
      } else if (text.length > 500) {
        await ctx.reply(`‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip:`, {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '/skip –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_description' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }
              ]
            ]
          }
        });
        return;
      } else {
        data.description = text;
      }
      
      await askForReward(ctx, user, action, data);
      
    } else if (!data.reward) {
      // –®–∞–≥ 4: –ù–∞–≥—Ä–∞–¥–∞
      const reward = parseInt(text);
      const { minReward, maxReward } = getRewardLimits(getTaskTypeFromAction(action));
      
      if (isNaN(reward) || reward < minReward || reward > maxReward) {
        await ctx.reply(`‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${minReward} –¥–æ ${maxReward} GRAM.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
            ]
          }
        });
        return;
      }
      
      data.reward = reward;
      await askForExecutions(ctx, user, action, data);
      
    } else if (!data.totalExecutions) {
      // –®–∞–≥ 5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
      const executions = parseInt(text);
      
      if (isNaN(executions) || executions < 5 || executions > 1000) {
        await ctx.reply(`‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 –¥–æ 1000.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
            ]
          }
        });
        return;
      }
      
      data.totalExecutions = executions;
      await showTaskPreview(ctx, user, action, data);
    }
    
  } catch (error) {
    logger.error('Handle task creation step error:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    });
  }
}

async function askForTitle(ctx: Context, user: User, action: string, data: any) {
  user.currentState = JSON.stringify({ action, data });
  await user.save();

  let message = `‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n`;
  message += `üìù **–®–∞–≥ 2/5: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è**\n\n`;
  message += `–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n\n`;
  message += `**–ü—Ä–∏–º–µ—Ä—ã:**\n`;
  message += `‚Ä¢ "–ö—Ä–∏–ø—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"\n`;
  message += `‚Ä¢ "–û–±–∑–æ—Ä—ã —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤"\n`;
  message += `‚Ä¢ "–ò–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ"\n\n`;
  message += `–ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:`;

  await ctx.reply(message, { 
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
      ]
    }
  });
}

async function askForDescription(ctx: Context, user: User, action: string, data: any) {
  user.currentState = JSON.stringify({ action, data });
  await user.save();

  let message = `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n`;
  message += `üìù **–®–∞–≥ 3/5: –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)**\n\n`;
  message += `–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É/–±–æ—Ç–∞ —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n`;
  message += `**–ß—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å:**\n`;
  message += `‚Ä¢ –¢–µ–º–∞—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n`;
  message += `‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n`;
  message += `‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n`;
  message += `–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:`;

  await ctx.reply(message, { 
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: '/skip –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_description' },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }
        ]
      ]
    }
  });
}

async function askForReward(ctx: Context, user: User, action: string, data: any) {
  user.currentState = JSON.stringify({ action, data });
  await user.save();

  const taskType = getTaskTypeFromAction(action);
  const { minReward, maxReward } = getRewardLimits(taskType);

  let message = `‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n`;
  message += `üí∞ **–®–∞–≥ 4/5: –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ**\n\n`;
  message += `–ß–µ–º –≤—ã—à–µ –Ω–∞–≥—Ä–∞–¥–∞, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –≤—ã–ø–æ–ª–Ω—è—Ç –∑–∞–¥–∞–Ω–∏–µ.\n\n`;
  message += `**–î–∏–∞–ø–∞–∑–æ–Ω:** ${minReward}-${maxReward} GRAM\n`;
  message += `**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ:** ${Math.floor((minReward + maxReward) / 2)} GRAM\n\n`;
  message += `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã:`;

  await ctx.reply(message, { 
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
      ]
    }
  });
}

async function askForExecutions(ctx: Context, user: User, action: string, data: any) {
  user.currentState = JSON.stringify({ action, data });
  await user.save();

  let message = `‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n`;
  message += `üë• **–®–∞–≥ 5/5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π**\n\n`;
  message += `–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?\n\n`;
  message += `**–î–∏–∞–ø–∞–∑–æ–Ω:** 5-1000\n`;
  message += `**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ:** 25, 50, 100, 250\n\n`;
  message += `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:`;

  await ctx.reply(message, { 
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
      ]
    }
  });
}

async function showTaskPreview(ctx: Context, user: User, action: string, data: any) {
  const taskType = getTaskTypeFromAction(action);
  const totalCost = data.reward * data.totalExecutions;
  const commission = Math.ceil(totalCost * user.getCommissionRate());
  const finalCost = totalCost + commission;

  let message = `üìã **–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†**\n\n`;
  message += `${getTaskTypeIcon(taskType)} **${data.title}**\n\n`;
  if (data.description) {
    message += `üìù ${data.description}\n\n`;
  }
  message += `üîó ${data.targetUrl}\n\n`;
  message += `üí∞ **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n`;
  message += `‚îú –ù–∞–≥—Ä–∞–¥–∞: ${data.reward} GRAM\n`;
  message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${data.totalExecutions}\n`;
  message += `‚îú –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥: ${totalCost.toLocaleString()} GRAM\n`;
  message += `‚îú –ö–æ–º–∏—Å—Å–∏—è (${(user.getCommissionRate() * 100)}%): ${commission.toLocaleString()} GRAM\n`;
  message += `‚îî **–ò—Ç–æ–≥–æ: ${finalCost.toLocaleString()} GRAM**\n\n`;
  
  if (user.balance! < finalCost) {
    message += `‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!**\n`;
    message += `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${(finalCost - user.balance!).toLocaleString()} GRAM`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'cabinet_deposit' }
        ],
        [
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }
        ]
      ]
    };

    user.currentState = null;
    await user.save();

    await ctx.reply(message, {
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    });
  } else {
    message += `‚úÖ –°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ\n`;
    message += `–û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${(user.balance! - finalCost).toLocaleString()} GRAM`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üî• –í —Ç–æ–ø–µ (+50 GRAM)', callback_data: `create_task_top` },
          { text: '‚ö° –û–±—ã—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ', callback_data: `create_task_normal` }
        ],
        [
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }
        ]
      ]
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data.taskType = taskType;
    data.finalCost = finalCost;
    data.commission = commission;
    user.currentState = JSON.stringify({ action: 'task_preview', data });
    await user.save();

    await ctx.reply(message, {
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
export function setupSkipDescriptionHandler(bot: Bot) {
  bot.callbackQuery('skip_description', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      if (!user.currentState) {
        await ctx.answerCallbackQuery('‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      const stateData = JSON.parse(user.currentState);
      const data = stateData.data;
      data.description = '';

      await askForReward(ctx, user, stateData.action, data);
      await ctx.answerCallbackQuery('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ');
    } catch (error) {
      logger.error('Skip description error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
export function setupTaskCreationFinalHandlers(bot: Bot) {
  // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  bot.callbackQuery('create_task_normal', requireAuth, async (ctx) => {
    await createTaskFinal(ctx, false);
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–æ–ø–µ
  bot.callbackQuery('create_task_top', requireAuth, async (ctx) => {
    await createTaskFinal(ctx, true);
  });
}

async function createTaskFinal(ctx: any, isTopPromoted: boolean) {
  try {
    const user = ctx.session!.user!;
    
    if (!user.currentState) {
      await ctx.answerCallbackQuery('‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const stateData = JSON.parse(user.currentState);
    const data = stateData.data;

    if (!data || !data.taskType) {
      await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const topCost = isTopPromoted ? 50 : 0;
    const totalCostWithTop = data.finalCost + topCost;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
    if (user.balance! < totalCostWithTop) {
      await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 7); // 7 –¥–Ω–µ–π

    const task = await Task.create({
      authorId: user.id,
      type: data.taskType,
      title: data.title,
      description: data.description || null,
      targetUrl: data.targetUrl,
      reward: data.reward,
      totalExecutions: data.totalExecutions,
      remainingExecutions: data.totalExecutions,
      completedExecutions: 0,
      autoCheck: data.taskType !== 'bot_interaction',
      requireScreenshot: data.taskType === 'bot_interaction',
      isTopPromoted,
      totalCost: totalCostWithTop,
      frozenAmount: data.finalCost,
      spentAmount: 0,
      status: 'active',
      views: 0,
      clicks: 0,
      conversions: 0,
      expiresAt,
      priority: isTopPromoted ? 10 : 5
    });

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
    await user.updateBalance(totalCostWithTop, 'subtract');

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.currentState = null;
    await user.save();

    let message = `‚úÖ **–ó–ê–î–ê–ù–ò–ï –°–û–ó–î–ê–ù–û!**\n\n`;
    message += `${getTaskTypeIcon(data.taskType)} ${data.title}\n`;
    message += `üí∞ ${data.reward} GRAM –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n`;
    message += `üë• –¶–µ–ª—å: ${data.totalExecutions} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π\n`;
    message += `‚è∞ –ê–∫—Ç–∏–≤–Ω–æ –¥–æ: ${expiresAt.toLocaleDateString('ru-RU')}\n\n`;
    
    message += `üìä **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n`;
    message += `‚îú ID –∑–∞–¥–∞–Ω–∏—è: #${task.id}\n`;
    message += `‚îú –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–æ–µ ${isTopPromoted ? 'üî•' : ''}\n`;
    message += `‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalCostWithTop.toLocaleString()} GRAM\n`;
    message += `‚îî –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ${user.balance!.toLocaleString()} GRAM\n\n`;
    
    message += `üöÄ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏—è', callback_data: `task_manage_stats_${task.id}` },
          { text: 'üì¢ –°–æ–∑–¥–∞—Ç—å –µ—â–µ', callback_data: 'advertise_create' }
        ],
        [
          { text: 'üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è', callback_data: 'advertise_my_tasks' },
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };

    await ctx.editMessageText(message, {
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    });

    await ctx.answerCallbackQuery('üéâ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!');

    logger.userAction(user.telegramId, 'task_created', {
      taskId: task.id,
      type: task.type,
      reward: task.reward,
      totalExecutions: task.totalExecutions,
      cost: totalCostWithTop,
      isTopPromoted
    });

  } catch (error) {
    logger.error('Create task final error:', error);
    await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è');
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getTaskTypeFromAction(action: string): string {
  if (action.includes('subscribe_channel')) return 'subscribe_channel';
  if (action.includes('join_group')) return 'join_group';
  if (action.includes('view_post')) return 'view_post';
  if (action.includes('bot_interaction')) return 'bot_interaction';
  if (action.includes('react_post')) return 'react_post';
  return 'subscribe_channel';
}

function getRewardLimits(taskType: string): { minReward: number; maxReward: number } {
  switch (taskType) {
    case 'subscribe_channel': return { minReward: 50, maxReward: 500 };
    case 'join_group': return { minReward: 75, maxReward: 750 };
    case 'view_post': return { minReward: 25, maxReward: 200 };
    case 'bot_interaction': return { minReward: 100, maxReward: 1500 };
    case 'react_post': return { minReward: 30, maxReward: 150 };
    default: return { minReward: 50, maxReward: 500 };
  }
}

function getTaskTypeIcon(taskType: string): string {
  switch (taskType) {
    case 'subscribe_channel': return EMOJIS.channel;
    case 'join_group': return EMOJIS.group;
    case 'view_post': return EMOJIS.view;
    case 'bot_interaction': return EMOJIS.bot;
    case 'react_post': return EMOJIS.reaction;
    default: return EMOJIS.advertise;
  }
}