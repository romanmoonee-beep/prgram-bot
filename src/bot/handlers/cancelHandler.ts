// src/bot/handlers/cancelHandler.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ú–ï–ù–´
import { Bot } from 'grammy';
import { requireAuth } from '../middlewares/auth';
import { getMainMenuKeyboard } from '../keyboards/main';
import { logger } from '../../utils/logger';
import { EMOJIS } from '../../utils/constants';
import { formatUserProfile } from '../../utils/formatters/init';

export function setupCancelHandler(bot: Bot) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
  bot.callbackQuery('cancel', async (ctx) => {
    try {
      const user = ctx.session?.user;
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user) {
        user.currentState = null;
        await user.save();
        
        logger.userAction(user.telegramId, 'action_cancelled');
      }

      await ctx.answerCallbackQuery('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      const message = user 
        ? `${EMOJIS.home} **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n${formatUserProfile(user)}`
        : `${EMOJIS.home} **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await ctx.editMessageText(message, {
        reply_markup: getMainMenuKeyboard(),
        parse_mode: 'Markdown'
      });

    } catch (error) {
      logger.error('Cancel handler error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      
      // –§allback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
      try {
        await ctx.reply('üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
          reply_markup: getMainMenuKeyboard(),
          parse_mode: 'Markdown'
        });
      } catch (fallbackError) {
        logger.error('Cancel fallback error:', fallbackError);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  bot.on('message:text', async (ctx, next) => {
    const user = ctx.session?.user;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç "–æ—Ç–º–µ–Ω–∞" –∏–ª–∏ "/cancel" - –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const text = ctx.message.text.toLowerCase();
    if (['–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º–µ–Ω–∏—Ç—å', '/cancel', 'cancel'].includes(text) && user) {
      try {
        user.currentState = null;
        await user.save();

        await ctx.reply('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
          reply_markup: getMainMenuKeyboard()
        });
        
        logger.userAction(user.telegramId, 'action_cancelled_by_text');
        return;
      } catch (error) {
        logger.error('Text cancel error:', error);
      }
    }

    await next();
  });

  logger.info('‚úÖ Cancel handler configured');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function clearUserState(userId: number): Promise<void> {
  try {
    const { User } = await import('../../database/models');
    await User.update(
      { currentState: null },
      { where: { telegramId: userId } }
    );
    
    logger.info(`User state cleared for ${userId}`);
  } catch (error) {
    logger.error('Failed to clear user state:', error);
  }
}