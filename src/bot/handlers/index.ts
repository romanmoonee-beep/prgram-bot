// src/bot/handlers/index.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { Bot } from 'grammy';
import { logger } from '../../utils/logger';

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
import { setupStartHandler } from './start';
import { setupCabinetHandlers } from './cabinet';
import { setupEarnHandlers } from './earn';
import { setupTaskExecutionHandlers, setupTaskModerationHandlers } from './taskExecution';
import { setupAdvertiseHandlers, setupTaskCreationTextHandlers, setupTaskCreationFinalHandlers } from './advertise';
import { setupChecksHandlers, setupCheckTextHandlers, setupCheckCreationConfirmHandlers } from './checks';
import { setupReferralsHandlers } from './referrals';
import { setupPaymentHandlers } from './payment';
import { setupAdminHandlers } from './admin';
import { setupSubscriptionCheckHandlers, setupSubscriptionCommands, setupNewMemberHandler } from './subscriptionCheck';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
export function setupHandlers(bot: Bot) {
  try {
    logger.info('üîÑ Setting up bot handlers...');

    // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setupStartHandler(bot);
    setupCabinetHandlers(bot);
    
    // –ú–æ–¥—É–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    setupEarnHandlers(bot);
    setupTaskExecutionHandlers(bot);
    setupTaskModerationHandlers(bot); // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    
    // –ú–æ–¥—É–ª—å —Ä–µ–∫–ª–∞–º—ã
    setupAdvertiseHandlers(bot);
    setupTaskCreationTextHandlers(bot);
    setupTaskCreationFinalHandlers(bot);
    
    // –ú–æ–¥—É–ª—å —á–µ–∫–æ–≤
    setupChecksHandlers(bot);
    setupCheckTextHandlers(bot);
    setupCheckCreationConfirmHandlers(bot);
    
    // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    setupReferralsHandlers(bot);

    // –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    setupPaymentHandlers(bot);

    // –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å
    setupAdminHandlers(bot);

    // –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    setupSubscriptionCheckHandlers(bot);
    setupSubscriptionCommands(bot);
    setupNewMemberHandler(bot);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏
    bot.callbackQuery('help', async (ctx) => {
      try {
        let message = `‚ùì **–¶–ï–ù–¢–† –ü–û–ú–û–©–ò**\n\n`;
        message += `**üÜï –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã**\n`;
        message += `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!\n\n`;
        
        message += `**üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫**\n`;
        message += `–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è: –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–∞–º–∏\n\n`;
        
        message += `**üì¢ –†–µ–∫–ª–∞–º–∞**\n`;
        message += `–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n`;
        
        message += `**üîó –†–µ—Ñ–µ—Ä–∞–ª—ã**\n`;
        message += `–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n\n`;
        
        message += `**üí≥ –ß–µ–∫–∏**\n`;
        message += `–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ GRAM —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —á–µ–∫–∏\n\n`;
        
        message += `**üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:**\n`;
        message += `@prgram_support - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n`;
        message += `@prgram_chat - –æ–±—â–∏–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;

        await ctx.editMessageText(message, {
          reply_markup: { inline_keyboard: [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]] },
          parse_mode: 'Markdown'
        });

        await ctx.answerCallbackQuery();
      } catch (error) {
        logger.error('Help handler error:', error);
        await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    bot.callbackQuery('settings', async (ctx) => {
      try {
        const user = ctx.session?.user;
        if (!user) {
          await ctx.answerCallbackQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
        }

        let message = `‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò**\n\n`;
        message += `–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n`;
        message += `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n`;
        message += `‚Ä¢ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n`;
        message += `‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n`;
        message += `‚Ä¢ –ü—Ä–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n`;
        message += `üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`;

        await ctx.editMessageText(message, {
          reply_markup: { inline_keyboard: [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]] },
          parse_mode: 'Markdown'
        });

        await ctx.answerCallbackQuery();
      } catch (error) {
        logger.error('Settings handler error:', error);
        await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
    bot.callbackQuery('cancel', async (ctx) => {
      try {
        const user = ctx.session?.user;
        if (user) {
          user.currentState = null;
          await user.save();
          
          await logger.userAction(user.telegramId, 'action_cancelled');
        }

        await ctx.answerCallbackQuery('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(async () => {
          try {
            await ctx.editMessageText(
              'üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
              {
                reply_markup: { inline_keyboard: [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]] },
                parse_mode: 'Markdown'
              }
            );
          } catch (error) {
            logger.error('Cancel redirect error:', error);
          }
        }, 1000);

      } catch (error) {
        logger.error('Cancel handler error:', error);
        await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    bot.callbackQuery('current_page', async (ctx) => {
      await ctx.answerCallbackQuery();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    bot.on('message:text', async (ctx, next) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
      if (ctx.message.text.startsWith('/')) {
        const user = ctx.session?.user;
        if (!user) {
          await ctx.reply('‚ùì –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start');
          return;
        }

        await logger.userAction(user.telegramId, 'unknown_command', { 
          command: ctx.message.text 
        });

        await ctx.reply(
          '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n' +
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
          '‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
          '‚Ä¢ /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
          '‚Ä¢ /help - –ø–æ–º–æ—â—å',
          {
            reply_markup: {
              inline_keyboard: [[
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
                { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
              ]]
            }
          }
        );
        return;
      }
      
      await next();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
    bot.on('callback_query', async (ctx, next) => {
      try {
        await next();
      } catch (error) {
        logger.error('Unhandled callback query error:', error, {
          userId: ctx.from?.id,
          data: ctx.callbackQuery.data
        });
        
        await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback_query
    bot.callbackQuery(/.*/, async (ctx) => {
      logger.warn(`Unhandled callback query: ${ctx.callbackQuery.data}`, {
        userId: ctx.from?.id,
        data: ctx.callbackQuery.data
      });
      
      if (ctx.session?.user) {
        await logger.userAction(ctx.session.user.telegramId, 'unhandled_callback', {
          data: ctx.callbackQuery.data
        });
      }
      
      await ctx.answerCallbackQuery('üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    });

    logger.info('‚úÖ All handlers configured successfully');
    
  } catch (error) {
    logger.error('‚ùå Failed to setup handlers:', error);
    throw error;
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–µ
export function setupErrorHandlers(bot: Bot) {
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  bot.catch(async (err) => {
    const ctx = err.ctx;
    const error = err.error;
    
    logger.botError('Bot error occurred', error, {
      updateId: ctx.update.update_id,
      userId: ctx.from?.id,
      username: ctx.from?.username,
      chatId: ctx.chat?.id
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if (ctx.session?.user) {
      await logger.userAction(ctx.session.user.telegramId, 'bot_error', {
        error: error.message,
        updateId: ctx.update.update_id
      });
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      if (ctx.callbackQuery) {
        await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else {
        await ctx.reply(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n' +
          '‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n' +
          '‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n' +
          '‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @prgram_support',
          {
            reply_markup: {
              inline_keyboard: [[
                { text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫', callback_data: 'main_menu' }
              ]]
            }
          }
        );
      }
    } catch (replyError) {
      logger.error('Failed to send error message to user:', replyError);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  process.on('unhandledRejection', (reason, promise) => {
    logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
  });

  process.on('uncaughtException', (error) => {
    logger.error('Uncaught Exception:', error);
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
  });

  logger.info('‚úÖ Error handlers configured');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
export async function setupBackgroundJobs() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º QueueManager
    const { QueueManager } = await import('../../jobs/queues');
    QueueManager.initialize();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    setInterval(async () => {
      try {
        await QueueManager.addCleanupTask({ type: 'expired_tasks' });
        await QueueManager.addCleanupTask({ type: 'old_notifications' });
        await QueueManager.addCleanupTask({ type: 'inactive_checks' });
        
        logger.info('Background cleanup tasks scheduled');
      } catch (error) {
        logger.error('Failed to schedule cleanup tasks:', error);
      }
    }, 6 * 60 * 60 * 1000); // 6 —á–∞—Å–æ–≤

    // –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞  
    setInterval(async () => {
      try {
        await QueueManager.cleanCompletedJobs();
        logger.info('Completed queue jobs cleaned');
      } catch (error) {
        logger.error('Failed to clean completed jobs:', error);
      }
    }, 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

    logger.info('‚úÖ Background jobs configured');
  } catch (error) {
    logger.error('‚ùå Failed to setup background jobs:', error);
  }
}

export default setupHandlers;
