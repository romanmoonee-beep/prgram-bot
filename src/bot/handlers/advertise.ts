// src/bot/handlers/advertise.ts
import { Bot, Context } from 'grammy';
import { requireAuth } from '../middlewares/auth';
import { logger } from '../../utils/logger';
import { EMOJIS, TASK_TYPES, LIMITS } from '../../utils/constants';
import { getAdvertiseKeyboard, getConfirmKeyboard, getBackKeyboard } from '../keyboards/main';
import { validateTelegramLink, validatePostLink } from '../../utils/validators';
import { Task, User } from '../../database/models';

interface TaskCreationState {
  type?: string;
  title?: string;
  description?: string;
  targetUrl?: string;
  reward?: number;
  totalExecutions?: number;
  isTopPromoted?: boolean;
}

export function setupAdvertiseHandlers(bot: Bot) {

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–∫–ª–∞–º—ã
  bot.callbackQuery('advertise', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      logger.userAction(user.telegramId, 'advertise_opened');

      const myTasksCount = await Task.count({
        where: { authorId: user.id }
      });

      let message = `${EMOJIS.advertise} **–†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å**\n\n`;
      message += `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance?.toLocaleString() || 0} GRAM\n`;
      message += `üèÜ **–£—Ä–æ–≤–µ–Ω—å:** ${user.getLevelText()} (–∫–æ–º–∏—Å—Å–∏—è ${user.getCommissionRate() * 100}%)\n`;
      message += `üìä **–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π:** ${myTasksCount}\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:`;

      await ctx.editMessageText(message, {
        reply_markup: getAdvertiseKeyboard(),
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Advertise handler error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
  bot.callbackQuery('advertise_create', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;

      let message = `${EMOJIS.advertise} **–°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø**\n\n`;
      message += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: **${user.balance?.toLocaleString() || 0} GRAM**\n`;
      message += `üèÜ –£—Ä–æ–≤–µ–Ω—å: **${user.getLevelText()}** (–∫–æ–º–∏—Å—Å–∏—è ${user.getCommissionRate() * 100}%)\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:\n\n`;

      const keyboard = getBackKeyboard('advertise');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
      keyboard.row()
        .text(`${EMOJIS.channel} –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª`, 'create_subscribe_channel')
        .text(`${EMOJIS.group} –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É`, 'create_join_group');
      
      keyboard.row()
        .text(`${EMOJIS.view} –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞`, 'create_view_post')
        .text(`${EMOJIS.bot} –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞`, 'create_bot_interaction');
        
      keyboard.row()
        .text(`${EMOJIS.reaction} –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç`, 'create_react_post');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Advertise create error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
  setupTaskTypeHandlers(bot, 'subscribe_channel', '–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª', '50-500 GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ');
  setupTaskTypeHandlers(bot, 'join_group', '–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É', '75-750 GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ');
  setupTaskTypeHandlers(bot, 'view_post', '–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞', '25-200 GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ');
  setupTaskTypeHandlers(bot, 'bot_interaction', '–ø–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞', '100-1500 GRAM');
  setupTaskTypeHandlers(bot, 'react_post', '—Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç', '30-150 GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ');

  // –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è
  bot.callbackQuery(/^advertise_my_tasks(?:_page_(\d+))?$/, requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      const page = parseInt(ctx.match![1] || '1');
      const limit = 5;
      const offset = (page - 1) * limit;

      const { rows: tasks, count } = await Task.findAndCountAll({
        where: { authorId: user.id },
        order: [['createdAt', 'DESC']],
        limit,
        offset
      });

      const totalPages = Math.ceil(count / limit);

      let message = `${EMOJIS.chart} **–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è** (${count})\n\n`;

      if (tasks.length === 0) {
        message += `${EMOJIS.info} –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n`;
        message += `–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`;
      } else {
        tasks.forEach((task, index) => {
          const progress = task.totalExecutions > 0 
            ? Math.round((task.completedExecutions || 0) / task.totalExecutions * 100)
            : 0;
          
          message += `${index + 1}. **${task.title}**\n`;
          message += `${task.getTypeIcon()} ${task.getStatusIcon()} ${task.reward} GRAM\n`;
          message += `üìä ${progress}% (${task.completedExecutions || 0}/${task.totalExecutions})\n`;
          message += `üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${task.views || 0} | üëÜ –ö–ª–∏–∫–∏: ${task.clicks || 0}\n\n`;
        });
      }

      const keyboard = getBackKeyboard('advertise');
      
      if (totalPages > 1) {
        keyboard.row();
        if (page > 1) {
          keyboard.text('‚¨ÖÔ∏è', `advertise_my_tasks_page_${page - 1}`);
        }
        keyboard.text(`${page}/${totalPages}`, 'current_page');
        if (page < totalPages) {
          keyboard.text('‚û°Ô∏è', `advertise_my_tasks_page_${page + 1}`);
        }
      }

      keyboard.row().text(`${EMOJIS.advertise} –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ`, 'advertise_create');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('My tasks error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π
  bot.callbackQuery('advertise_stats', requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const tasks = await Task.findAll({
        where: { authorId: user.id },
        attributes: [
          'id', 'title', 'type', 'reward', 'totalExecutions', 
          'completedExecutions', 'views', 'clicks', 'conversions',
          'spentAmount', 'createdAt'
        ]
      });

      const totalTasks = tasks.length;
      const activeTasks = tasks.filter(t => t.status === 'active').length;
      const completedTasks = tasks.filter(t => t.status === 'completed').length;
      const totalSpent = tasks.reduce((sum, t) => sum + (t.spentAmount || 0), 0);
      const totalViews = tasks.reduce((sum, t) => sum + (t.views || 0), 0);
      const totalClicks = tasks.reduce((sum, t) => sum + (t.clicks || 0), 0);
      const totalConversions = tasks.reduce((sum, t) => sum + (t.conversions || 0), 0);

      let message = `${EMOJIS.stats} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π**\n\n`;
      
      message += `üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
      message += `‚îú –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: ${totalTasks}\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeTasks}\n`;
      message += `‚îú –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${completedTasks}\n`;
      message += `‚îî –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalSpent.toLocaleString()} GRAM\n\n`;

      message += `üëÄ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n`;
      message += `‚îú –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${totalViews.toLocaleString()}\n`;
      message += `‚îú –ö–ª–∏–∫–∏: ${totalClicks.toLocaleString()}\n`;
      message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalConversions.toLocaleString()}\n`;
      message += `‚îî CTR: ${totalViews > 0 ? ((totalClicks / totalViews) * 100).toFixed(1) : 0}%\n\n`;

      if (tasks.length > 0) {
        // –¢–æ–ø-3 –∑–∞–¥–∞–Ω–∏—è –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        const topTasks = tasks
          .filter(t => (t.clicks || 0) > 0)
          .sort((a, b) => ((b.conversions || 0) / (b.clicks || 1)) - ((a.conversions || 0) / (a.clicks || 1)))
          .slice(0, 3);

        if (topTasks.length > 0) {
          message += `üèÜ **–õ—É—á—à–∏–µ –∑–∞–¥–∞–Ω–∏—è:**\n`;
          topTasks.forEach((task, index) => {
            const conversion = task.clicks ? ((task.conversions || 0) / task.clicks * 100) : 0;
            message += `${index + 1}. ${task.title} - ${conversion.toFixed(1)}%\n`;
          });
        }
      }

      const keyboard = getBackKeyboard('advertise')
        .row()
        .text(`${EMOJIS.chart} –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞`, 'advertise_analytics')
        .text(`${EMOJIS.advertise} –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ`, 'advertise_create');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Advertise stats error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  logger.info('‚úÖ Advertise handlers configured');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
function setupTaskTypeHandlers(bot: Bot, taskType: string, typeName: string, rewardRange: string) {
  const stateKey = `creating_${taskType}`;
  
  // –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
  bot.callbackQuery(`create_${taskType}`, requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
      const state: TaskCreationState = { type: taskType };
      user.currentState = JSON.stringify({ action: stateKey, data: state });
      await user.save();

      let message = `${getTypeIcon(taskType)} **${typeName.toUpperCase()}**\n\n`;
      message += `üë§ **–ê–≤—Ç–æ—Ä:** ${user.getDisplayName()}\n`;
      message += `üí∞ **–ë–∞–ª–∞–Ω—Å:** ${user.balance?.toLocaleString() || 0} GRAM\n\n`;
      
      message += `üìù **–®–∞–≥ 1/6: –°—Å—ã–ª–∫–∞**\n\n`;
      
      if (taskType === 'view_post' || taskType === 'react_post') {
        message += `üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`;
        message += `\`https://t.me/channel_name/123\`\n\n`;
      } else if (taskType === 'bot_interaction') {
        message += `üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`;
        message += `\`https://t.me/bot_name\` –∏–ª–∏ \`@bot_name\`\n\n`;
      } else {
        message += `üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`;
        message += `\`https://t.me/channel_name\` –∏–ª–∏ \`@channel_name\`\n\n`;
      }
      
      message += `üí∞ **–î–∏–∞–ø–∞–∑–æ–Ω –Ω–∞–≥—Ä–∞–¥:** ${rewardRange}`;

      const keyboard = getBackKeyboard('advertise_create');

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error(`Create ${taskType} error:`, error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
export function setupTaskCreationTextHandlers(bot: Bot) {
  bot.on('message:text', requireAuth, async (ctx, next) => {
    try {
      const user = ctx.session!.user!;
      
      if (!user.currentState?.startsWith('{"action":"creating_')) {
        await next();
        return;
      }

      const stateData = JSON.parse(user.currentState);
      const action = stateData.action;
      const data: TaskCreationState = stateData.data;
      
      if (action.startsWith('creating_')) {
        await handleTaskCreationStep(ctx, user, data);
        return;
      }
      
      await next();
    } catch (error) {
      logger.error('Task creation text handler error:', error);
      await next();
    }
  });
}

async function handleTaskCreationStep(ctx: Context, user: User, data: TaskCreationState) {
  const text = ctx.message!.text!.trim();
  
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
    if (!data.targetUrl) {
      // –®–∞–≥ 1: –°—Å—ã–ª–∫–∞
      const isPost = data.type === 'view_post' || data.type === 'react_post';
      const validation = isPost ? validatePostLink(text) : validateTelegramLink(text);
      
      if (!validation.isValid) {
        await ctx.reply(`‚ùå ${validation.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        return;
      }
      
      data.targetUrl = text;
      await askForTitle(ctx, user, data);
      
    } else if (!data.title) {
      // –®–∞–≥ 2: –ù–∞–∑–≤–∞–Ω–∏–µ
      if (text.length < 3 || text.length > LIMITS.MAX_TASK_TITLE) {
        await ctx.reply(`‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ ${LIMITS.MAX_TASK_TITLE} —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        return;
      }
      
      data.title = text;
      await askForDescription(ctx, user, data);
      
    } else if (!data.description) {
      // –®–∞–≥ 3: –û–ø–∏—Å–∞–Ω–∏–µ
      if (text === '/skip') {
        data.description = '';
      } else if (text.length > LIMITS.MAX_TASK_DESCRIPTION) {
        await ctx.reply(`‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${LIMITS.MAX_TASK_DESCRIPTION} —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip:`);
        return;
      } else {
        data.description = text;
      }
      
      await askForReward(ctx, user, data);
      
    } else if (!data.reward) {
      // –®–∞–≥ 4: –ù–∞–≥—Ä–∞–¥–∞
      const reward = parseInt(text);
      const minReward = getMinReward(data.type!);
      const maxReward = getMaxReward(data.type!);
      
      if (isNaN(reward) || reward < minReward || reward > maxReward) {
        await ctx.reply(`‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${minReward} –¥–æ ${maxReward} GRAM.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        return;
      }
      
      data.reward = reward;
      await askForExecutions(ctx, user, data);
      
    } else if (!data.totalExecutions) {
      // –®–∞–≥ 5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
      const executions = parseInt(text);
      
      if (isNaN(executions) || executions < LIMITS.MIN_TASK_EXECUTIONS || executions > LIMITS.MAX_TASK_EXECUTIONS) {
        await ctx.reply(`‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${LIMITS.MIN_TASK_EXECUTIONS} –¥–æ ${LIMITS.MAX_TASK_EXECUTIONS}.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        return;
      }
      
      data.totalExecutions = executions;
      await showTaskPreview(ctx, user, data);
    }
    
  } catch (error) {
    logger.error('Handle task creation step error:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
  }
}

async function askForTitle(ctx: Context, user: User, data: TaskCreationState) {
  data.targetUrl = ctx.message!.text!.trim();
  user.currentState = JSON.stringify({ action: `creating_${data.type}`, data });
  await user.save();

  let message = `‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n`;
  message += `üìù **–®–∞–≥ 2/6: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è**\n\n`;
  message += `–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n\n`;
  message += `**–ü—Ä–∏–º–µ—Ä—ã:**\n`;
  message += `‚Ä¢ "–ö—Ä–∏–ø—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"\n`;
  message += `‚Ä¢ "–û–±–∑–æ—Ä—ã —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤"\n`;
  message += `‚Ä¢ "–ò–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ"\n\n`;
  message += `–ú–∞–∫—Å. ${LIMITS.MAX_TASK_TITLE} —Å–∏–º–≤–æ–ª–æ–≤:`;

  await ctx.reply(message, { parse_mode: 'Markdown' });
}

async function askForDescription(ctx: Context, user: User, data: TaskCreationState) {
  data.title = ctx.message!.text!.trim();
  user.currentState = JSON.stringify({ action: `creating_${data.type}`, data });
  await user.save();

  let message = `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n`;
  message += `üìù **–®–∞–≥ 3/6: –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)**\n\n`;
  message += `–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É/–±–æ—Ç–∞ —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n`;
  message += `**–ß—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å:**\n`;
  message += `‚Ä¢ –¢–µ–º–∞—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n`;
  message += `‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n`;
  message += `‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n`;
  message += `–ú–∞–∫—Å. ${LIMITS.MAX_TASK_DESCRIPTION} —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:`;

  await ctx.reply(message, { parse_mode: 'Markdown' });
}

async function askForReward(ctx: Context, user: User, data: TaskCreationState) {
  const text = ctx.message!.text!.trim();
  data.description = text === '/skip' ? '' : text;
  user.currentState = JSON.stringify({ action: `creating_${data.type}`, data });
  await user.save();

  const minReward = getMinReward(data.type!);
  const maxReward = getMaxReward(data.type!);

  let message = `‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n`;
  message += `üí∞ **–®–∞–≥ 4/6: –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ**\n\n`;
  message += `–ß–µ–º –≤—ã—à–µ –Ω–∞–≥—Ä–∞–¥–∞, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –≤—ã–ø–æ–ª–Ω—è—Ç –∑–∞–¥–∞–Ω–∏–µ.\n\n`;
  message += `**–î–∏–∞–ø–∞–∑–æ–Ω:** ${minReward}-${maxReward} GRAM\n`;
  message += `**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ:** ${Math.floor((minReward + maxReward) / 2)} GRAM\n\n`;
  message += `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã:`;

  await ctx.reply(message, { parse_mode: 'Markdown' });
}

async function askForExecutions(ctx: Context, user: User, data: TaskCreationState) {
  data.reward = parseInt(ctx.message!.text!.trim());
  user.currentState = JSON.stringify({ action: `creating_${data.type}`, data });
  await user.save();

  let message = `‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n`;
  message += `üë• **–®–∞–≥ 5/6: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π**\n\n`;
  message += `–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?\n\n`;
  message += `**–î–∏–∞–ø–∞–∑–æ–Ω:** ${LIMITS.MIN_TASK_EXECUTIONS}-${LIMITS.MAX_TASK_EXECUTIONS}\n`;
  message += `**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ:** 50, 100, 250, 500\n\n`;
  message += `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:`;

  await ctx.reply(message, { parse_mode: 'Markdown' });
}

async function showTaskPreview(ctx: Context, user: User, data: TaskCreationState) {
  data.totalExecutions = parseInt(ctx.message!.text!.trim());
  
  const totalCost = data.reward! * data.totalExecutions!;
  const commission = Math.ceil(totalCost * user.getCommissionRate());
  const finalCost = totalCost + commission;

  let message = `üìã **–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†**\n\n`;
  message += `${getTypeIcon(data.type!)} **${data.title}**\n\n`;
  if (data.description) {
    message += `üìù ${data.description}\n\n`;
  }
  message += `üîó ${data.targetUrl}\n\n`;
  message += `üí∞ **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n`;
  message += `‚îú –ù–∞–≥—Ä–∞–¥–∞: ${data.reward} GRAM\n`;
  message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${data.totalExecutions}\n`;
  message += `‚îú –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥: ${totalCost.toLocaleString()} GRAM\n`;
  message += `‚îú –ö–æ–º–∏—Å—Å–∏—è (${(user.getCommissionRate() * 100)}%): ${commission.toLocaleString()} GRAM\n`;
  message += `‚îî **–ò—Ç–æ–≥–æ: ${finalCost.toLocaleString()} GRAM**\n\n`;
  
  if (user.balance! < finalCost) {
    message += `‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!**\n`;
    message += `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${(finalCost - user.balance!).toLocaleString()} GRAM\n\n`;
    message += `[üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å]`;
  } else {
    message += `‚úÖ –°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ\n`;
    message += `–û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${(user.balance! - finalCost).toLocaleString()} GRAM\n\n`;
    message += `**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:**`;
  }

  const keyboard = getBackKeyboard('advertise_create');
  
  if (user.balance! >= finalCost) {
    keyboard.row()
      .text('üî• –í —Ç–æ–ø–µ (+50 GRAM)', `task_preview_top_${JSON.stringify(data).length}`)
      .text('‚ö° –û–±—ã—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ', `task_preview_normal_${JSON.stringify(data).length}`);
  } else {
    keyboard.row()
      .text('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'cabinet_deposit');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
  user.currentState = JSON.stringify({ action: 'task_preview', data });
  await user.save();

  await ctx.reply(message, {
    reply_markup: keyboard,
    parse_mode: 'Markdown'
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
export function setupTaskCreationFinalHandlers(bot: Bot) {
  // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  bot.callbackQuery(/^task_preview_normal_(\d+)$/, requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      const stateData = JSON.parse(user.currentState || '{}');
      const data: TaskCreationState = stateData.data;

      if (!data || !data.type) {
        await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      await createTask(ctx, user, data, false);
    } catch (error) {
      logger.error('Task creation normal error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–æ–ø–µ
  bot.callbackQuery(/^task_preview_top_(\d+)$/, requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      const stateData = JSON.parse(user.currentState || '{}');
      const data: TaskCreationState = stateData.data;

      if (!data || !data.type) {
        await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      await createTask(ctx, user, data, true);
    } catch (error) {
      logger.error('Task creation top error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });
}

async function createTask(ctx: Context, user: User, data: TaskCreationState, isTopPromoted: boolean) {
  try {
    const totalCost = data.reward! * data.totalExecutions!;
    const commission = Math.ceil(totalCost * user.getCommissionRate());
    const topCost = isTopPromoted ? 50 : 0;
    const finalCost = totalCost + commission + topCost;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
    if (user.balance! < finalCost) {
      await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 7); // 7 –¥–Ω–µ–π

    const task = await Task.create({
      authorId: user.id,
      type: data.type!,
      title: data.title!,
      description: data.description || undefined,
      targetUrl: data.targetUrl!,
      reward: data.reward!,
      totalExecutions: data.totalExecutions!,
      remainingExecutions: data.totalExecutions!,
      autoCheck: data.type !== TASK_TYPES.BOT_INTERACTION,
      requireScreenshot: data.type === TASK_TYPES.BOT_INTERACTION,
      isTopPromoted,
      totalCost: finalCost,
      frozenAmount: totalCost,
      expiresAt
    });

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
    await user.updateBalance(finalCost, 'subtract');

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const { Transaction } = await import('../../database/models');
    await Transaction.createTaskPayment(
      user.id,
      task.id,
      finalCost,
      user.balance! + finalCost
    );

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.currentState = null;
    await user.save();

    let message = `‚úÖ **–ó–ê–î–ê–ù–ò–ï –°–û–ó–î–ê–ù–û!**\n\n`;
    message += `${task.getTypeIcon()} ${task.title}\n`;
    message += `üí∞ ${task.reward} GRAM –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n`;
    message += `üë• –¶–µ–ª—å: ${task.totalExecutions} ${getExecutionsWord(task.totalExecutions)}\n`;
    message += `‚è∞ –ê–∫—Ç–∏–≤–Ω–æ –¥–æ: ${task.expiresAt.toLocaleDateString('ru-RU')}\n\n`;
    
    message += `üìä **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n`;
    message += `‚îú ID –∑–∞–¥–∞–Ω–∏—è: #${task.id}\n`;
    message += `‚îú –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–æ–µ ${isTopPromoted ? 'üî•' : ''}\n`;
    message += `‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${finalCost.toLocaleString()} GRAM\n`;
    message += `‚îî –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ${user.balance!.toLocaleString()} GRAM\n\n`;
    
    message += `üöÄ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!`;

    const keyboard = getBackKeyboard('advertise')
      .row()
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏—è', `task_stats_${task.id}`)
      .text('üì¢ –°–æ–∑–¥–∞—Ç—å –µ—â–µ', 'advertise_create');

    await ctx.editMessageText(message, {
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    });

    await ctx.answerCallbackQuery('üéâ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!');

    logger.userAction(user.telegramId, 'task_created', {
      taskId: task.id,
      type: task.type,
      reward: task.reward,
      totalExecutions: task.totalExecutions,
      cost: finalCost,
      isTopPromoted
    });

  } catch (error) {
    logger.error('Create task error:', error);
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è');
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getTypeIcon(taskType: string): string {
  switch (taskType) {
    case 'subscribe_channel': return EMOJIS.channel;
    case 'join_group': return EMOJIS.group;
    case 'view_post': return EMOJIS.view;
    case 'bot_interaction': return EMOJIS.bot;
    case 'react_post': return EMOJIS.reaction;
    default: return EMOJIS.advertise;
  }
}

function getMinReward(taskType: string): number {
  switch (taskType) {
    case 'subscribe_channel': return 50;
    case 'join_group': return 75;
    case 'view_post': return 25;
    case 'bot_interaction': return 100;
    case 'react_post': return 30;
    default: return 50;
  }
}

function getMaxReward(taskType: string): number {
  switch (taskType) {
    case 'subscribe_channel': return 500;
    case 'join_group': return 750;
    case 'view_post': return 200;
    case 'bot_interaction': return 1500;
    case 'react_post': return 150;
    default: return 500;
  }
}

function getExecutionsWord(count: number): string {
  const lastDigit = count % 10;
  const lastTwoDigits = count % 100;
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π';
  }
  
  switch (lastDigit) {
    case 1: return '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ';
    case 2:
    case 3:
    case 4: return '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è';
    default: return '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π';
  }
}