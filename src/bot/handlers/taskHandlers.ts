// src/bot/handlers/taskHandlers.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
import { Bot, Context } from 'grammy';
import { requireAuth } from '../middlewares/auth';
import { logger } from '../../utils/logger';
import { EMOJIS, TASK_TYPES, TASK_STATUSES } from '../../utils/constants';
import { Task, TaskExecution, User } from '../../database/models';
import { Op } from 'sequelize';

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è earn_channels
export function setupEarnChannelsHandler(bot: Bot) {
  bot.callbackQuery(/^earn_channels(?:_page_(\d+))?$/, requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      const page = parseInt(ctx.match![1] || '1');
      const limit = 5;
      const offset = (page - 1) * limit;

      const { rows: tasks, count } = await Task.findAndCountAll({
        where: {
          type: TASK_TYPES.SUBSCRIBE_CHANNEL,
          status: TASK_STATUSES.ACTIVE,
          expiresAt: { [Op.gt]: new Date() },
          remainingExecutions: { [Op.gt]: 0 },
          authorId: { [Op.ne]: user.id }
        },
        include: [{ model: User, as: 'author', attributes: ['username', 'firstName'] }],
        order: [['reward', 'DESC']],
        limit,
        offset
      });

      const totalPages = Math.ceil(count / limit);

      let message = `${EMOJIS.channel} **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã**\n\n`;
      message += `–ù–∞–π–¥–µ–Ω–æ: **${count} –∑–∞–¥–∞–Ω–∏–π**\n`;
      message += `–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –Ω–∞–≥—Ä–∞–¥–µ ‚Üì\n\n`;

      if (tasks.length === 0) {
        message += `${EMOJIS.info} –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã.`;
        
        const keyboard = {
          inline_keyboard: [
            [
              { text: `${EMOJIS.fire} –¢–æ–ø –∑–∞–¥–∞–Ω–∏—è`, callback_data: 'earn_top' },
              { text: `${EMOJIS.diamond} –ü—Ä–µ–º–∏—É–º`, callback_data: 'earn_premium' }
            ],
            [{ text: `${EMOJIS.home} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, callback_data: 'main_menu' }]
          ]
        };

        await ctx.editMessageText(message, {
          reply_markup: keyboard,
          parse_mode: 'Markdown'
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        const keyboard = { inline_keyboard: [] as any[] };
        
        tasks.forEach((task, index) => {
          message += `${index + 1}. **${task.title}**\n`;
          message += `${EMOJIS.money} ${task.reward} GRAM\n`;
          message += `üë• ${task.completedExecutions || 0}/${task.totalExecutions}\n`;
          message += `‚è±Ô∏è ${formatTimeRemaining(task.expiresAt)}\n\n`;

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
          keyboard.inline_keyboard.push([
            { text: `üìã ${task.title} - ${task.reward} GRAM`, callback_data: `task_${task.id}` }
          ]);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (totalPages > 1) {
          const paginationRow = [];
          if (page > 1) {
            paginationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `earn_channels_page_${page - 1}` });
          }
          paginationRow.push({ text: `${page}/${totalPages}`, callback_data: 'current_page' });
          if (page < totalPages) {
            paginationRow.push({ text: '‚û°Ô∏è', callback_data: `earn_channels_page_${page + 1}` });
          }
          keyboard.inline_keyboard.push(paginationRow);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.inline_keyboard.push([
          { text: `${EMOJIS.fire} –¢–æ–ø –∑–∞–¥–∞–Ω–∏—è`, callback_data: 'earn_top' },
          { text: `${EMOJIS.diamond} –ü—Ä–µ–º–∏—É–º`, callback_data: 'earn_premium' }
        ]);
        
        keyboard.inline_keyboard.push([
          { text: `${EMOJIS.back} –ö –∑–∞—Ä–∞–±–æ—Ç–∫—É`, callback_data: 'earn' }
        ]);

        await ctx.editMessageText(message, {
          reply_markup: keyboard,
          parse_mode: 'Markdown'
        });
      }

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Earn channels error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
export function setupTaskViewHandler(bot: Bot) {
  bot.callbackQuery(/^task_(\d+)$/, requireAuth, async (ctx) => {
    try {
      const taskId = parseInt(ctx.match![1]);
      const user = ctx.session!.user!;

      const task = await Task.findByPk(taskId, {
        include: [{ model: User, as: 'author', attributes: ['username', 'firstName'] }]
      });

      if (!task) {
        await ctx.answerCallbackQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
      const canExecute = await checkCanUserExecuteTask(task, user);
      if (!canExecute.canExecute) {
        await ctx.answerCallbackQuery(`‚ùå ${canExecute.reason}`);
        return;
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      await task.increment('views');

      let message = `${getTaskTypeIcon(task.type)} **${task.title}**\n\n`;
      
      if (task.description) {
        message += `üìã **–û–ø–∏—Å–∞–Ω–∏–µ:**\n${task.description}\n\n`;
      }

      message += `üí∞ **–ù–∞–≥—Ä–∞–¥–∞:** ${task.reward} GRAM\n`;
      message += `‚è±Ô∏è **–û—Å—Ç–∞–ª–æ—Å—å:** ${formatTimeRemaining(task.expiresAt)}\n`;
      message += `üë• **–í—ã–ø–æ–ª–Ω–∏–ª–∏:** ${task.completedExecutions || 0}/${task.totalExecutions}\n`;
      message += `üëÄ **–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${task.views || 0}\n\n`;

      // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
      message += getTaskInstructions(task.type);

      const keyboard = {
        inline_keyboard: [
          [
            { text: `üîó ${getActionButtonText(task.type)}`, url: task.targetUrl }
          ],
          [
            { text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: `task_check_${taskId}` }
          ],
          [
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏—è', callback_data: `task_stats_${taskId}` },
            { text: '‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data: `task_report_${taskId}` }
          ],
          [
            { text: `${EMOJIS.back} –ö –∑–∞–¥–∞–Ω–∏—è–º`, callback_data: getBackToTasksCallback(task.type) }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Task view error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è
export function setupTaskCheckHandler(bot: Bot) {
  bot.callbackQuery(/^task_check_(\d+)$/, requireAuth, async (ctx) => {
    try {
      const taskId = parseInt(ctx.match![1]);
      const user = ctx.session!.user!;

      const task = await Task.findByPk(taskId);
      if (!task || task.status !== 'active') {
        await ctx.answerCallbackQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
      const existingExecution = await TaskExecution.findOne({
        where: { taskId, userId: user.id }
      });

      if (existingExecution) {
        let status = '';
        switch (existingExecution.status) {
          case 'completed':
            status = '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ';
            break;
          case 'in_review':
            status = '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ';
            break;
          case 'rejected':
            status = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';
            break;
          default:
            status = '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ';
        }
        await ctx.answerCallbackQuery(`‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ ${status}`);
        return;
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
      await task.increment('clicks');

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const rewardAmount = Math.floor(task.reward * user.getEarnMultiplier());

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
      const execution = await TaskExecution.create({
        taskId,
        userId: user.id,
        rewardAmount,
        status: 'pending'
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      if (task.autoCheck && task.type !== 'bot_interaction') {
        // –î–ª—è –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ - –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
          try {
            await execution.update({ status: 'completed' });
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            await user.updateBalance(rewardAmount, 'add');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞–Ω–∏—è
            await task.increment('completedExecutions');
            await task.decrement('remainingExecutions');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
              await ctx.api.sendMessage(
                user.telegramId,
                `‚úÖ **–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!**\n\n` +
                `${getTaskTypeIcon(task.type)} ${task.title}\n` +
                `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${rewardAmount} GRAM\n` +
                `üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.balance} GRAM`,
                { parse_mode: 'Markdown' }
              );
            } catch (notifyError) {
              logger.warn('Failed to notify user about task completion:', notifyError);
            }
          } catch (autoCheckError) {
            logger.error('Auto-check error:', autoCheckError);
          }
        }, 3000);
      } else {
        // –î–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await execution.update({ status: 'in_review' });
      }

      let message = `‚è≥ **–ó–ê–î–ê–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û –ù–ê –ü–†–û–í–ï–†–ö–£**\n\n`;
      message += `${getTaskTypeIcon(task.type)} ${task.title}\n`;
      message += `üí∞ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: ${rewardAmount} GRAM\n\n`;
      
      if (task.autoCheck && task.type !== 'bot_interaction') {
        message += `üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...\n`;
        message += `‚è∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥`;
      } else {
        message += `üë®‚Äçüíº –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞–Ω–∏—è\n`;
        message += `‚è∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤`;
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üí∞ –î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è', callback_data: 'earn' },
            { text: 'üìä –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'cabinet' }
          ],
          [
            { text: `${EMOJIS.home} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, callback_data: 'main_menu' }
          ]
        ]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery('‚è≥ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');

      logger.userAction(user.telegramId, 'task_submitted', { taskId, executionId: execution.id });
    } catch (error) {
      logger.error('Task check error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ');
    }
  });
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏
export function setupTaskManagementHandler(bot: Bot) {
  bot.callbackQuery(/^advertise_my_tasks(?:_page_(\d+))?$/, requireAuth, async (ctx) => {
    try {
      const user = ctx.session!.user!;
      const page = parseInt(ctx.match![1] || '1');
      const limit = 5;
      const offset = (page - 1) * limit;

      const { rows: tasks, count } = await Task.findAndCountAll({
        where: { authorId: user.id },
        order: [['createdAt', 'DESC']],
        limit,
        offset
      });

      const totalPages = Math.ceil(count / limit);

      let message = `${EMOJIS.chart} **–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è** (${count})\n\n`;

      if (tasks.length === 0) {
        message += `${EMOJIS.info} –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n`;
        message += `–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`;
        
        const keyboard = {
          inline_keyboard: [
            [
              { text: `${EMOJIS.advertise} –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ`, callback_data: 'advertise_create' }
            ],
            [
              { text: `${EMOJIS.back} –ö —Ä–µ–∫–ª–∞–º–µ`, callback_data: 'advertise' }
            ]
          ]
        };

        await ctx.editMessageText(message, {
          reply_markup: keyboard,
          parse_mode: 'Markdown'
        });
      } else {
        const keyboard = { inline_keyboard: [] as any[] };
        
        tasks.forEach((task, index) => {
          const progress = task.totalExecutions > 0 
            ? Math.round((task.completedExecutions || 0) / task.totalExecutions * 100)
            : 0;
          
          message += `${index + 1}. **${task.title}**\n`;
          message += `${getTaskTypeIcon(task.type)} ${getTaskStatusIcon(task.status)} ${task.reward} GRAM\n`;
          message += `üìä ${progress}% (${task.completedExecutions || 0}/${task.totalExecutions})\n`;
          message += `üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${task.views || 0} | üëÜ –ö–ª–∏–∫–∏: ${task.clicks || 0}\n\n`;

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
          const taskRow = [
            { text: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`, callback_data: `task_manage_stats_${task.id}` },
            { text: `‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ`, callback_data: `task_manage_${task.id}` }
          ];
          keyboard.inline_keyboard.push(taskRow);
        });

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if (totalPages > 1) {
          const paginationRow = [];
          if (page > 1) {
            paginationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `advertise_my_tasks_page_${page - 1}` });
          }
          paginationRow.push({ text: `${page}/${totalPages}`, callback_data: 'current_page' });
          if (page < totalPages) {
            paginationRow.push({ text: '‚û°Ô∏è', callback_data: `advertise_my_tasks_page_${page + 1}` });
          }
          keyboard.inline_keyboard.push(paginationRow);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.inline_keyboard.push([
          { text: `${EMOJIS.advertise} –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ`, callback_data: 'advertise_create' },
          { text: `${EMOJIS.stats} –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`, callback_data: 'advertise_stats' }
        ]);
        
        keyboard.inline_keyboard.push([
          { text: `${EMOJIS.back} –ö —Ä–µ–∫–ª–∞–º–µ`, callback_data: 'advertise' }
        ]);

        await ctx.editMessageText(message, {
          reply_markup: keyboard,
          parse_mode: 'Markdown'
        });
      }

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('My tasks error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º
export function setupTaskManageHandler(bot: Bot) {
  bot.callbackQuery(/^task_manage_(\d+)$/, requireAuth, async (ctx) => {
    try {
      const taskId = parseInt(ctx.match![1]);
      const user = ctx.session!.user!;

      const task = await Task.findOne({
        where: { id: taskId, authorId: user.id }
      });

      if (!task) {
        await ctx.answerCallbackQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      const progress = task.totalExecutions > 0 
        ? Math.round((task.completedExecutions || 0) / task.totalExecutions * 100)
        : 0;

      let message = `‚öôÔ∏è **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–ï–ú**\n\n`;
      message += `${getTaskTypeIcon(task.type)} **${task.title}**\n`;
      message += `üìä –°—Ç–∞—Ç—É—Å: ${getTaskStatusText(task.status)} ${getTaskStatusIcon(task.status)}\n`;
      message += `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} GRAM\n`;
      message += `üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}% (${task.completedExecutions || 0}/${task.totalExecutions})\n`;
      message += `üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${task.views || 0}\n`;
      message += `üëÜ –ö–ª–∏–∫–∏: ${task.clicks || 0}\n`;
      message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${task.conversions || 0}\n`;
      message += `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${formatTimeRemaining(task.expiresAt)}\n\n`;
      
      if (task.status === 'active') {
        message += `üî• –ó–∞–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`;
      } else if (task.status === 'paused') {
        message += `‚è∏Ô∏è –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`;
      } else if (task.status === 'completed') {
        message += `‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: `task_detailed_stats_${taskId}` },
            { text: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: `task_analytics_${taskId}` }
          ],
          [
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: `task_settings_${taskId}` },
            { text: 'üî• –í —Ç–æ–ø (+50 GRAM)', callback_data: `task_promote_${taskId}` }
          ]
        ]
      };

      if (task.status === 'active') {
        keyboard.inline_keyboard.push([
          { text: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: `task_pause_${taskId}` },
          { text: 'üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: `task_complete_${taskId}` }
        ]);
      } else if (task.status === 'paused') {
        keyboard.inline_keyboard.push([
          { text: '‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å', callback_data: `task_resume_${taskId}` },
          { text: 'üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: `task_complete_${taskId}` }
        ]);
      }

      keyboard.inline_keyboard.push([
        { text: `${EMOJIS.back} –ö –º–æ–∏–º –∑–∞–¥–∞–Ω–∏—è–º`, callback_data: 'advertise_my_tasks' }
      ]);

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Task manage error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatTimeRemaining(expiresAt: Date): string {
  const now = new Date();
  const diffMs = expiresAt.getTime() - now.getTime();
  
  if (diffMs <= 0) return '–∏—Å—Ç–µ–∫–ª–æ';
  
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  const diffHours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  
  if (diffDays > 0) return `${diffDays} –¥. ${diffHours} —á.`;
  return `${diffHours} —á.`;
}

function getTaskTypeIcon(taskType: string): string {
  switch (taskType) {
    case 'subscribe_channel': return EMOJIS.channel;
    case 'join_group': return EMOJIS.group;
    case 'view_post': return EMOJIS.view;
    case 'bot_interaction': return EMOJIS.bot;
    case 'react_post': return EMOJIS.reaction;
    default: return EMOJIS.advertise;
  }
}

function getTaskStatusIcon(status: string): string {
  switch (status) {
    case 'active': return 'üü¢';
    case 'paused': return '‚è∏Ô∏è';
    case 'completed': return '‚úÖ';
    case 'cancelled': return '‚ùå';
    case 'expired': return '‚è∞';
    default: return '‚ùì';
  }
}

function getTaskStatusText(status: string): string {
  switch (status) {
    case 'active': return '–ê–∫—Ç–∏–≤–Ω–æ';
    case 'paused': return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
    case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
    case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–æ';
    case 'expired': return '–ò—Å—Ç–µ–∫–ª–æ';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

function getActionButtonText(taskType: string): string {
  switch (taskType) {
    case 'subscribe_channel': return '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª';
    case 'join_group': return '–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É';
    case 'view_post': return '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç';
    case 'bot_interaction': return '–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É';
    case 'react_post': return '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é';
    default: return '–ü–µ—Ä–µ–π—Ç–∏';
  }
}

function getTaskInstructions(taskType: string): string {
  switch (taskType) {
    case 'subscribe_channel':
      return `üí° **–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**\n` +
             `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"\n` +
             `2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n` +
             `3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"\n\n` +
             `‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!\n\n`;
    
    case 'join_group':
      return `üí° **–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**\n` +
             `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É"\n` +
             `2. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É\n` +
             `3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"\n\n` +
             `‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ù–µ –ø–æ–∫–∏–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!\n\n`;
    
    case 'view_post':
      return `üí° **–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**\n` +
             `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç"\n` +
             `2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å—Ç\n` +
             `3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"\n\n`;
    
    case 'bot_interaction':
      return `üí° **–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**\n` +
             `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É"\n` +
             `2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n` +
             `3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"\n\n` +
             `‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –≤—Ä—É—á–Ω—É—é!\n\n`;
    
    case 'react_post':
      return `üí° **–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**\n` +
             `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é"\n` +
             `2. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª—é–±—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç\n` +
             `3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"\n\n`;
    
    default:
      return `üí° –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∞–≤—Ç–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è\n\n`;
  }
}

function getBackToTasksCallback(taskType: string): string {
  switch (taskType) {
    case 'subscribe_channel': return 'earn_channels';
    case 'join_group': return 'earn_groups';
    case 'view_post': return 'earn_posts';
    case 'bot_interaction': return 'earn_bots';
    case 'react_post': return 'earn_posts';
    default: return 'earn';
  }
}

async function checkCanUserExecuteTask(task: any, user: any): Promise<{canExecute: boolean, reason?: string}> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
  if (task.status !== 'active') {
    return { canExecute: false, reason: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ' };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
  if (task.expiresAt && task.expiresAt < new Date()) {
    return { canExecute: false, reason: '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫' };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  if (task.remainingExecutions <= 0) {
    return { canExecute: false, reason: '–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è' };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä –ª–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
  if (task.authorId === user.id) {
    return { canExecute: false, reason: '–ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è' };
  }

  return { canExecute: true };
}