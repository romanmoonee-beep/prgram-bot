// src/bot/handlers/payment.ts
import { Bot, Context } from 'grammy';
import { requireAuth } from '../middlewares/auth';
import { logger } from '../../utils/logger';
import { EMOJIS } from '../../utils/constants';
import { User, Transaction } from '../../database/models';
import { config } from '../../config';

export function setupPaymentHandlers(bot: Bot) {

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Telegram Stars
  bot.callbackQuery(/^deposit_(\d+)$/, requireAuth, async (ctx) => {
    try {
      const starsAmount = parseInt(ctx.match![1]);
      const user = ctx.session!.user!;

      logger.userAction(user.telegramId, 'deposit_initiated', { starsAmount });

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GRAM
      const baseGramAmount = starsAmount * config.payment.exchangeRate;
      let bonusPercentage = 0;
      let bonusGram = 0;
      let extraBonus = 0;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ–Ω—É—Å—ã
      if (starsAmount >= 2000) {
        bonusPercentage = 20;
        extraBonus = 1000;
      } else if (starsAmount >= 850) {
        bonusPercentage = 15;
      } else if (starsAmount >= 450) {
        bonusPercentage = 10;
      }

      if (bonusPercentage > 0) {
        bonusGram = Math.floor(baseGramAmount * (bonusPercentage / 100));
      }

      const totalGramAmount = baseGramAmount + bonusGram + extraBonus;

      let title = `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${totalGramAmount.toLocaleString()} GRAM`;
      let description = `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${starsAmount} Stars = ${baseGramAmount.toLocaleString()} GRAM`;

      if (bonusGram > 0 || extraBonus > 0) {
        description += ` + ${(bonusGram + extraBonus).toLocaleString()} GRAM –±–æ–Ω—É—Å`;
        title += ` (–≤–∫–ª—é—á–∞—è –±–æ–Ω—É—Å)`;
      }

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
      const invoice = {
        title,
        description,
        payload: JSON.stringify({
          userId: user.id,
          starsAmount,
          gramAmount: totalGramAmount,
          bonusGram: bonusGram + extraBonus
        }),
        provider_token: '', // –î–ª—è Stars –Ω–µ –Ω—É–∂–µ–Ω
        currency: 'XTR', // Telegram Stars
        prices: [{ label: title, amount: starsAmount }],
        max_tip_amount: 0,
        suggested_tip_amounts: [],
        start_parameter: 'deposit',
        photo_url: undefined,
        photo_size: undefined,
        photo_width: undefined,
        photo_height: undefined,
        need_name: false,
        need_phone_number: false,
        need_email: false,
        need_shipping_address: false,
        send_phone_number_to_provider: false,
        send_email_to_provider: false,
        is_flexible: false
      };

      await ctx.answerCallbackQuery();

      await bot.api.sendInvoice(
        user.id,                        // chat_id
        invoice.title,                  // title
        invoice.description,            // description
        invoice.payload,                // payload
        invoice.currency,               // currency
        invoice.prices,                 // prices
        {                               // other: –æ–±—ä–µ–∫—Ç —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
          need_name: invoice.need_name,
          need_phone_number: invoice.need_phone_number,
          need_email: invoice.need_email,
          need_shipping_address: invoice.need_shipping_address,
          send_phone_number_to_provider: invoice.send_phone_number_to_provider,
          send_email_to_provider: invoice.send_email_to_provider,
          is_flexible: invoice.is_flexible,
        }
      );

      logger.info(`Invoice sent to user ${user.telegramId} for ${starsAmount} stars`);

    } catch (error) {
      logger.error('Deposit handler error:', error);
      await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
  bot.on('pre_checkout_query', async (ctx) => {
    try {
      const query = ctx.preCheckoutQuery;
      const payload = JSON.parse(query.invoice_payload);
      
      logger.info('Pre-checkout query received', {
        userId: payload.userId,
        starsAmount: payload.starsAmount,
        gramAmount: payload.gramAmount
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      const user = await User.findByPk(payload.userId);
      if (!user) {
        await ctx.answerPreCheckoutQuery(false, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      if (user.isBanned) {
        await ctx.answerPreCheckoutQuery(false, '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        return;
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      await ctx.answerPreCheckoutQuery(true);

    } catch (error) {
      logger.error('Pre-checkout query error:', error);
      await ctx.answerPreCheckoutQuery(false, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
  bot.on('message:successful_payment', requireAuth, async (ctx) => {
    try {
      const payment = ctx.message.successful_payment!;
      const payload = JSON.parse(payment.invoice_payload);
      const user = ctx.session!.user!;

      logger.info('Successful payment received', {
        userId: user.id,
        telegramPaymentChargeId: payment.telegram_payment_charge_id,
        providerPaymentChargeId: payment.provider_payment_charge_id,
        payload
      });

      // –ù–∞—á–∏—Å–ª—è–µ–º GRAM
      const balanceBefore = user.balance || 0;
      await user.updateBalance(payload.gramAmount, 'add');

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await Transaction.createDeposit(
        user.id,
        payload.gramAmount,
        balanceBefore,
        payment.telegram_payment_charge_id,
        'telegram_stars'
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      let message = `‚úÖ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!**\n\n`;
      message += `‚≠ê **–û–ø–ª–∞—á–µ–Ω–æ:** ${payload.starsAmount} Stars\n`;
      message += `üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** ${payload.gramAmount.toLocaleString()} GRAM`;
      
      if (payload.bonusGram > 0) {
        message += `\nüéÅ **–ë–æ–Ω—É—Å:** ${payload.bonusGram.toLocaleString()} GRAM`;
      }
      
      message += `\n\nüí≥ **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** ${user.balance?.toLocaleString()} GRAM`;
      message += `\n\nüéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ —Ç—Ä–∞—Ç–∏—Ç—å GRAM –Ω–∞ –¥—Ä—É–≥–∏–µ —Ü–µ–ª–∏.`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üì¢ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'advertise_create' },
            { text: 'üí≥ –°–æ–∑–¥–∞—Ç—å —á–µ–∫', callback_data: 'checks_create' }
          ],
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      };

      await ctx.reply(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      logger.userAction(user.telegramId, 'deposit_completed', {
        starsAmount: payload.starsAmount,
        gramAmount: payload.gramAmount,
        bonusGram: payload.bonusGram,
        newBalance: user.balance,
        transactionId: payment.telegram_payment_charge_id
      });

    } catch (error) {
      logger.error('Successful payment handler error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
  });

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram Stars
  bot.callbackQuery('deposit_info', requireAuth, async (ctx) => {
    try {
      let message = `‚≠ê **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û TELEGRAM STARS**\n\n`;
      message += `**–ß—Ç–æ —Ç–∞–∫–æ–µ Telegram Stars?**\n`;
      message += `Telegram Stars - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø—Ä—è–º–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n\n`;
      
      message += `**–ö–∞–∫ –∫—É–ø–∏—Ç—å Stars?**\n`;
      message += `1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n`;
      message += `2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤ Telegram\n`;
      message += `3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂\n`;
      message += `4. GRAM –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å\n\n`;
      
      message += `**–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:**\n`;
      message += `‚Ä¢ 1 Star = ${config.payment.exchangeRate} GRAM\n\n`;
      
      message += `**–ë–æ–Ω—É—Å—ã –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏:**\n`;
      message += `‚Ä¢ 450+ Stars: +10% –±–æ–Ω—É—Å\n`;
      message += `‚Ä¢ 850+ Stars: +15% –±–æ–Ω—É—Å\n`;
      message += `‚Ä¢ 2000+ Stars: +20% –±–æ–Ω—É—Å + 1000 GRAM\n\n`;
      
      message += `**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**\n`;
      message += `‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ\n`;
      message += `‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Telegram\n`;
      message += `‚úÖ –ù–∏–∫–∞–∫–∏—Ö –∫–æ–º–∏—Å—Å–∏–π\n`;
      message += `‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã`;

      const keyboard = {
        inline_keyboard: [[
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é', callback_data: 'cabinet_deposit' }
        ]]
      };

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await ctx.answerCallbackQuery();
    } catch (error) {
      logger.error('Deposit info error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  logger.info('‚úÖ Payment handlers configured');
}