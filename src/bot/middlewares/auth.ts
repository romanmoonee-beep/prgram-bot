// src/middlewares/auth.ts
import { Context, NextFunction } from 'grammy';
import { User } from '../models/User';
import { logger } from '../utils/logger';

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–∏–ø–∞ Context –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è session
declare module 'grammy' {
  interface Context {
    session?: {
      user?: User;
      isRegistered: boolean;
      isAdmin: boolean;
    };
  }
}

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export async function authMiddleware(ctx: Context, next: NextFunction) {
  try {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, channel posts)
    if (!ctx.from) {
      return next();
    }

    const telegramId = ctx.from.id;
    const username = ctx.from.username;
    const firstName = ctx.from.first_name;
    const lastName = ctx.from.last_name;
    const languageCode = ctx.from.language_code;

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let user = await User.findOne({
      where: { telegramId }
    });

    let isNewUser = false;

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    if (!user) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      const referralCode = telegramId.toString();
      
      user = await User.create({
        telegramId,
        username,
        firstName,
        lastName,
        languageCode: languageCode || 'en',
        referralCode,
        registeredAt: new Date(),
        lastActiveAt: new Date()
      });

      isNewUser = true;
      
      logger.userAction(telegramId, 'registered', {
        username,
        firstName,
        lastName
      });
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
      let needUpdate = false;

      if (user.username !== username) {
        user.username = username;
        needUpdate = true;
      }

      if (user.firstName !== firstName) {
        user.firstName = firstName;
        needUpdate = true;
      }

      if (user.lastName !== lastName) {
        user.lastName = lastName;
        needUpdate = true;
      }

      if (user.languageCode !== languageCode) {
        user.languageCode = languageCode || 'en';
        needUpdate = true;
      }

      if (needUpdate) {
        await user.save();
        logger.userAction(telegramId, 'profile_updated');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const adminIds = process.env.ADMIN_IDS?.split(',').map(id => parseInt(id)) || [];
    const isAdmin = adminIds.includes(telegramId);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session = {
      user,
      isRegistered: true,
      isAdmin
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (isNewUser) {
      await handleReferralForNewUser(ctx, user);
    }

    return next();

  } catch (error) {
    logger.error('Auth middleware error:', error, {
      userId: ctx.from?.id,
      username: ctx.from?.username
    });

    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–µ—Å—Å–∏—é
    ctx.session = {
      isRegistered: false,
      isAdmin: false
    };

    return next();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
async function handleReferralForNewUser(ctx: Context, user: User) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
    const message = ctx.message;
    if (message && 'text' in message && message.text) {
      const startPayload = message.text.split(' ')[1];
      
      if (startPayload && /^\d+$/.test(startPayload)) {
        const referrerTelegramId = parseInt(startPayload);
        
        // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        const referrer = await User.findOne({
          where: { telegramId: referrerTelegramId }
        });

        if (referrer && referrer.id !== user.id) {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
          user.referrerId = referrer.id;
          await user.save();

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
          referrer.referralsCount = (referrer.referralsCount || 0) + 1;
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ–Ω—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
          const bonusAmount = referrer.getReferralBonus();
          
          // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
          await referrer.updateBalance(bonusAmount, 'add');
          await referrer.save();

          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const { Transaction } = await import('../models/Transaction');
          await Transaction.createReferralBonus(
            referrer.id,
            user.id,
            bonusAmount,
            (referrer.balance || 0) - bonusAmount
          );

          // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
          const { Notification } = await import('../models/Notification');
          await Notification.createReferralJoined(
            referrer.id,
            user.getDisplayName(),
            bonusAmount
          );

          logger.userAction(user.telegramId, 'referral_registered', {
            referrerId: referrer.id,
            bonusAmount
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É (–µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω)
          try {
            await ctx.api.sendMessage(
              referrer.telegramId,
              `üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n\n` +
              `üë§ ${user.getDisplayName()}\n` +
              `üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${bonusAmount} GRAM\n\n` +
              `–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrer.referralsCount}`
            );
          } catch (notificationError) {
            logger.warn('Failed to send referral notification:', notificationError);
          }
        }
      }
    }
  } catch (error) {
    logger.error('Referral handling error:', error);
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function requireAuth(ctx: Context, next: NextFunction) {
  if (!ctx.session?.isRegistered || !ctx.session.user) {
    return ctx.reply(
      '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n' +
      '–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
    );
  }
  
  if (ctx.session.user.isBanned) {
    return ctx.reply(
      'üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n' +
      '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.'
    );
  }

  if (!ctx.session.user.isActive) {
    return ctx.reply(
      '‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.\n' +
      '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.'
    );
  }

  return next();
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function requireActive(ctx: Context, next: NextFunction) {
  if (!ctx.session?.user?.isActive || ctx.session.user.isBanned) {
    return ctx.reply(
      '‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n' +
      '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
  
  return next();
}

export default authMiddleware;