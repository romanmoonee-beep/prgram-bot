// src/bot/keyboards/index.ts
// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
export {
  getMainMenuKeyboard,
  getCabinetKeyboard,
  getEarnKeyboard,
  getAdvertiseKeyboard,
  getChecksKeyboard,
  getReferralsKeyboard,
  getPaginationKeyboard,
  getConfirmKeyboard,
  getBackKeyboard,
  getOnlyBackKeyboard,
  getAdminKeyboard
} from './main';

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
export {
  getSubscriptionCheckKeyboard,
  getNotificationSettingsKeyboard,
  getDepositKeyboard,
  getAdminPanelKeyboard,
  getUserManagementKeyboard,
  getTaskManagementKeyboard,
  getFinanceKeyboard,
  getBroadcastKeyboard,
  getSystemSettingsKeyboard,
  getMaintenanceKeyboard,
  getCriticalConfirmKeyboard,
  getPrivacyKeyboard,
  getLanguageKeyboard,
  getTaskModerationKeyboard,
  getRejectionReasonKeyboard,
  getBroadcastTypeKeyboard,
  getStatsKeyboard
} from './additional';

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
export {
  getSubscriptionMainKeyboard,
  getPublicSubscriptionKeyboard,
  getPrivateSubscriptionKeyboard,
  getInviteLinkSubscriptionKeyboard,
  getReferralSubscriptionKeyboard,
  getAutoDeleteKeyboard,
  getSubscriptionStatsKeyboard,
  getAutoDeleteTimeKeyboard,
  getSubscriptionExamplesKeyboard,
  getSubscriptionManageKeyboard,
  getDeleteSubscriptionKeyboard,
  getSubscriptionHelpKeyboard,
  getReferralOPSetupKeyboard
} from './subscription';

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
export {
  getStarsPaymentKeyboard,
  getTaskSortKeyboard,
  getTaskFiltersKeyboard,
  getTaskConfirmKeyboard,
  getManualTaskKeyboard,
  getPeriodKeyboard,
  getTaskManageKeyboard,
  getTaskSettingsKeyboard,
  getTaskReportKeyboard,
  getCheckTypeKeyboard,
  getCheckAdvancedKeyboard,
  getCheckManageKeyboard,
  getCheckActivationKeyboard,
  getReferralActionsKeyboard,
  getReferralPromoKeyboard,
  getExportKeyboard,
  getExportFormatKeyboard,
  getQuickActionsKeyboard
} from './action';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
 */
export function createSelectionKeyboard(
  items: Array<{id: string | number, text: string, data: string}>,
  prefix: string,
  backData: string,
  itemsPerRow: number = 2
) {
  const { InlineKeyboard } = require('grammy');
  const keyboard = new InlineKeyboard();
  
  items.forEach((item, index) => {
    keyboard.text(item.text, `${prefix}_${item.data}`);
    if ((index + 1) % itemsPerRow === 0) keyboard.row();
  });
  
  if (items.length % itemsPerRow !== 0) keyboard.row();
  keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', backData);
  
  return keyboard;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏ –≤–∫–ª/–≤—ã–∫–ª
 */
export function createToggleKeyboard(
  options: Array<{key: string, text: string, enabled: boolean}>,
  saveAction: string,
  backData: string
) {
  const { InlineKeyboard } = require('grammy');
  const keyboard = new InlineKeyboard();
  
  options.forEach((option, index) => {
    const status = option.enabled ? '‚úÖ' : '‚ùå';
    keyboard.text(`${status} ${option.text}`, `toggle_${option.key}`);
    if ((index + 1) % 2 === 0) keyboard.row();
  });
  
  if (options.length % 2 !== 0) keyboard.row();
  
  keyboard
    .text('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', saveAction)
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', backData);
  
  return keyboard;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 */
export function createNumberKeyboard(
  values: number[],
  prefix: string,
  currentValue?: number,
  backData: string = 'back'
) {
  const { InlineKeyboard } = require('grammy');
  const keyboard = new InlineKeyboard();
  
  values.forEach((value, index) => {
    const selected = value === currentValue ? '‚úÖ ' : '';
    keyboard.text(`${selected}${value}`, `${prefix}_${value}`);
    if ((index + 1) % 3 === 0) keyboard.row();
  });
  
  if (values.length % 3 !== 0) keyboard.row();
  keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', backData);
  
  return keyboard;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
export function createConfirmationKeyboard(
  confirmText: string,
  confirmData: string,
  cancelData: string = 'cancel',
  infoText?: string,
  infoData?: string
) {
  const { InlineKeyboard } = require('grammy');
  const keyboard = new InlineKeyboard()
    .text(`‚úÖ ${confirmText}`, confirmData)
    .text('‚ùå –û—Ç–º–µ–Ω–∞', cancelData);
    
  if (infoText && infoData) {
    keyboard.row().text(`‚ÑπÔ∏è ${infoText}`, infoData);
  }
  
  return keyboard;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–∏—Å–∫–æ–º –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
 */
export function createSearchNavigationKeyboard(
  searchAction: string,
  sortAction: string,
  filterAction: string,
  backData: string
) {
  const { InlineKeyboard } = require('grammy');
  return new InlineKeyboard()
    .text('üîç –ü–æ–∏—Å–∫', searchAction)
    .text('üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', sortAction).row()
    .text('üîß –§–∏–ª—å—Ç—Ä—ã', filterAction)
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', backData);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å/–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
 */
export function createStateManagementKeyboard(
  isEnabled: boolean,
  enableAction: string,
  disableAction: string,
  settingsAction: string,
  backData: string
) {
  const { InlineKeyboard } = require('grammy');
  const keyboard = new InlineKeyboard();
  
  if (isEnabled) {
    keyboard
      .text('‚è∏Ô∏è –û—Ç–∫–ª—é—á–∏—Ç—å', disableAction)
      .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', settingsAction);
  } else {
    keyboard.text('‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å', enableAction);
  }
  
  keyboard.row().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', backData);
  
  return keyboard;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
 */
export function createTimeIntervalKeyboard(
  intervals: Array<{text: string, value: string}>,
  prefix: string,
  backData: string
) {
  const { InlineKeyboard } = require('grammy');
  const keyboard = new InlineKeyboard();
  
  intervals.forEach((interval, index) => {
    keyboard.text(interval.text, `${prefix}_${interval.value}`);
    if ((index + 1) % 2 === 0) keyboard.row();
  });
  
  if (intervals.length % 2 !== 0) keyboard.row();
  keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', backData);
  
  return keyboard;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å —É–º–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
 */
export function createAdvancedPaginationKeyboard(
  currentPage: number,
  totalPages: number,
  prefix: string,
  maxVisiblePages: number = 5
) {
  const { InlineKeyboard } = require('grammy');
  const keyboard = new InlineKeyboard();
  
  if (totalPages <= 1) return keyboard;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü
  let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
  let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∞–∫—Å–∏–º—É–º–∞
  if (endPage - startPage < maxVisiblePages - 1) {
    startPage = Math.max(1, endPage - maxVisiblePages + 1);
  }
  
  const buttons = [];
  
  // –ö–Ω–æ–ø–∫–∞ "–í –Ω–∞—á–∞–ª–æ" –µ—Å–ª–∏ –º—ã –¥–∞–ª–µ–∫–æ –æ—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (startPage > 2) {
    buttons.push({ text: '‚èÆÔ∏è', data: `${prefix}_page_1` });
  }
  
}