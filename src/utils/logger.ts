// src/utils/logger.ts
import fs from 'fs';
import path from 'path';

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const logsDir = path.join(process.cwd(), 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

// Enum –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤
enum LogLevel {
  ERROR = 0,
  WARN = 1,
  INFO = 2,
  DEBUG = 3
}

interface UserActionData {
  [key: string]: any;
  ip?: string;
  userAgent?: string;
}

interface SecurityContext {
  userId?: number;
  chatId?: number;
  updateId?: number;
  username?: string;
  command?: string;
}

class Logger {
  private logLevel: LogLevel;
  private logFile: string;
  private userActionsFile: string;
  private financialFile: string;
  private securityFile: string;

  constructor() {
    this.logLevel = process.env.NODE_ENV === 'development' ? LogLevel.DEBUG : LogLevel.INFO;
    const dateStr = new Date().toISOString().split('T')[0];
    this.logFile = path.join(logsDir, `app-${dateStr}.log`);
    this.userActionsFile = path.join(logsDir, `user-actions-${dateStr}.log`);
    this.financialFile = path.join(logsDir, `financial-${dateStr}.log`);
    this.securityFile = path.join(logsDir, `security-${dateStr}.log`);
  }

  private formatMessage(level: string, message: string, ...args: any[]): string {
    const timestamp = new Date().toISOString();
    const formattedArgs = args.length > 0 ? ' ' + args.map(arg => 
      typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
    ).join(' ') : '';
    
    return `[${timestamp}] ${level}: ${message}${formattedArgs}`;
  }

  private writeToFile(filename: string, message: string): void {
    try {
      fs.appendFileSync(filename, message + '\n');
    } catch (error) {
      console.error('Failed to write to log file:', error);
    }
  }

  private log(level: LogLevel, levelName: string, message: string, ...args: any[]): void {
    if (level <= this.logLevel) {
      const formattedMessage = this.formatMessage(levelName, message, ...args);
      
      // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–∞–º–∏ (–≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
      switch (level) {
        case LogLevel.ERROR:
          console.error('\x1b[31m%s\x1b[0m', formattedMessage); // –∫—Ä–∞—Å–Ω—ã–π
          break;
        case LogLevel.WARN:
          console.warn('\x1b[33m%s\x1b[0m', formattedMessage); // –∂–µ–ª—Ç—ã–π
          break;
        case LogLevel.INFO:
          console.info('\x1b[36m%s\x1b[0m', formattedMessage); // –≥–æ–ª—É–±–æ–π
          break;
        case LogLevel.DEBUG:
          console.debug('\x1b[37m%s\x1b[0m', formattedMessage); // –±–µ–ª—ã–π
          break;
      }
      
      // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (–≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
      if (process.env.NODE_ENV === 'production') {
        if (level <= LogLevel.WARN) {
          this.writeToFile(this.logFile, formattedMessage);
        }
      } else {
        this.writeToFile(this.logFile, formattedMessage);
      }
    }
  }

  // –í–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  error(message: string, ...args: any[]): void {
    this.log(LogLevel.ERROR, 'ERROR', message, ...args);
  }

  warn(message: string, ...args: any[]): void {
    this.log(LogLevel.WARN, 'WARN', message, ...args);
  }

  info(message: string, ...args: any[]): void {
    this.log(LogLevel.INFO, 'INFO', message, ...args);
  }

  debug(message: string, ...args: any[]): void {
    this.log(LogLevel.DEBUG, 'DEBUG', message, ...args);
  }

  // –í–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±–æ—Ç–∞ –æ—Å—Ç–∞—é—Ç—Å—è
  botEvent(event: string, data?: any): void {
    this.info(`ü§ñ Bot Event: ${event}`, data);
  }

  userAction(userId: number, action: string, data?: any): void {
    this.info(`üë§ User ${userId}: ${action}`, data);
  }

  taskEvent(taskId: number, event: string, data?: any): void {
    this.info(`üìã Task ${taskId}: ${event}`, data);
  }

  paymentEvent(userId: number, amount: number, type: string, data?: any): void {
    this.info(`üí∞ Payment - User ${userId}: ${amount} GRAM (${type})`, data);
  }

  // –ù–û–í–´–ï –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–ï–¢–û–î–´:

  /**
   * –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
   */
  async detailedUserAction(
    userId: number, 
    action: string, 
    data?: UserActionData,
    success: boolean = true,
    duration?: number,
    errorMessage?: string
  ): Promise<void> {
    try {
      const logData = {
        userId,
        action,
        timestamp: new Date().toISOString(),
        data: data || {},
        ip: data?.ip || 'unknown',
        userAgent: data?.userAgent || 'unknown',
        success,
        duration,
        errorMessage
      };

      // –í–∞—à –æ–±—ã—á–Ω—ã–π –ª–æ–≥
      if (success) {
        this.userAction(userId, action, data);
      } else {
        this.warn(`‚ùå Failed action: User ${userId} - ${action}`, { ...data, errorMessage });
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      const level = success ? 'USER_ACTION' : 'USER_ACTION_FAILED';
      const message = success 
        ? `User ${userId} performed ${action}`
        : `User ${userId} failed ${action}: ${errorMessage}`;
      
      const detailedMessage = this.formatMessage(level, message, logData);
      this.writeToFile(this.userActionsFile, detailedMessage);

      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î
      if (process.env.SAVE_USER_ACTIONS_TO_DB === 'true') {
        await this.saveUserActionToDBWithStatus(logData);
      }

    } catch (error) {
      this.error('Failed to log detailed user action', error, { userId, action, data });
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞
   */
  private async saveUserActionToDBWithStatus(logData: any): Promise<void> {
    try {
      const criticalActions = [
        'registered', 'login', 'logout', 'task_created', 'task_completed', 
        'deposit_completed', 'withdrawal_requested', 'check_created', 
        'check_activated', 'referral_registered', 'admin_action'
      ];

      if (criticalActions.includes(logData.action)) {
        const { default: UserAction } = await import('../database/models/UserAction');
        await UserAction.create({
          userId: logData.userId,
          action: logData.action,
          data: logData.data,
          ip: logData.ip,
          userAgent: logData.userAgent,
          success: logData.success,
          duration: logData.duration,
          errorMessage: logData.errorMessage,
          createdAt: new Date(logData.timestamp)
        });
      }
    } catch (error) {
      this.error('Failed to save user action to DB', error);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
   */
  botError(message: string, error: any, context: SecurityContext): void {
    const errorDetails = {
      message,
      error: error?.message || error,
      stack: error?.stack,
      ...context
    };

    this.error(`üö® Bot Error: ${message}`, errorDetails);
  }

  /**
   * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  performance(operation: string, duration: number, meta?: any): void {
    const perfMessage = `‚ö° Performance: ${operation} took ${duration}ms`;
    this.debug(perfMessage, meta);

    // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è, –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ warning
    if (duration > 5000) { // 5 —Å–µ–∫—É–Ω–¥
      this.warn(`üêå Slow operation detected: ${operation} took ${duration}ms`, meta);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  security(message: string, userId: number, details?: any): void {
    const securityData = {
      userId,
      message,
      details,
      timestamp: new Date().toISOString(),
      severity: 'medium'
    };

    this.warn(`üîí Security: ${message}`, securityData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const securityMessage = this.formatMessage('SECURITY', 
      `User ${userId}: ${message}`, securityData);
    this.writeToFile(this.securityFile, securityMessage);

    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∞–º
    if (process.env.NODE_ENV === 'production') {
      this.notifyAdminsIfCritical(message, userId, details);
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
   */
  private notifyAdminsIfCritical(message: string, userId: number, details?: any): void {
    const criticalKeywords = ['hack', 'attack', 'fraud', 'suspicious', 'violation'];
    const isCritical = criticalKeywords.some(keyword => 
      message.toLowerCase().includes(keyword)
    );

    if (isCritical) {
      const alertMessage = `üö® CRITICAL SECURITY ALERT\nUser: ${userId}\nIncident: ${message}`;
      this.error('CRITICAL SECURITY INCIDENT', new Error(message), { 
        userId, 
        details, 
        adminNotified: true,
        severity: 'critical'
      });
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram –∞–¥–º–∏–Ω–∞–º
      // await this.sendToAdminBot(alertMessage);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–π logger —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
   */
  child(context: { userId?: number; chatId?: number; action?: string }) {
    return {
      info: (message: string, meta?: any) => this.info(message, { ...context, ...meta }),
      error: (message: string, error?: any, meta?: any) => this.error(message, error, { ...context, ...meta }),
      warn: (message: string, meta?: any) => this.warn(message, { ...context, ...meta }),
      debug: (message: string, meta?: any) => this.debug(message, { ...context, ...meta }),
      userAction: (action: string, data?: UserActionData) => 
        this.detailedUserAction(context.userId || 0, action, { ...context, ...data }),
      botEvent: (event: string, data?: any) => this.botEvent(event, { ...context, ...data }),
      taskEvent: (taskId: number, event: string, data?: any) => this.taskEvent(taskId, event, { ...context, ...data })
    };
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
   */
  async featureUsage(feature: string, userId: number, success: boolean = true, duration?: number): Promise<void> {
    const data: any = { 
      success, 
      feature,
      timestamp: new Date().toISOString()
    };
    
    if (duration !== undefined) {
      data.duration = duration;
    }
    
    await this.detailedUserAction(userId, `feature_${feature}`, data);
    
    if (!success) {
      this.warn(`‚ùå Feature failed: ${feature}`, { userId, ...data });
    }
  }

  /**
   * –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏
   */
  businessMetric(metric: string, value: number, userId?: number, meta?: any): void {
    const data = {
      metric,
      value,
      userId,
      timestamp: new Date().toISOString(),
      ...meta
    };

    this.info(`üìä Business Metric: ${metric} = ${value}`, data);
  }

  /**
   * –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async financialOperation(
    userId: number, 
    operation: 'deposit' | 'withdraw' | 'task_payment' | 'reward' | 'refund',
    amount: number,
    details: any
  ): Promise<void> {
    const data = {
      userId,
      operation,
      amount,
      details,
      timestamp: new Date().toISOString()
    };

    // –û–±—ã—á–Ω—ã–π –ª–æ–≥ —á–µ—Ä–µ–∑ –≤–∞—à paymentEvent
    this.paymentEvent(userId, amount, operation, details);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ñ–∞–π–ª
    const financialMessage = this.formatMessage('FINANCIAL', 
      `${operation.toUpperCase()}: User ${userId} - ${amount} GRAM`, data);
    this.writeToFile(this.financialFile, financialMessage);

    // –ë–æ–ª—å—à–∏–µ —Å—É–º–º—ã –ª–æ–≥–∏—Ä—É–µ–º –æ—Å–æ–±–æ
    if (amount > 1000) {
      this.warn(`üíé Large financial operation: ${operation} - ${amount} GRAM`, data);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  apiRequest(method: string, url: string, userId?: number, duration?: number, statusCode?: number): void {
    const data = {
      method,
      url,
      userId,
      duration,
      statusCode,
      timestamp: new Date().toISOString()
    };

    const message = `üåê API ${method} ${url}`;
    
    if (statusCode && statusCode >= 400) {
      this.warn(`${message} - ${statusCode}`, data);
    } else {
      this.debug(message, data);
    }

    if (duration && duration > 3000) {
      this.warn(`üêå Slow API request: ${method} ${url} took ${duration}ms`, data);
    }
  }

  /**
   * –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ (–≤—ã–∑—ã–≤–∞—Ç—å –ø–æ cron —Ä–∞–∑ –≤ –¥–µ–Ω—å)
   */
  rotateLogs(): void {
    try {
      const files = fs.readdirSync(logsDir);
      const oldFiles = files.filter(file => {
        const filePath = path.join(logsDir, file);
        const stats = fs.statSync(filePath);
        const daysOld = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60 * 24);
        return daysOld > 30; // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
      });

      oldFiles.forEach(file => {
        fs.unlinkSync(path.join(logsDir, file));
        this.info(`üóëÔ∏è  Rotated old log file: ${file}`);
      });

    } catch (error) {
      this.error('Failed to rotate logs', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
   */
  async getUserAnalytics(userId: number, days: number = 30): Promise<any> {
    try {
      const { default: UserAction } = await import('../database/models/UserAction');
      
      const summary = await UserAction.getUserActivitySummary(userId, days);
      const recentActions = await UserAction.getUserActions(userId, 20);
      
      return {
        summary,
        recentActions: recentActions.map(action => ({
          action: action.action,
          success: action.success,
          duration: action.duration,
          createdAt: action.createdAt,
          data: action.data
        }))
      };
    } catch (error) {
      this.error('Failed to get user analytics', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ—É–¥–∞—á–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º
   */
  async getFailureAnalytics(days: number = 7): Promise<any> {
    try {
      const { default: UserAction } = await import('../database/models/UserAction');
      
      const failedActions = await UserAction.getFailedActions(days);
      
      return failedActions.map(action => ({
        userId: action.userId,
        username: action.user?.username,
        action: action.action,
        errorMessage: action.errorMessage,
        createdAt: action.createdAt,
        data: action.data
      }));
    } catch (error) {
      this.error('Failed to get failure analytics', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
   */
  async getActionStatistics(action?: string, days: number = 30): Promise<any> {
    try {
      const { default: UserAction } = await import('../database/models/UserAction');
      
      if (action) {
        return await UserAction.getActionStats(action, days);
      } else {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - days);

        return await UserAction.findAll({
          attributes: [
            'action',
            [UserAction.sequelize!.fn('COUNT', UserAction.sequelize!.col('id')), 'count'],
            [UserAction.sequelize!.fn('COUNT', UserAction.sequelize!.literal('CASE WHEN success = true THEN 1 END')), 'successCount'],
            [UserAction.sequelize!.fn('AVG', UserAction.sequelize!.col('duration')), 'avgDuration']
          ],
          where: {
            createdAt: {
              [UserAction.sequelize!.Op.gte]: startDate
            }
          },
          group: ['action'],
          order: [[UserAction.sequelize!.literal('count'), 'DESC']],
          raw: true
        });
      }
    } catch (error) {
      this.error('Failed to get action statistics', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const logger = new Logger();
export default logger;
