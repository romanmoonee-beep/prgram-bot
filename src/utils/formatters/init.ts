// src/utils/formatters.ts
import { EMOJIS, TASK_TYPES, USER_LEVELS, TRANSACTION_TYPES } from './constants';
import { formatGram, formatTimeAgo, formatTimeRemaining, createProgressBar, getLevelText, getLevelEmoji } from './helpers';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface UserData {
  id: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  balance?: number;
  level: string;
  tasksCompleted?: number;
  tasksCreated?: number;
  referralsCount?: number;
  totalEarned?: number;
  registeredAt: Date;
  lastActiveAt: Date;
}

interface TaskData {
  id: number;
  title: string;
  type: string;
  reward: number;
  totalExecutions: number;
  completedExecutions?: number;
  remainingExecutions?: number;
  status: string;
  views?: number;
  clicks?: number;
  conversions?: number;
  createdAt: Date;
  expiresAt: Date;
}

interface TransactionData {
  id: number;
  type: string;
  amount: number;
  description?: string;
  createdAt: Date;
  status: string;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function formatUserProfile(user: UserData): string {
  const displayName = user.firstName && user.lastName 
    ? `${user.firstName} ${user.lastName}`
    : user.firstName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  const levelEmoji = getLevelEmoji(user.level);
  const levelText = getLevelText(user.level);

  return `${EMOJIS.user} **${displayName}**

${EMOJIS.info} **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚îú ID: \`${user.id}\`
‚îú Username: ${user.username ? `@${user.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚îú –£—Ä–æ–≤–µ–Ω—å: ${levelText} ${levelEmoji}
‚îî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${formatTimeAgo(user.registeredAt)}

${EMOJIS.money} **–ë–∞–ª–∞–Ω—Å:** ${formatGram(user.balance || 0)}

${EMOJIS.stats} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${user.tasksCompleted || 0}
‚îú –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${user.tasksCreated || 0}
‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referralsCount || 0}
‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: ${formatGram(user.totalEarned || 0)}

${EMOJIS.clock} –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${formatTimeAgo(user.lastActiveAt)}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export function formatUserShort(user: UserData): string {
  const displayName = user.firstName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const levelEmoji = getLevelEmoji(user.level);
  
  return `${levelEmoji} ${displayName} | ${formatGram(user.balance || 0)}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞
export function formatTaskListItem(task: TaskData, index?: number): string {
  const typeIcon = getTaskTypeIcon(task.type);
  const statusIcon = getTaskStatusIcon(task.status);
  const progress = task.totalExecutions > 0 
    ? Math.round(((task.completedExecutions || 0) / task.totalExecutions) * 100)
    : 0;

  const prefix = index !== undefined ? `${index}. ` : '';

  return `${prefix}${typeIcon} **${task.title}**
${EMOJIS.money} ${formatGram(task.reward)} | ${statusIcon} ${progress}% | ${EMOJIS.view} ${task.views || 0}
${EMOJIS.timer} ${formatTimeRemaining(task.expiresAt)}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏
export function formatTaskDetails(task: TaskData): string {
  const typeIcon = getTaskTypeIcon(task.type);
  const typeText = getTaskTypeText(task.type);
  const statusIcon = getTaskStatusIcon(task.status);
  const progress = task.totalExecutions > 0 
    ? ((task.completedExecutions || 0) / task.totalExecutions)
    : 0;
  const progressBar = createProgressBar(task.completedExecutions || 0, task.totalExecutions);
  const conversionRate = (task.clicks || 0) > 0 
    ? Math.round(((task.conversions || 0) / (task.clicks || 0)) * 100)
    : 0;

  return `${typeIcon} **–ó–∞–¥–∞–Ω–∏–µ #${task.id}**

${EMOJIS.info} **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title}
‚îú –¢–∏–ø: ${typeText}
‚îú –°—Ç–∞—Ç—É—Å: ${statusIcon} ${getTaskStatusText(task.status)}
‚îî –°–æ–∑–¥–∞–Ω–æ: ${formatTimeAgo(task.createdAt)}

${EMOJIS.money} **–£—Å–ª–æ–≤–∏—è:**
‚îú –ù–∞–≥—Ä–∞–¥–∞: ${formatGram(task.reward)}
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${task.completedExecutions || 0}/${task.totalExecutions}
‚îú –û—Å—Ç–∞–ª–æ—Å—å: ${task.remainingExecutions || 0}
‚îî –ò—Å—Ç–µ–∫–∞–µ—Ç: ${formatTimeRemaining(task.expiresAt)}

${EMOJIS.chart} **–ü—Ä–æ–≥—Ä–µ—Å—Å:**
${progressBar} ${Math.round(progress * 100)}%

${EMOJIS.stats} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚îú –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${task.views || 0}
‚îú –ü–µ—Ä–µ—Ö–æ–¥—ã: ${task.clicks || 0}
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${task.conversions || 0}
‚îî –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${conversionRate}%`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
export function formatTransaction(transaction: TransactionData): string {
  const typeIcon = getTransactionTypeIcon(transaction.type);
  const typeText = getTransactionTypeText(transaction.type);
  const isIncome = isIncomeTransaction(transaction.type);
  const amountText = isIncome 
    ? `+${formatGram(transaction.amount)}`
    : `-${formatGram(transaction.amount)}`;
  const statusIcon = transaction.status === 'completed' ? EMOJIS.check : EMOJIS.pending;

  return `${typeIcon} ${typeText}
${amountText} ${statusIcon}
${transaction.description || ''}
${formatTimeAgo(transaction.createdAt)}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export function formatTransactionsList(transactions: TransactionData[]): string {
  if (transactions.length === 0) {
    return `${EMOJIS.info} –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞`;
  }

  const header = `${EMOJIS.money} **–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π** (${transactions.length})\n`;
  const items = transactions.map((tx, index) => 
    `${index + 1}. ${formatTransaction(tx)}`
  ).join('\n\n');

  return header + items;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function formatUserStats(user: UserData, period: 'today' | 'week' | 'month' = 'today'): string {
  const periodText = {
    'today': '–ó–∞ —Å–µ–≥–æ–¥–Ω—è',
    'week': '–ó–∞ –Ω–µ–¥–µ–ª—é', 
    'month': '–ó–∞ –º–µ—Å—è—Ü'
  }[period];

  return `${EMOJIS.chart} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${periodText.toLowerCase()}**

${EMOJIS.money} **–§–∏–Ω–∞–Ω—Å—ã:**
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatGram(user.totalEarned || 0)}
‚îú –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${formatGram(user.balance || 0)}
‚îî –£—Ä–æ–≤–µ–Ω—å: ${getLevelText(user.level)} ${getLevelEmoji(user.level)}

${EMOJIS.stats} **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${user.tasksCompleted || 0}
‚îú –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${user.tasksCreated || 0}
‚îî –ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referralsCount || 0}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export function formatUserTop(users: UserData[], title: string = '–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'): string {
  if (users.length === 0) {
    return `${EMOJIS.info} ${title}: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç`;
  }

  const header = `${EMOJIS.chart} **${title}**\n`;
  
  const items = users.map((user, index) => {
    const position = index + 1;
    const medal = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : `${position}.`;
    const displayName = user.firstName || user.username || `ID${user.id}`;
    const levelEmoji = getLevelEmoji(user.level);
    
    return `${medal} ${levelEmoji} ${displayName} - ${formatGram(user.totalEarned || 0)}`;
  }).join('\n');

  return header + items;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export function formatNotification(type: string, title: string, message: string, data?: any): string {
  const icon = getNotificationIcon(type);
  let formattedMessage = `${icon} **${title}**\n\n${message}`;
  
  if (data?.reward) {
    formattedMessage += `\n\n${EMOJIS.money} –ü–æ–ª—É—á–µ–Ω–æ: ${formatGram(data.reward)}`;
  }
  
  return formattedMessage;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞
export function formatCheck(check: {
  code: string;
  totalAmount: number;
  maxActivations: number;
  currentActivations?: number;
  comment?: string;
  createdAt: Date;
  expiresAt?: Date;
}): string {
  const remaining = check.maxActivations - (check.currentActivations || 0);
  const amountPerActivation = Math.floor(check.totalAmount / check.maxActivations);
  const progressBar = createProgressBar(check.currentActivations || 0, check.maxActivations);
  const progress = Math.round(((check.currentActivations || 0) / check.maxActivations) * 100);

  let result = `${EMOJIS.checks} **–ß–µ–∫ ${check.code}**

${EMOJIS.money} **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚îú –°—É–º–º–∞ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é: ${formatGram(amountPerActivation)}
‚îú –ê–∫—Ç–∏–≤–∞—Ü–∏–π: ${check.currentActivations || 0}/${check.maxActivations}
‚îú –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${remaining}
‚îî –°–æ–∑–¥–∞–Ω: ${formatTimeAgo(check.createdAt)}

${EMOJIS.chart} **–ü—Ä–æ–≥—Ä–µ—Å—Å:**
${progressBar} ${progress}%`;

  if (check.comment) {
    result += `\n\n${EMOJIS.info} **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**\n${check.comment}`;
  }

  if (check.expiresAt) {
    result += `\n\n${EMOJIS.timer} –ò—Å—Ç–µ–∫–∞–µ—Ç: ${formatTimeRemaining(check.expiresAt)}`;
  }

  return result;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export function formatReferralStats(user: UserData, referrals: UserData[] = []): string {
  const totalEarned = referrals.reduce((sum, ref) => sum + (ref.totalEarned || 0), 0) * 0.1; // 10% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  
  return `${EMOJIS.referrals} **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**

${EMOJIS.info} **–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:**
\`t.me/prgram_bot?start=${user.id}\`

${EMOJIS.stats} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚îú –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referralsCount || 0}
‚îú Premium —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrals.filter(r => r.level === 'premium').length}
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${formatGram(Math.floor(totalEarned))}
‚îî –°—Ä–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${formatGram(Math.floor((user.totalEarned || 0) / Math.max(1, user.referralsCount || 1)))}

${EMOJIS.money} **–°—Ç–∞–≤–∫–∏:**
‚îú –ó–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${formatGram(1000)}
‚îú –ó–∞ Premium —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${formatGram(3000)}
‚îú –û—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: 10%
‚îî –û—Ç –∑–∞–¥–∞–Ω–∏–π: 5%`;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤

function getTaskTypeIcon(type: string): string {
  switch (type) {
    case TASK_TYPES.SUBSCRIBE_CHANNEL: return EMOJIS.channel;
    case TASK_TYPES.JOIN_GROUP: return EMOJIS.group;
    case TASK_TYPES.VIEW_POST: return EMOJIS.view;
    case TASK_TYPES.BOT_INTERACTION: return EMOJIS.bot;
    case TASK_TYPES.REACT_POST: return EMOJIS.reaction;
    default: return EMOJIS.info;
  }
}

function getTaskTypeText(type: string): string {
  switch (type) {
    case TASK_TYPES.SUBSCRIBE_CHANNEL: return '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª';
    case TASK_TYPES.JOIN_GROUP: return '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É';
    case TASK_TYPES.VIEW_POST: return '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞';
    case TASK_TYPES.BOT_INTERACTION: return '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º';
    case TASK_TYPES.REACT_POST: return '–†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
  }
}

function getTaskStatusIcon(status: string): string {
  switch (status) {
    case 'active': return EMOJIS.active;
    case 'paused': return EMOJIS.pending;
    case 'completed': return EMOJIS.completed;
    case 'cancelled': return EMOJIS.failed;
    case 'expired': return EMOJIS.timer;
    default: return EMOJIS.info;
  }
}

function getTaskStatusText(status: string): string {
  switch (status) {
    case 'active': return '–ê–∫—Ç–∏–≤–Ω–æ–µ';
    case 'paused': return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
    case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
    case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–æ';
    case 'expired': return '–ò—Å—Ç–µ–∫–ª–æ';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

function getTransactionTypeIcon(type: string): string {
  switch (type) {
    case TRANSACTION_TYPES.DEPOSIT: return 'üí≥';
    case TRANSACTION_TYPES.WITHDRAW: return 'üí∏';
    case TRANSACTION_TYPES.TASK_REWARD: return 'üéØ';
    case TRANSACTION_TYPES.TASK_PAYMENT: return 'üì¢';
    case TRANSACTION_TYPES.REFERRAL_BONUS: return 'ü§ù';
    case TRANSACTION_TYPES.COMMISSION: return 'üè¶';
    case TRANSACTION_TYPES.REFUND: return '‚Ü©Ô∏è';
    case TRANSACTION_TYPES.CHECK_SENT: return 'üì§';
    case TRANSACTION_TYPES.CHECK_RECEIVED: return 'üì•';
    default: return EMOJIS.money;
  }
}

function getTransactionTypeText(type: string): string {
  switch (type) {
    case TRANSACTION_TYPES.DEPOSIT: return '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ';
    case TRANSACTION_TYPES.WITHDRAW: return '–í—ã–≤–æ–¥';
    case TRANSACTION_TYPES.TASK_REWARD: return '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ';
    case TRANSACTION_TYPES.TASK_PAYMENT: return '–û–ø–ª–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è';
    case TRANSACTION_TYPES.REFERRAL_BONUS: return '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å';
    case TRANSACTION_TYPES.COMMISSION: return '–ö–æ–º–∏—Å—Å–∏—è';
    case TRANSACTION_TYPES.REFUND: return '–í–æ–∑–≤—Ä–∞—Ç';
    case TRANSACTION_TYPES.CHECK_SENT: return '–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞';
    case TRANSACTION_TYPES.CHECK_RECEIVED: return '–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞';
    default: return '–û–ø–µ—Ä–∞—Ü–∏—è';
  }
}

function isIncomeTransaction(type: string): boolean {
  return [
    TRANSACTION_TYPES.DEPOSIT,
    TRANSACTION_TYPES.TASK_REWARD,
    TRANSACTION_TYPES.REFERRAL_BONUS,
    TRANSACTION_TYPES.REFUND,
    TRANSACTION_TYPES.CHECK_RECEIVED
  ].includes(type as any);
}

function getNotificationIcon(type: string): string {
  switch (type) {
    case 'task_completed': return EMOJIS.completed;
    case 'task_created': return EMOJIS.advertise;
    case 'referral_joined': return EMOJIS.referrals;
    case 'balance_low': return EMOJIS.warning;
    case 'level_up': return EMOJIS.star;
    case 'check_received': return EMOJIS.checks;
    case 'system': return EMOJIS.bell;
    default: return EMOJIS.info;
  }
}

export default {
  formatUserProfile,
  formatUserShort,
  formatTaskListItem,
  formatTaskDetails,
  formatTransaction,
  formatTransactionsList,
  formatUserStats,
  formatUserTop,
  formatNotification,
  formatCheck,
  formatReferralStats
};